
Projet_Stage_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d3c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005ec4  08005ec4  00006ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee4  08005ee4  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005ee4  08005ee4  00006ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eec  08005eec  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eec  08005eec  00006eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ef0  08005ef0  00006ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005ef4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          00000220  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e388  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000243f  00000000  00000000  000153cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00017810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e8  00000000  00000000  000184f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f95  00000000  00000000  00018ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f905  00000000  00000000  0003ae6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d473d  00000000  00000000  0004a772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011eeaf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003574  00000000  00000000  0011eef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00122468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005eac 	.word	0x08005eac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005eac 	.word	0x08005eac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <Control_LED>:

} LED_Action;


uint8_t Control_LED(uint8_t led_num, uint8_t action)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	460a      	mov	r2, r1
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	4613      	mov	r3, r2
 80004c6:	71bb      	strb	r3, [r7, #6]
	uint8_t ReturnStatus = 0U;   //default value //no error
 80004c8:	2300      	movs	r3, #0
 80004ca:	73fb      	strb	r3, [r7, #15]


	if ( (action > LED_SET )||(led_num >= GPIO_Input_Number ))   //LED_SET =1  //GPIO_Input_Number 0..3
 80004cc:	79bb      	ldrb	r3, [r7, #6]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d802      	bhi.n	80004d8 <Control_LED+0x20>
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d902      	bls.n	80004de <Control_LED+0x26>
	{
		ReturnStatus = Bad_parameter ;   //Error Message
 80004d8:	23fe      	movs	r3, #254	@ 0xfe
 80004da:	73fb      	strb	r3, [r7, #15]
 80004dc:	e008      	b.n	80004f0 <Control_LED+0x38>
	}
	else   //ReturnStatus = 0U;
	{
        HAL_GPIO_WritePin(GPIOD, (uint16_t)led_matrix[led_num], (GPIO_PinState)action); // configure  pin number and action :set or reset
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	4a06      	ldr	r2, [pc, #24]	@ (80004fc <Control_LED+0x44>)
 80004e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004e6:	79ba      	ldrb	r2, [r7, #6]
 80004e8:	4619      	mov	r1, r3
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <Control_LED+0x48>)
 80004ec:	f003 fb68 	bl	8003bc0 <HAL_GPIO_WritePin>
	}
	return ReturnStatus;      //last value of ReturnStatus
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000000 	.word	0x20000000
 8000500:	40020c00 	.word	0x40020c00

08000504 <Read_LED>:


GPIO_PinState Read_LED(uint8_t led_num)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState bitstatus = GPIO_PIN_RESET;  // Default state is OFF
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
    // Check if the led_num is within valid range
    if (led_num < GPIO_Input_Number)
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d80a      	bhi.n	800052e <Read_LED+0x2a>
    {
        // Read the state of the specified LED
    	bitstatus = HAL_GPIO_ReadPin(GPIOD, led_matrix[led_num]);
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	4a08      	ldr	r2, [pc, #32]	@ (800053c <Read_LED+0x38>)
 800051c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000520:	4619      	mov	r1, r3
 8000522:	4807      	ldr	r0, [pc, #28]	@ (8000540 <Read_LED+0x3c>)
 8000524:	f003 fb34 	bl	8003b90 <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	73fb      	strb	r3, [r7, #15]
 800052c:	e001      	b.n	8000532 <Read_LED+0x2e>
    }
    else
    {
    	bitstatus = Bad_parameter ;
 800052e:	23fe      	movs	r3, #254	@ 0xfe
 8000530:	73fb      	strb	r3, [r7, #15]
    }
    return bitstatus;
 8000532:	7bfb      	ldrb	r3, [r7, #15]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000000 	.word	0x20000000
 8000540:	40020c00 	.word	0x40020c00

08000544 <Handle_TIM_IC_Capture>:
PWM_Measurement pwm = {0, 0};
uint32_t IC_Value1 = 0;
uint32_t IC_Value2 = 0;

PWM_Measurement Handle_TIM_IC_Capture()
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
        PWM_Measurement pwm = {0, 0};
 800054a:	2300      	movs	r3, #0
 800054c:	80bb      	strh	r3, [r7, #4]
 800054e:	2300      	movs	r3, #0
 8000550:	80fb      	strh	r3, [r7, #6]
        uint32_t IC_Value1 = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
        uint32_t IC_Value2 = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]

        // Capture de la période (TIM_CHANNEL_1)
        IC_Value1 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800055a:	2100      	movs	r1, #0
 800055c:	4821      	ldr	r0, [pc, #132]	@ (80005e4 <Handle_TIM_IC_Capture+0xa0>)
 800055e:	f004 fe9b 	bl	8005298 <HAL_TIM_ReadCapturedValue>
 8000562:	6178      	str	r0, [r7, #20]
        // Capture du temps haut (TIM_CHANNEL_2)
        IC_Value2 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8000564:	2104      	movs	r1, #4
 8000566:	481f      	ldr	r0, [pc, #124]	@ (80005e4 <Handle_TIM_IC_Capture+0xa0>)
 8000568:	f004 fe96 	bl	8005298 <HAL_TIM_ReadCapturedValue>
 800056c:	6138      	str	r0, [r7, #16]

        if (IC_Value1 != 0)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d025      	beq.n	80005c0 <Handle_TIM_IC_Capture+0x7c>
        {
            // Get the timer clock frequency
            uint32_t timerClock = HAL_RCC_GetPCLK1Freq() / (htim4.Init.Prescaler + 1);
 8000574:	f003 ffc8 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 8000578:	4602      	mov	r2, r0
 800057a:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <Handle_TIM_IC_Capture+0xa0>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	3301      	adds	r3, #1
 8000580:	fbb2 f3f3 	udiv	r3, r2, r3
 8000584:	60fb      	str	r3, [r7, #12]

            // Calculate duty cycle: high_time / period * 100
            pwm.dutyCycle = (IC_Value2 * 100.0f) / IC_Value1;
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	ee07 3a90 	vmov	s15, r3
 800058c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000590:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80005e8 <Handle_TIM_IC_Capture+0xa4>
 8000594:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005aa:	ee17 3a90 	vmov	r3, s15
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	80bb      	strh	r3, [r7, #4]

            // Calculate frequency: timerClock / period
            pwm.frequency = timerClock / IC_Value1;
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	80fb      	strh	r3, [r7, #6]
 80005be:	e003      	b.n	80005c8 <Handle_TIM_IC_Capture+0x84>
        }
        else
        {
            // If period is zero, set error values
            pwm.frequency = Bad_parameter;
 80005c0:	23fe      	movs	r3, #254	@ 0xfe
 80005c2:	80fb      	strh	r3, [r7, #6]
            pwm.dutyCycle = Bad_parameter;
 80005c4:	23fe      	movs	r3, #254	@ 0xfe
 80005c6:	80bb      	strh	r3, [r7, #4]
        }


    return pwm;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	2300      	movs	r3, #0
 80005ce:	893a      	ldrh	r2, [r7, #8]
 80005d0:	f362 030f 	bfi	r3, r2, #0, #16
 80005d4:	897a      	ldrh	r2, [r7, #10]
 80005d6:	f362 431f 	bfi	r3, r2, #16, #16
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000194 	.word	0x20000194
 80005e8:	42c80000 	.word	0x42c80000

080005ec <Set_PWM_output>:
#define Bad_parameter 0xFEU
#define pwm_channel_max 4U
#define duty_cycle_max 0x2710U   //duty cycle =100% equivalent to 10000(HEX 2710)  //precision=0.01%

uint8_t Set_PWM_output(uint32_t channel, uint16_t duty_cycle, uint16_t frequency)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	807b      	strh	r3, [r7, #2]
 80005f8:	4613      	mov	r3, r2
 80005fa:	803b      	strh	r3, [r7, #0]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	619a      	str	r2, [r3, #24]
    uint8_t ReturnStatus = 0U;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if ((channel > pwm_channel_max ) || (duty_cycle >duty_cycle_max ) || (frequency == 0U))
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b04      	cmp	r3, #4
 800061a:	d807      	bhi.n	800062c <Set_PWM_output+0x40>
 800061c:	887b      	ldrh	r3, [r7, #2]
 800061e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000622:	4293      	cmp	r3, r2
 8000624:	d802      	bhi.n	800062c <Set_PWM_output+0x40>
 8000626:	883b      	ldrh	r3, [r7, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d101      	bne.n	8000630 <Set_PWM_output+0x44>
    {
        return Bad_parameter ;
 800062c:	23fe      	movs	r3, #254	@ 0xfe
 800062e:	e05e      	b.n	80006ee <Set_PWM_output+0x102>
    }
    else
    {
        uint32_t PCLK1 = HAL_RCC_GetPCLK1Freq();
 8000630:	f003 ff6a 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 8000634:	6278      	str	r0, [r7, #36]	@ 0x24
        htim2.Init.Prescaler = (PCLK1 / (1000U * 1000U)) - 1U;  //PCLK1 clock in MHZ  //prescaler=39
 8000636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000638:	4a2f      	ldr	r2, [pc, #188]	@ (80006f8 <Set_PWM_output+0x10c>)
 800063a:	fba2 2303 	umull	r2, r3, r2, r3
 800063e:	0c9b      	lsrs	r3, r3, #18
 8000640:	3b01      	subs	r3, #1
 8000642:	4a2e      	ldr	r2, [pc, #184]	@ (80006fc <Set_PWM_output+0x110>)
 8000644:	6053      	str	r3, [r2, #4]
        htim2.Init.Period = (1000000/frequency) - 1U;     //ARR=999
 8000646:	883b      	ldrh	r3, [r7, #0]
 8000648:	4a2d      	ldr	r2, [pc, #180]	@ (8000700 <Set_PWM_output+0x114>)
 800064a:	fb92 f3f3 	sdiv	r3, r2, r3
 800064e:	3b01      	subs	r3, #1
 8000650:	4a2a      	ldr	r2, [pc, #168]	@ (80006fc <Set_PWM_output+0x110>)
 8000652:	60d3      	str	r3, [r2, #12]
        if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000654:	4829      	ldr	r0, [pc, #164]	@ (80006fc <Set_PWM_output+0x110>)
 8000656:	f004 f823 	bl	80046a0 <HAL_TIM_PWM_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <Set_PWM_output+0x78>
        {
            return Driver_error;
 8000660:	23fb      	movs	r3, #251	@ 0xfb
 8000662:	e044      	b.n	80006ee <Set_PWM_output+0x102>
        }
        sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000664:	2360      	movs	r3, #96	@ 0x60
 8000666:	60bb      	str	r3, [r7, #8]
        sConfigOC.Pulse = ((duty_cycle*htim2.Init.Period)/100)/100; //duty cycle in %
 8000668:	887b      	ldrh	r3, [r7, #2]
 800066a:	4a24      	ldr	r2, [pc, #144]	@ (80006fc <Set_PWM_output+0x110>)
 800066c:	68d2      	ldr	r2, [r2, #12]
 800066e:	fb02 f303 	mul.w	r3, r2, r3
 8000672:	4a24      	ldr	r2, [pc, #144]	@ (8000704 <Set_PWM_output+0x118>)
 8000674:	fba2 2303 	umull	r2, r3, r2, r3
 8000678:	0b5b      	lsrs	r3, r3, #13
 800067a:	60fb      	str	r3, [r7, #12]
        sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
        sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
          uint32_t tim_channel;
          switch (channel)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3b01      	subs	r3, #1
 8000688:	2b03      	cmp	r3, #3
 800068a:	d817      	bhi.n	80006bc <Set_PWM_output+0xd0>
 800068c:	a201      	add	r2, pc, #4	@ (adr r2, 8000694 <Set_PWM_output+0xa8>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	080006a5 	.word	0x080006a5
 8000698:	080006ab 	.word	0x080006ab
 800069c:	080006b1 	.word	0x080006b1
 80006a0:	080006b7 	.word	0x080006b7
           {
               case 1: tim_channel = TIM_CHANNEL_1; break;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006a8:	e00a      	b.n	80006c0 <Set_PWM_output+0xd4>
               case 2: tim_channel = TIM_CHANNEL_2; break;
 80006aa:	2304      	movs	r3, #4
 80006ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006ae:	e007      	b.n	80006c0 <Set_PWM_output+0xd4>
               case 3: tim_channel = TIM_CHANNEL_3; break;
 80006b0:	2308      	movs	r3, #8
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006b4:	e004      	b.n	80006c0 <Set_PWM_output+0xd4>
               case 4: tim_channel = TIM_CHANNEL_4; break;
 80006b6:	230c      	movs	r3, #12
 80006b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006ba:	e001      	b.n	80006c0 <Set_PWM_output+0xd4>
               default: return Bad_parameter; // Channel invalid
 80006bc:	23fe      	movs	r3, #254	@ 0xfe
 80006be:	e016      	b.n	80006ee <Set_PWM_output+0x102>
           }
           if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, tim_channel) != HAL_OK)
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006c6:	4619      	mov	r1, r3
 80006c8:	480c      	ldr	r0, [pc, #48]	@ (80006fc <Set_PWM_output+0x110>)
 80006ca:	f004 fc19 	bl	8004f00 <HAL_TIM_PWM_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <Set_PWM_output+0xec>
           {
               return Driver_error;
 80006d4:	23fb      	movs	r3, #251	@ 0xfb
 80006d6:	e00a      	b.n	80006ee <Set_PWM_output+0x102>
           }

           if (HAL_TIM_PWM_Start(&htim2, tim_channel) != HAL_OK)
 80006d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80006da:	4808      	ldr	r0, [pc, #32]	@ (80006fc <Set_PWM_output+0x110>)
 80006dc:	f004 f83a 	bl	8004754 <HAL_TIM_PWM_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <Set_PWM_output+0xfe>
           {
               return Driver_error;
 80006e6:	23fb      	movs	r3, #251	@ 0xfb
 80006e8:	e001      	b.n	80006ee <Set_PWM_output+0x102>
           }
           return ReturnStatus; // success
 80006ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
    }
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3730      	adds	r7, #48	@ 0x30
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	431bde83 	.word	0x431bde83
 80006fc:	20000104 	.word	0x20000104
 8000700:	000f4240 	.word	0x000f4240
 8000704:	d1b71759 	.word	0xd1b71759

08000708 <Get_PWM_output>:


//check set_PWM_output values
uint8_t Get_PWM_output(uint32_t channel, uint16_t *duty_cycle, uint16_t *frequency)  //use pointer to return 2 values : duty cycle and frequency
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
    if ((channel >  pwm_channel_max) || (duty_cycle == NULL) || (frequency == NULL))
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2b04      	cmp	r3, #4
 8000718:	d805      	bhi.n	8000726 <Get_PWM_output+0x1e>
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <Get_PWM_output+0x1e>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <Get_PWM_output+0x22>
    {
        return Bad_parameter;
 8000726:	23fe      	movs	r3, #254	@ 0xfe
 8000728:	e05b      	b.n	80007e2 <Get_PWM_output+0xda>
    }
    uint32_t PCLK1 = HAL_RCC_GetPCLK1Freq();
 800072a:	f003 feed 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 800072e:	61b8      	str	r0, [r7, #24]
    uint32_t prescaler = htim2.Init.Prescaler + 1U;
 8000730:	4b2e      	ldr	r3, [pc, #184]	@ (80007ec <Get_PWM_output+0xe4>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	3301      	adds	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
    uint32_t period = htim2.Init.Period + 1U;
 8000738:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <Get_PWM_output+0xe4>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	3301      	adds	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
    uint32_t compare_value = 0U;                    // Compare register default  value CCR
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
    switch (channel)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3b01      	subs	r3, #1
 8000748:	2b03      	cmp	r3, #3
 800074a:	d81f      	bhi.n	800078c <Get_PWM_output+0x84>
 800074c:	a201      	add	r2, pc, #4	@ (adr r2, 8000754 <Get_PWM_output+0x4c>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	08000765 	.word	0x08000765
 8000758:	0800076f 	.word	0x0800076f
 800075c:	08000779 	.word	0x08000779
 8000760:	08000783 	.word	0x08000783
    {
        case 1: compare_value = htim2.Instance->CCR1; break;
 8000764:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <Get_PWM_output+0xe4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800076a:	61fb      	str	r3, [r7, #28]
 800076c:	e010      	b.n	8000790 <Get_PWM_output+0x88>
        case 2: compare_value = htim2.Instance->CCR2; break;
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <Get_PWM_output+0xe4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000774:	61fb      	str	r3, [r7, #28]
 8000776:	e00b      	b.n	8000790 <Get_PWM_output+0x88>
        case 3: compare_value = htim2.Instance->CCR3; break;
 8000778:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <Get_PWM_output+0xe4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800077e:	61fb      	str	r3, [r7, #28]
 8000780:	e006      	b.n	8000790 <Get_PWM_output+0x88>
        case 4: compare_value = htim2.Instance->CCR4; break;
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <Get_PWM_output+0xe4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	61fb      	str	r3, [r7, #28]
 800078a:	e001      	b.n	8000790 <Get_PWM_output+0x88>
        default: return Bad_parameter;       // Invalid channel
 800078c:	23fe      	movs	r3, #254	@ 0xfe
 800078e:	e028      	b.n	80007e2 <Get_PWM_output+0xda>
    }
    if (period != 0)   //check the PWM frequency
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d01e      	beq.n	80007d4 <Get_PWM_output+0xcc>
    {
        *frequency = (PCLK1 / prescaler) / period;
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fbb2 f2f3 	udiv	r2, r2, r3
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	801a      	strh	r2, [r3, #0]
        *duty_cycle = ((compare_value * 100U) / period)*100;
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	2264      	movs	r2, #100	@ 0x64
 80007ae:	fb03 f202 	mul.w	r2, r3, r2
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	461a      	mov	r2, r3
 80007bc:	0092      	lsls	r2, r2, #2
 80007be:	4413      	add	r3, r2
 80007c0:	461a      	mov	r2, r3
 80007c2:	0091      	lsls	r1, r2, #2
 80007c4:	461a      	mov	r2, r3
 80007c6:	460b      	mov	r3, r1
 80007c8:	4413      	add	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	801a      	strh	r2, [r3, #0]
 80007d2:	e005      	b.n	80007e0 <Get_PWM_output+0xd8>
    }
    else
    {
        *frequency = 0U;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	801a      	strh	r2, [r3, #0]
        *duty_cycle = 0U;
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	2200      	movs	r2, #0
 80007de:	801a      	strh	r2, [r3, #0]
    }
    return 0U; // Success
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3720      	adds	r7, #32
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000104 	.word	0x20000104

080007f0 <Send_CAN_Message>:




void Send_CAN_Message(uint8_t *data, uint32_t length)  //variable data length
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
    TxHeader.DLC = length;
 80007fa:	4a09      	ldr	r2, [pc, #36]	@ (8000820 <Send_CAN_Message+0x30>)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	6113      	str	r3, [r2, #16]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TxMailbox) != HAL_OK)
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <Send_CAN_Message+0x34>)
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4906      	ldr	r1, [pc, #24]	@ (8000820 <Send_CAN_Message+0x30>)
 8000806:	4808      	ldr	r0, [pc, #32]	@ (8000828 <Send_CAN_Message+0x38>)
 8000808:	f001 fee2 	bl	80025d0 <HAL_CAN_AddTxMessage>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <Send_CAN_Message+0x26>
    {
        Error_Handler();          // Handle transmission error
 8000812:	f000 fb9b 	bl	8000f4c <Error_Handler>
    }
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200001dc 	.word	0x200001dc
 8000824:	20000218 	.word	0x20000218
 8000828:	200000dc 	.word	0x200000dc

0800082c <CAN_ConfigFilter>:


void CAN_ConfigFilter(uint32_t filterBank, uint32_t id, uint32_t idType)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	@ 0x38
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
    CAN_FilterTypeDef canFilterConfig;  // Declare a filter configuration structure
    canFilterConfig.FilterBank = filterBank;   // Set the filter bank number to configure
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
    canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Set the filter mode to ID mask
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
    canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;// Set the filter scale to 32 bits (for extended IDs)
 8000840:	2301      	movs	r3, #1
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
    canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;  // Assign the filter to FIFO0 (First In First Out)
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
    canFilterConfig.FilterActivation = ENABLE;   // Activate the filter
 8000848:	2301      	movs	r3, #1
 800084a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (idType == CAN_ID_STD)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d109      	bne.n	8000866 <CAN_ConfigFilter+0x3a>
    {
        // Configure the standard ID filter
        canFilterConfig.FilterIdHigh = id << 5; // Shift the ID left by 5 bits for the high part
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	015b      	lsls	r3, r3, #5
 8000856:	613b      	str	r3, [r7, #16]
        canFilterConfig.FilterIdLow = 0x0000;   // Low part is not used for standard IDs
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
        // Set the mask for standard IDs (allow any ID matching the higher bits)
        canFilterConfig.FilterMaskIdHigh = 0xFFFF << 5; // Mask high part
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <CAN_ConfigFilter+0x7c>)
 800085e:	61bb      	str	r3, [r7, #24]
        canFilterConfig.FilterMaskIdLow = 0x0000;       // Mask low part
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
 8000864:	e010      	b.n	8000888 <CAN_ConfigFilter+0x5c>
    }
    else if (idType == CAN_ID_EXT)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b04      	cmp	r3, #4
 800086a:	d10d      	bne.n	8000888 <CAN_ConfigFilter+0x5c>
    {
        // Configure the extended ID filter
        canFilterConfig.FilterIdHigh = (id >> 13) & 0xFFFF; // Get the high part of the extended ID
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	0b5b      	lsrs	r3, r3, #13
 8000870:	b29b      	uxth	r3, r3
 8000872:	613b      	str	r3, [r7, #16]
        canFilterConfig.FilterIdLow = (id << 3) & 0xFFFF;   // Get the low part of the extended ID
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	b29b      	uxth	r3, r3
 800087a:	617b      	str	r3, [r7, #20]
        // Set the mask for extended IDs
        canFilterConfig.FilterMaskIdHigh = (0x1FFFFFFF >> 13) & 0xFFFF; // Max mask high part
 800087c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000880:	61bb      	str	r3, [r7, #24]
        canFilterConfig.FilterMaskIdLow = (0x1FFFFFFF << 3) & 0xFFFF;   // Max mask low part
 8000882:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000886:	61fb      	str	r3, [r7, #28]
    }
    if (HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig) != HAL_OK)  // Configure the CAN filter with the defined settings
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	4807      	ldr	r0, [pc, #28]	@ (80008ac <CAN_ConfigFilter+0x80>)
 8000890:	f001 fd7a 	bl	8002388 <HAL_CAN_ConfigFilter>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <CAN_ConfigFilter+0x72>
    {
        Error_Handler();
 800089a:	f000 fb57 	bl	8000f4c <Error_Handler>
    }
}
 800089e:	bf00      	nop
 80008a0:	3738      	adds	r7, #56	@ 0x38
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	001fffe0 	.word	0x001fffe0
 80008ac:	200000dc 	.word	0x200000dc

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b4:	f000 ff8e 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b8:	f000 f84a 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008bc:	f000 fae6 	bl	8000e8c <MX_GPIO_Init>
  MX_DMA_Init();
 80008c0:	f000 fac4 	bl	8000e4c <MX_DMA_Init>
  MX_ADC1_Init();
 80008c4:	f000 f8ac 	bl	8000a20 <MX_ADC1_Init>
  MX_TIM2_Init();
 80008c8:	f000 f95e 	bl	8000b88 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008cc:	f000 f9d2 	bl	8000c74 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008d0:	f000 fa1e 	bl	8000d10 <MX_TIM4_Init>
  MX_CAN1_Init();
 80008d4:	f000 f922 	bl	8000b1c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80008d8:	2100      	movs	r1, #0
 80008da:	4818      	ldr	r0, [pc, #96]	@ (800093c <main+0x8c>)
 80008dc:	f004 f85c 	bl	8004998 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80008e0:	2104      	movs	r1, #4
 80008e2:	4816      	ldr	r0, [pc, #88]	@ (800093c <main+0x8c>)
 80008e4:	f004 f858 	bl	8004998 <HAL_TIM_IC_Start_IT>
  //simplify the timer configuration and interrupt handling code by using a single channel to capture both edges of the signal

  if (HAL_CAN_ActivateNotification(&hcan1,IRQ_Enable) != HAL_OK)  //activate the notification after successful transmission
 80008e8:	217f      	movs	r1, #127	@ 0x7f
 80008ea:	4815      	ldr	r0, [pc, #84]	@ (8000940 <main+0x90>)
 80008ec:	f002 f862 	bl	80029b4 <HAL_CAN_ActivateNotification>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <main+0x4a>
  {
      Error_Handler();
 80008f6:	f000 fb29 	bl	8000f4c <Error_Handler>
  }
  HAL_TIM_Base_Start(&htim2);
 80008fa:	4812      	ldr	r0, [pc, #72]	@ (8000944 <main+0x94>)
 80008fc:	f003 fe68 	bl	80045d0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000900:	4811      	ldr	r0, [pc, #68]	@ (8000948 <main+0x98>)
 8000902:	f003 fe65 	bl	80045d0 <HAL_TIM_Base_Start>
  HAL_CAN_Start(&hcan1);
 8000906:	480e      	ldr	r0, [pc, #56]	@ (8000940 <main+0x90>)
 8000908:	f001 fe1e 	bl	8002548 <HAL_CAN_Start>

  // Configuration of header of message CAN
  TxHeader.DLC=0x8U; // Length data (8 bytes )
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <main+0x9c>)
 800090e:	2208      	movs	r2, #8
 8000910:	611a      	str	r2, [r3, #16]
  TxHeader.IDE=CAN_ID_STD; // standard Identifier
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <main+0x9c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  TxHeader.RTR=CAN_RTR_DATA; // Data frame
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <main+0x9c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  TxHeader.StdId=0x366U;// standard Identifier
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <main+0x9c>)
 8000920:	f240 3266 	movw	r2, #870	@ 0x366
 8000924:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime=DISABLE;   //not include a global timestamp
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <main+0x9c>)
 8000928:	2200      	movs	r2, #0
 800092a:	751a      	strb	r2, [r3, #20]
  CAN_ConfigFilter(0, 0x402, CAN_ID_STD);   //accepted ID  =0x400
 800092c:	2200      	movs	r2, #0
 800092e:	f240 4102 	movw	r1, #1026	@ 0x402
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff ff7a 	bl	800082c <CAN_ConfigFilter>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <main+0x88>
 800093c:	20000194 	.word	0x20000194
 8000940:	200000dc 	.word	0x200000dc
 8000944:	20000104 	.word	0x20000104
 8000948:	2000014c 	.word	0x2000014c
 800094c:	200001dc 	.word	0x200001dc

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	@ 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2230      	movs	r2, #48	@ 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f005 fa78 	bl	8005e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <SystemClock_Config+0xc8>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097c:	4a26      	ldr	r2, [pc, #152]	@ (8000a18 <SystemClock_Config+0xc8>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	@ 0x40
 8000984:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <SystemClock_Config+0xc8>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <SystemClock_Config+0xcc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a20      	ldr	r2, [pc, #128]	@ (8000a1c <SystemClock_Config+0xcc>)
 800099a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <SystemClock_Config+0xcc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b4:	2310      	movs	r3, #16
 80009b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b8:	2302      	movs	r3, #2
 80009ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009bc:	2300      	movs	r3, #0
 80009be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009c0:	2308      	movs	r3, #8
 80009c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009c4:	2350      	movs	r3, #80	@ 0x50
 80009c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009cc:	2304      	movs	r3, #4
 80009ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d0:	f107 0320 	add.w	r3, r7, #32
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 f927 	bl	8003c28 <HAL_RCC_OscConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e0:	f000 fab4 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2302      	movs	r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80009ec:	2380      	movs	r3, #128	@ 0x80
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2101      	movs	r1, #1
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 fb8a 	bl	8004118 <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a0a:	f000 fa9f 	bl	8000f4c <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3750      	adds	r7, #80	@ 0x50
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	463b      	mov	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a32:	4b38      	ldr	r3, [pc, #224]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a34:	4a38      	ldr	r2, [pc, #224]	@ (8000b18 <MX_ADC1_Init+0xf8>)
 8000a36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a38:	4b36      	ldr	r3, [pc, #216]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a3e:	4b35      	ldr	r3, [pc, #212]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a44:	4b33      	ldr	r3, [pc, #204]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a4a:	4b32      	ldr	r3, [pc, #200]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000a50:	4b30      	ldr	r3, [pc, #192]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 4;
 8000a58:	4b2e      	ldr	r3, [pc, #184]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000a66:	4b2b      	ldr	r3, [pc, #172]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a68:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a6e:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000a74:	4b27      	ldr	r3, [pc, #156]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a82:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a88:	4822      	ldr	r0, [pc, #136]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000a8a:	f000 ff15 	bl	80018b8 <HAL_ADC_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x78>
  {
    Error_Handler();
 8000a94:	f000 fa5a 	bl	8000f4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481a      	ldr	r0, [pc, #104]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000aaa:	f001 f8d1 	bl	8001c50 <HAL_ADC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ab4:	f000 fa4a 	bl	8000f4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ab8:	2305      	movs	r3, #5
 8000aba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4813      	ldr	r0, [pc, #76]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000ac6:	f001 f8c3 	bl	8001c50 <HAL_ADC_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000ad0:	f000 fa3c 	bl	8000f4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ad4:	2306      	movs	r3, #6
 8000ad6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000ae2:	f001 f8b5 	bl	8001c50 <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000aec:	f000 fa2e 	bl	8000f4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000af0:	2307      	movs	r3, #7
 8000af2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <MX_ADC1_Init+0xf4>)
 8000afe:	f001 f8a7 	bl	8001c50 <HAL_ADC_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000b08:	f000 fa20 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000034 	.word	0x20000034
 8000b18:	40012000 	.word	0x40012000

08000b1c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b22:	4a18      	ldr	r2, [pc, #96]	@ (8000b84 <MX_CAN1_Init+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b28:	220a      	movs	r2, #10
 8000b2a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b3a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000b3e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b42:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b46:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <MX_CAN1_Init+0x64>)
 8000b6e:	f001 fb0f 	bl	8002190 <HAL_CAN_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b78:	f000 f9e8 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200000dc 	.word	0x200000dc
 8000b84:	40006400 	.word	0x40006400

08000b88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	@ 0x38
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bc2:	2227      	movs	r2, #39	@ 0x27
 8000bc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000bcc:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be0:	4823      	ldr	r0, [pc, #140]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000be2:	f003 fca5 	bl	8004530 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000bec:	f000 f9ae 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481c      	ldr	r0, [pc, #112]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bfe:	f004 fa41 	bl	8005084 <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c08:	f000 f9a0 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c0c:	4818      	ldr	r0, [pc, #96]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000c0e:	f003 fd47 	bl	80046a0 <HAL_TIM_PWM_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c18:	f000 f998 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c1c:	2320      	movs	r3, #32
 8000c1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4811      	ldr	r0, [pc, #68]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000c2c:	f005 f882 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c36:	f000 f989 	bl	8000f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3a:	2360      	movs	r3, #96	@ 0x60
 8000c3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000c52:	f004 f955 	bl	8004f00 <HAL_TIM_PWM_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c5c:	f000 f976 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c60:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000c62:	f000 fae3 	bl	800122c <HAL_TIM_MspPostInit>

}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	@ 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000104 	.word	0x20000104

08000c74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	@ (8000d08 <MX_TIM3_Init+0x94>)
 8000c92:	4a1e      	ldr	r2, [pc, #120]	@ (8000d0c <MX_TIM3_Init+0x98>)
 8000c94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39999;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <MX_TIM3_Init+0x94>)
 8000c98:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000c9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <MX_TIM3_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	@ (8000d08 <MX_TIM3_Init+0x94>)
 8000ca6:	2263      	movs	r2, #99	@ 0x63
 8000ca8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000caa:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <MX_TIM3_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <MX_TIM3_Init+0x94>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb6:	4814      	ldr	r0, [pc, #80]	@ (8000d08 <MX_TIM3_Init+0x94>)
 8000cb8:	f003 fc3a 	bl	8004530 <HAL_TIM_Base_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000cc2:	f000 f943 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <MX_TIM3_Init+0x94>)
 8000cd4:	f004 f9d6 	bl	8005084 <HAL_TIM_ConfigClockSource>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000cde:	f000 f935 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ce2:	2320      	movs	r3, #32
 8000ce4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	@ (8000d08 <MX_TIM3_Init+0x94>)
 8000cf0:	f005 f820 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000cfa:	f000 f927 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000014c 	.word	0x2000014c
 8000d0c:	40000400 	.word	0x40000400

08000d10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b090      	sub	sp, #64	@ 0x40
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8000e48 <MX_TIM4_Init+0x138>)
 8000d4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 8000d50:	4b3c      	ldr	r3, [pc, #240]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000d52:	2227      	movs	r2, #39	@ 0x27
 8000d54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b3b      	ldr	r3, [pc, #236]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d5c:	4b39      	ldr	r3, [pc, #228]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000d5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d64:	4b37      	ldr	r3, [pc, #220]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b36      	ldr	r3, [pc, #216]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d70:	4834      	ldr	r0, [pc, #208]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000d72:	f003 fbdd 	bl	8004530 <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f000 f8e6 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	482d      	ldr	r0, [pc, #180]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000d8e:	f004 f979 	bl	8005084 <HAL_TIM_ConfigClockSource>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000d98:	f000 f8d8 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000d9c:	4829      	ldr	r0, [pc, #164]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000d9e:	f003 fda1 	bl	80048e4 <HAL_TIM_IC_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000da8:	f000 f8d0 	bl	8000f4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000dac:	2304      	movs	r3, #4
 8000dae:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000db0:	2350      	movs	r3, #80	@ 0x50
 8000db2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481f      	ldr	r0, [pc, #124]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000dc8:	f004 fa23 	bl	8005212 <HAL_TIM_SlaveConfigSynchro>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8000dd2:	f000 f8bb 	bl	8000f4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2200      	movs	r2, #0
 8000dec:	4619      	mov	r1, r3
 8000dee:	4815      	ldr	r0, [pc, #84]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000df0:	f003 ffea 	bl	8004dc8 <HAL_TIM_IC_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000dfa:	f000 f8a7 	bl	8000f4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e02:	2302      	movs	r3, #2
 8000e04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480d      	ldr	r0, [pc, #52]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000e10:	f003 ffda 	bl	8004dc8 <HAL_TIM_IC_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 8000e1a:	f000 f897 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e1e:	2320      	movs	r3, #32
 8000e20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	@ (8000e44 <MX_TIM4_Init+0x134>)
 8000e2c:	f004 ff82 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 8000e36:	f000 f889 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3740      	adds	r7, #64	@ 0x40
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000194 	.word	0x20000194
 8000e48:	40000800 	.word	0x40000800

08000e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <MX_DMA_Init+0x3c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e88 <MX_DMA_Init+0x3c>)
 8000e5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <MX_DMA_Init+0x3c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2038      	movs	r0, #56	@ 0x38
 8000e74:	f002 f8d9 	bl	800302a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e78:	2038      	movs	r0, #56	@ 0x38
 8000e7a:	f002 f8f2 	bl	8003062 <HAL_NVIC_EnableIRQ>

}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	@ 0x28
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <MX_GPIO_Init+0xb8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a26      	ldr	r2, [pc, #152]	@ (8000f44 <MX_GPIO_Init+0xb8>)
 8000eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <MX_GPIO_Init+0xb8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <MX_GPIO_Init+0xb8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f44 <MX_GPIO_Init+0xb8>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <MX_GPIO_Init+0xb8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <MX_GPIO_Init+0xb8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a18      	ldr	r2, [pc, #96]	@ (8000f44 <MX_GPIO_Init+0xb8>)
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_GPIO_Init+0xb8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_GPIO_Init+0xb8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <MX_GPIO_Init+0xb8>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_GPIO_Init+0xb8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000f18:	480b      	ldr	r0, [pc, #44]	@ (8000f48 <MX_GPIO_Init+0xbc>)
 8000f1a:	f002 fe51 	bl	8003bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f1e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_GPIO_Init+0xbc>)
 8000f38:	f002 fc8e 	bl	8003858 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	@ 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020c00 	.word	0x40020c00

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <Error_Handler+0x8>

08000f58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8001084 <HAL_ADC_MspInit+0xdc>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d157      	bne.n	800107a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <HAL_ADC_MspInit+0xe0>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8001088 <HAL_ADC_MspInit+0xe0>)
 8000fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fda:	4b2b      	ldr	r3, [pc, #172]	@ (8001088 <HAL_ADC_MspInit+0xe0>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <HAL_ADC_MspInit+0xe0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a26      	ldr	r2, [pc, #152]	@ (8001088 <HAL_ADC_MspInit+0xe0>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b24      	ldr	r3, [pc, #144]	@ (8001088 <HAL_ADC_MspInit+0xe0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001002:	23f0      	movs	r3, #240	@ 0xf0
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001006:	2303      	movs	r3, #3
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	481d      	ldr	r0, [pc, #116]	@ (800108c <HAL_ADC_MspInit+0xe4>)
 8001016:	f002 fc1f 	bl	8003858 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800101a:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 800101c:	4a1d      	ldr	r2, [pc, #116]	@ (8001094 <HAL_ADC_MspInit+0xec>)
 800101e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001020:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001032:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 8001034:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001038:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 800103c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001040:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 8001044:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001048:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800104a:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 800104c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001050:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001052:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001058:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800105e:	480c      	ldr	r0, [pc, #48]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 8001060:	f002 f81a 	bl	8003098 <HAL_DMA_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800106a:	f7ff ff6f 	bl	8000f4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 8001072:	639a      	str	r2, [r3, #56]	@ 0x38
 8001074:	4a06      	ldr	r2, [pc, #24]	@ (8001090 <HAL_ADC_MspInit+0xe8>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	@ 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40012000 	.word	0x40012000
 8001088:	40023800 	.word	0x40023800
 800108c:	40020000 	.word	0x40020000
 8001090:	2000007c 	.word	0x2000007c
 8001094:	40026410 	.word	0x40026410

08001098 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	@ 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a1d      	ldr	r2, [pc, #116]	@ (800112c <HAL_CAN_MspInit+0x94>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d133      	bne.n	8001122 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <HAL_CAN_MspInit+0x98>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001130 <HAL_CAN_MspInit+0x98>)
 80010c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ca:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <HAL_CAN_MspInit+0x98>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_CAN_MspInit+0x98>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a14      	ldr	r2, [pc, #80]	@ (8001130 <HAL_CAN_MspInit+0x98>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_CAN_MspInit+0x98>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010f2:	2303      	movs	r3, #3
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001102:	2309      	movs	r3, #9
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4809      	ldr	r0, [pc, #36]	@ (8001134 <HAL_CAN_MspInit+0x9c>)
 800110e:	f002 fba3 	bl	8003858 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2014      	movs	r0, #20
 8001118:	f001 ff87 	bl	800302a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800111c:	2014      	movs	r0, #20
 800111e:	f001 ffa0 	bl	8003062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	@ 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40006400 	.word	0x40006400
 8001130:	40023800 	.word	0x40023800
 8001134:	40020c00 	.word	0x40020c00

08001138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	@ 0x30
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001158:	d10e      	bne.n	8001178 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <HAL_TIM_Base_MspInit+0xe4>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	4a2e      	ldr	r2, [pc, #184]	@ (800121c <HAL_TIM_Base_MspInit+0xe4>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6413      	str	r3, [r2, #64]	@ 0x40
 800116a:	4b2c      	ldr	r3, [pc, #176]	@ (800121c <HAL_TIM_Base_MspInit+0xe4>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001176:	e04c      	b.n	8001212 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a28      	ldr	r2, [pc, #160]	@ (8001220 <HAL_TIM_Base_MspInit+0xe8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10e      	bne.n	80011a0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	4b25      	ldr	r3, [pc, #148]	@ (800121c <HAL_TIM_Base_MspInit+0xe4>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	4a24      	ldr	r2, [pc, #144]	@ (800121c <HAL_TIM_Base_MspInit+0xe4>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6413      	str	r3, [r2, #64]	@ 0x40
 8001192:	4b22      	ldr	r3, [pc, #136]	@ (800121c <HAL_TIM_Base_MspInit+0xe4>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697b      	ldr	r3, [r7, #20]
}
 800119e:	e038      	b.n	8001212 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001224 <HAL_TIM_Base_MspInit+0xec>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d133      	bne.n	8001212 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <HAL_TIM_Base_MspInit+0xe4>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	4a1a      	ldr	r2, [pc, #104]	@ (800121c <HAL_TIM_Base_MspInit+0xe4>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <HAL_TIM_Base_MspInit+0xe4>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <HAL_TIM_Base_MspInit+0xe4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a13      	ldr	r2, [pc, #76]	@ (800121c <HAL_TIM_Base_MspInit+0xe4>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <HAL_TIM_Base_MspInit+0xe4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011e2:	2340      	movs	r3, #64	@ 0x40
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011f2:	2302      	movs	r3, #2
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	480a      	ldr	r0, [pc, #40]	@ (8001228 <HAL_TIM_Base_MspInit+0xf0>)
 80011fe:	f002 fb2b 	bl	8003858 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	201e      	movs	r0, #30
 8001208:	f001 ff0f 	bl	800302a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800120c:	201e      	movs	r0, #30
 800120e:	f001 ff28 	bl	8003062 <HAL_NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3730      	adds	r7, #48	@ 0x30
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40000400 	.word	0x40000400
 8001224:	40000800 	.word	0x40000800
 8001228:	40020400 	.word	0x40020400

0800122c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800124c:	d11d      	bne.n	800128a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <HAL_TIM_MspPostInit+0x68>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a0f      	ldr	r2, [pc, #60]	@ (8001294 <HAL_TIM_MspPostInit+0x68>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <HAL_TIM_MspPostInit+0x68>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800126a:	2301      	movs	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800127a:	2301      	movs	r3, #1
 800127c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4619      	mov	r1, r3
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <HAL_TIM_MspPostInit+0x6c>)
 8001286:	f002 fae7 	bl	8003858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <NMI_Handler+0x4>

080012a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <MemManage_Handler+0x4>

080012b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f2:	f000 fac1 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

    // Check if a CAN message has been received successfully
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, Rx_Data) == HAL_OK)
 8001302:	4b9f      	ldr	r3, [pc, #636]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001304:	4a9f      	ldr	r2, [pc, #636]	@ (8001584 <CAN1_RX0_IRQHandler+0x288>)
 8001306:	2100      	movs	r1, #0
 8001308:	489f      	ldr	r0, [pc, #636]	@ (8001588 <CAN1_RX0_IRQHandler+0x28c>)
 800130a:	f001 fa31 	bl	8002770 <HAL_CAN_GetRxMessage>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	f040 81ec 	bne.w	80016ee <CAN1_RX0_IRQHandler+0x3f2>
    {
        switch (Rx_Data[0]) // Module ID = Rx_Data[0]
 8001316:	4b9a      	ldr	r3, [pc, #616]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	3b01      	subs	r3, #1
 800131c:	2b03      	cmp	r3, #3
 800131e:	f200 81d8 	bhi.w	80016d2 <CAN1_RX0_IRQHandler+0x3d6>
 8001322:	a201      	add	r2, pc, #4	@ (adr r2, 8001328 <CAN1_RX0_IRQHandler+0x2c>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	08001339 	.word	0x08001339
 800132c:	080013cb 	.word	0x080013cb
 8001330:	080014d3 	.word	0x080014d3
 8001334:	08001605 	.word	0x08001605
        {
            case module_GPIO_led_ID:  // Module ID for GPIO LED control
                switch (Rx_Data[1])  // Routine ID = Rx_Data[1]
 8001338:	4b91      	ldr	r3, [pc, #580]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 800133a:	785b      	ldrb	r3, [r3, #1]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d002      	beq.n	8001346 <CAN1_RX0_IRQHandler+0x4a>
 8001340:	2b02      	cmp	r3, #2
 8001342:	d01b      	beq.n	800137c <CAN1_RX0_IRQHandler+0x80>
 8001344:	e032      	b.n	80013ac <CAN1_RX0_IRQHandler+0xb0>
                {
                    case LED_Set_Val: // Set LED value
                        ReturnStatus = Control_LED(Rx_Data[2], Rx_Data[3]);
 8001346:	4b8e      	ldr	r3, [pc, #568]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001348:	789b      	ldrb	r3, [r3, #2]
 800134a:	4a8d      	ldr	r2, [pc, #564]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 800134c:	78d2      	ldrb	r2, [r2, #3]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8b1 	bl	80004b8 <Control_LED>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	4b8c      	ldr	r3, [pc, #560]	@ (800158c <CAN1_RX0_IRQHandler+0x290>)
 800135c:	701a      	strb	r2, [r3, #0]
                        Rx_Data[0] += 0x40U;  // Mark as response
 800135e:	4b88      	ldr	r3, [pc, #544]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	3340      	adds	r3, #64	@ 0x40
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b86      	ldr	r3, [pc, #536]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001368:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = ReturnStatus;
 800136a:	4b88      	ldr	r3, [pc, #544]	@ (800158c <CAN1_RX0_IRQHandler+0x290>)
 800136c:	781a      	ldrb	r2, [r3, #0]
 800136e:	4b84      	ldr	r3, [pc, #528]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001370:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 8001372:	2108      	movs	r1, #8
 8001374:	4882      	ldr	r0, [pc, #520]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001376:	f7ff fa3b 	bl	80007f0 <Send_CAN_Message>
                        break;
 800137a:	e025      	b.n	80013c8 <CAN1_RX0_IRQHandler+0xcc>

                    case LED_Get_Val: // Get LED value
                        bitstatus = Read_LED(Rx_Data[2]);
 800137c:	4b80      	ldr	r3, [pc, #512]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 800137e:	789b      	ldrb	r3, [r3, #2]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8bf 	bl	8000504 <Read_LED>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	4b81      	ldr	r3, [pc, #516]	@ (8001590 <CAN1_RX0_IRQHandler+0x294>)
 800138c:	701a      	strb	r2, [r3, #0]
                        Rx_Data[0] += 0x40U;  // Mark as response
 800138e:	4b7c      	ldr	r3, [pc, #496]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3340      	adds	r3, #64	@ 0x40
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b7a      	ldr	r3, [pc, #488]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001398:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = (uint8_t)bitstatus;  // Update with the state of the LED
 800139a:	4b7d      	ldr	r3, [pc, #500]	@ (8001590 <CAN1_RX0_IRQHandler+0x294>)
 800139c:	781a      	ldrb	r2, [r3, #0]
 800139e:	4b78      	ldr	r3, [pc, #480]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80013a0:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 80013a2:	2108      	movs	r1, #8
 80013a4:	4876      	ldr	r0, [pc, #472]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80013a6:	f7ff fa23 	bl	80007f0 <Send_CAN_Message>
                        break;
 80013aa:	e00d      	b.n	80013c8 <CAN1_RX0_IRQHandler+0xcc>

                    default:
                        // Routine ID not defined
                        Rx_Data[0] += 0x40U;
 80013ac:	4b74      	ldr	r3, [pc, #464]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	3340      	adds	r3, #64	@ 0x40
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b72      	ldr	r3, [pc, #456]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80013b6:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = Routine_ID_not_defined;
 80013b8:	4b71      	ldr	r3, [pc, #452]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80013ba:	22ff      	movs	r2, #255	@ 0xff
 80013bc:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);
 80013be:	2108      	movs	r1, #8
 80013c0:	486f      	ldr	r0, [pc, #444]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80013c2:	f7ff fa15 	bl	80007f0 <Send_CAN_Message>
                        break;
 80013c6:	bf00      	nop
                }
                break;
 80013c8:	e191      	b.n	80016ee <CAN1_RX0_IRQHandler+0x3f2>

            case module_PWM_control_ID:  // Module ID for PWM control
                switch (Rx_Data[1])  // Routine ID = Rx_Data[1]
 80013ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d002      	beq.n	80013d8 <CAN1_RX0_IRQHandler+0xdc>
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d02d      	beq.n	8001432 <CAN1_RX0_IRQHandler+0x136>
 80013d6:	e06d      	b.n	80014b4 <CAN1_RX0_IRQHandler+0x1b8>
                {
                    case PWM_Set_Freq: // Set PWM frequency
                        ReturnStatus = Set_PWM_output( Rx_Data[2],(Rx_Data[3] << 8) | Rx_Data[4],(Rx_Data[5] << 8) | Rx_Data[6]);
 80013d8:	4b69      	ldr	r3, [pc, #420]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80013da:	789b      	ldrb	r3, [r3, #2]
 80013dc:	4618      	mov	r0, r3
 80013de:	4b68      	ldr	r3, [pc, #416]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80013e0:	78db      	ldrb	r3, [r3, #3]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b66      	ldr	r3, [pc, #408]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80013e8:	791b      	ldrb	r3, [r3, #4]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	b299      	uxth	r1, r3
 80013f2:	4b63      	ldr	r3, [pc, #396]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80013f4:	795b      	ldrb	r3, [r3, #5]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	4b61      	ldr	r3, [pc, #388]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80013fc:	799b      	ldrb	r3, [r3, #6]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b21b      	sxth	r3, r3
 8001404:	b29b      	uxth	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	f7ff f8f0 	bl	80005ec <Set_PWM_output>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b5e      	ldr	r3, [pc, #376]	@ (800158c <CAN1_RX0_IRQHandler+0x290>)
 8001412:	701a      	strb	r2, [r3, #0]
                        Rx_Data[0] += 0x40U;  // Mark as response
 8001414:	4b5a      	ldr	r3, [pc, #360]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	3340      	adds	r3, #64	@ 0x40
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b58      	ldr	r3, [pc, #352]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 800141e:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = ReturnStatus;
 8001420:	4b5a      	ldr	r3, [pc, #360]	@ (800158c <CAN1_RX0_IRQHandler+0x290>)
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	4b56      	ldr	r3, [pc, #344]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001426:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 8001428:	2108      	movs	r1, #8
 800142a:	4855      	ldr	r0, [pc, #340]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 800142c:	f7ff f9e0 	bl	80007f0 <Send_CAN_Message>
                        break;
 8001430:	e04e      	b.n	80014d0 <CAN1_RX0_IRQHandler+0x1d4>

                    case PWM_Get_Freq: // Get PWM frequency and duty cycle
                        status = Get_PWM_output(Rx_Data[2], &duty_cycle, &frequency);
 8001432:	4b53      	ldr	r3, [pc, #332]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001434:	789b      	ldrb	r3, [r3, #2]
 8001436:	4a57      	ldr	r2, [pc, #348]	@ (8001594 <CAN1_RX0_IRQHandler+0x298>)
 8001438:	4957      	ldr	r1, [pc, #348]	@ (8001598 <CAN1_RX0_IRQHandler+0x29c>)
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f964 	bl	8000708 <Get_PWM_output>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	4b55      	ldr	r3, [pc, #340]	@ (800159c <CAN1_RX0_IRQHandler+0x2a0>)
 8001446:	701a      	strb	r2, [r3, #0]
                        if (status == 0U)
 8001448:	4b54      	ldr	r3, [pc, #336]	@ (800159c <CAN1_RX0_IRQHandler+0x2a0>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d122      	bne.n	8001496 <CAN1_RX0_IRQHandler+0x19a>
                        {
                            // Successfully retrieved PWM configuration
                            // Populate the response data
                            Rx_Data[0] += 0x40U;  // Mark as response
 8001450:	4b4b      	ldr	r3, [pc, #300]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3340      	adds	r3, #64	@ 0x40
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b49      	ldr	r3, [pc, #292]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 800145a:	701a      	strb	r2, [r3, #0]
                            Rx_Data[6] = (uint8_t)frequency;
 800145c:	4b4d      	ldr	r3, [pc, #308]	@ (8001594 <CAN1_RX0_IRQHandler+0x298>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4b47      	ldr	r3, [pc, #284]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001464:	719a      	strb	r2, [r3, #6]
                            Rx_Data[5] = (uint8_t)(frequency >> 8);
 8001466:	4b4b      	ldr	r3, [pc, #300]	@ (8001594 <CAN1_RX0_IRQHandler+0x298>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	b29b      	uxth	r3, r3
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b43      	ldr	r3, [pc, #268]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001472:	715a      	strb	r2, [r3, #5]
                            Rx_Data[4] = (uint8_t)duty_cycle;
 8001474:	4b48      	ldr	r3, [pc, #288]	@ (8001598 <CAN1_RX0_IRQHandler+0x29c>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b41      	ldr	r3, [pc, #260]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 800147c:	711a      	strb	r2, [r3, #4]
                            Rx_Data[3] = (uint8_t)(duty_cycle >> 8);
 800147e:	4b46      	ldr	r3, [pc, #280]	@ (8001598 <CAN1_RX0_IRQHandler+0x29c>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b29b      	uxth	r3, r3
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b3d      	ldr	r3, [pc, #244]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 800148a:	70da      	strb	r2, [r3, #3]
                            Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 800148c:	2108      	movs	r1, #8
 800148e:	483c      	ldr	r0, [pc, #240]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001490:	f7ff f9ae 	bl	80007f0 <Send_CAN_Message>
                        {
                            Rx_Data[0] += 0x40U;
                            Rx_Data[7] = status;  // Error code
                            Send_CAN_Message(Rx_Data, 0x8U);  // Send response with error
                        }
                        break;
 8001494:	e01c      	b.n	80014d0 <CAN1_RX0_IRQHandler+0x1d4>
                            Rx_Data[0] += 0x40U;
 8001496:	4b3a      	ldr	r3, [pc, #232]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3340      	adds	r3, #64	@ 0x40
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b38      	ldr	r3, [pc, #224]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80014a0:	701a      	strb	r2, [r3, #0]
                            Rx_Data[7] = status;  // Error code
 80014a2:	4b3e      	ldr	r3, [pc, #248]	@ (800159c <CAN1_RX0_IRQHandler+0x2a0>)
 80014a4:	781a      	ldrb	r2, [r3, #0]
 80014a6:	4b36      	ldr	r3, [pc, #216]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80014a8:	71da      	strb	r2, [r3, #7]
                            Send_CAN_Message(Rx_Data, 0x8U);  // Send response with error
 80014aa:	2108      	movs	r1, #8
 80014ac:	4834      	ldr	r0, [pc, #208]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80014ae:	f7ff f99f 	bl	80007f0 <Send_CAN_Message>
                        break;
 80014b2:	e00d      	b.n	80014d0 <CAN1_RX0_IRQHandler+0x1d4>

                    default:
                        // Routine ID not defined
                        Rx_Data[0] += 0x40U;
 80014b4:	4b32      	ldr	r3, [pc, #200]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	3340      	adds	r3, #64	@ 0x40
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b30      	ldr	r3, [pc, #192]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80014be:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = Routine_ID_not_defined;
 80014c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80014c2:	22ff      	movs	r2, #255	@ 0xff
 80014c4:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);
 80014c6:	2108      	movs	r1, #8
 80014c8:	482d      	ldr	r0, [pc, #180]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80014ca:	f7ff f991 	bl	80007f0 <Send_CAN_Message>
                        break;
 80014ce:	bf00      	nop
                }
                break;
 80014d0:	e10d      	b.n	80016ee <CAN1_RX0_IRQHandler+0x3f2>

          case module_ADC_DMA_control_ID:  // Module ID for ADC DMA
                switch (Rx_Data[1])  // Routine ID = Rx_Data[1]
 80014d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d068      	beq.n	80015ac <CAN1_RX0_IRQHandler+0x2b0>
 80014da:	2b03      	cmp	r3, #3
 80014dc:	f300 8083 	bgt.w	80015e6 <CAN1_RX0_IRQHandler+0x2ea>
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d002      	beq.n	80014ea <CAN1_RX0_IRQHandler+0x1ee>
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d01f      	beq.n	8001528 <CAN1_RX0_IRQHandler+0x22c>
 80014e8:	e07d      	b.n	80015e6 <CAN1_RX0_IRQHandler+0x2ea>
                {
                    case ADC_start:
                        Rx_Data[0] += 0x40U;  // Mark as response
 80014ea:	4b25      	ldr	r3, [pc, #148]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	3340      	adds	r3, #64	@ 0x40
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b23      	ldr	r3, [pc, #140]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80014f4:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = 0U;
 80014f6:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	71da      	strb	r2, [r3, #7]
                        if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, (uint32_t)BUFFER_SIZE) != HAL_OK)
 80014fc:	2204      	movs	r2, #4
 80014fe:	4928      	ldr	r1, [pc, #160]	@ (80015a0 <CAN1_RX0_IRQHandler+0x2a4>)
 8001500:	4828      	ldr	r0, [pc, #160]	@ (80015a4 <CAN1_RX0_IRQHandler+0x2a8>)
 8001502:	f000 fa1d 	bl	8001940 <HAL_ADC_Start_DMA>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <CAN1_RX0_IRQHandler+0x218>
                        {

                            Rx_Data[7] = Driver_error;
 800150c:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 800150e:	22fb      	movs	r2, #251	@ 0xfb
 8001510:	71da      	strb	r2, [r3, #7]
 8001512:	e004      	b.n	800151e <CAN1_RX0_IRQHandler+0x222>
                        }
                        else
                        {
                        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); //to check timer
 8001514:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001518:	4823      	ldr	r0, [pc, #140]	@ (80015a8 <CAN1_RX0_IRQHandler+0x2ac>)
 800151a:	f002 fb6a 	bl	8003bf2 <HAL_GPIO_TogglePin>
                        }
                        Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 800151e:	2108      	movs	r1, #8
 8001520:	4817      	ldr	r0, [pc, #92]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001522:	f7ff f965 	bl	80007f0 <Send_CAN_Message>
                        break;
 8001526:	e06c      	b.n	8001602 <CAN1_RX0_IRQHandler+0x306>


                    case ADC_get_values:
                    {
                        if (Rx_Data[2] < 4)
 8001528:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 800152a:	789b      	ldrb	r3, [r3, #2]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d814      	bhi.n	800155a <CAN1_RX0_IRQHandler+0x25e>
                        {
                            Rx_Data[4] = adc_buffer[Rx_Data[2]];
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001532:	789b      	ldrb	r3, [r3, #2]
 8001534:	461a      	mov	r2, r3
 8001536:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <CAN1_RX0_IRQHandler+0x2a4>)
 8001538:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001540:	711a      	strb	r2, [r3, #4]
                            Rx_Data[3] = adc_buffer[Rx_Data[2]]>>8;
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001544:	789b      	ldrb	r3, [r3, #2]
 8001546:	461a      	mov	r2, r3
 8001548:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <CAN1_RX0_IRQHandler+0x2a4>)
 800154a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800154e:	0a1b      	lsrs	r3, r3, #8
 8001550:	b29b      	uxth	r3, r3
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001556:	70da      	strb	r2, [r3, #3]
 8001558:	e00d      	b.n	8001576 <CAN1_RX0_IRQHandler+0x27a>
                        }
                        else
                        {
                            Rx_Data[0] += 0x40U;
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	3340      	adds	r3, #64	@ 0x40
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001564:	701a      	strb	r2, [r3, #0]
                            Rx_Data[7] =  Bad_parameter;
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 8001568:	22fe      	movs	r2, #254	@ 0xfe
 800156a:	71da      	strb	r2, [r3, #7]
                            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); //to check timer
 800156c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001570:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <CAN1_RX0_IRQHandler+0x2ac>)
 8001572:	f002 fb3e 	bl	8003bf2 <HAL_GPIO_TogglePin>
                        }
                        Send_CAN_Message(Rx_Data, 0x8U);
 8001576:	2108      	movs	r1, #8
 8001578:	4801      	ldr	r0, [pc, #4]	@ (8001580 <CAN1_RX0_IRQHandler+0x284>)
 800157a:	f7ff f939 	bl	80007f0 <Send_CAN_Message>
                        break;
 800157e:	e040      	b.n	8001602 <CAN1_RX0_IRQHandler+0x306>
 8001580:	20000210 	.word	0x20000210
 8001584:	200001f4 	.word	0x200001f4
 8001588:	200000dc 	.word	0x200000dc
 800158c:	20000225 	.word	0x20000225
 8001590:	20000224 	.word	0x20000224
 8001594:	2000022a 	.word	0x2000022a
 8001598:	20000228 	.word	0x20000228
 800159c:	20000226 	.word	0x20000226
 80015a0:	2000021c 	.word	0x2000021c
 80015a4:	20000034 	.word	0x20000034
 80015a8:	40020c00 	.word	0x40020c00
                    }
                    break;

                    case ADC_stop:
                        Rx_Data[0] += 0x40U;  // Mark as response
 80015ac:	4b55      	ldr	r3, [pc, #340]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	3340      	adds	r3, #64	@ 0x40
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b53      	ldr	r3, [pc, #332]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80015b6:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = 0U;
 80015b8:	4b52      	ldr	r3, [pc, #328]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	71da      	strb	r2, [r3, #7]
                        if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 80015be:	4852      	ldr	r0, [pc, #328]	@ (8001708 <CAN1_RX0_IRQHandler+0x40c>)
 80015c0:	f000 face 	bl	8001b60 <HAL_ADC_Stop_DMA>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <CAN1_RX0_IRQHandler+0x2d6>
                        {
                            Rx_Data[7] = Driver_error;
 80015ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80015cc:	22fb      	movs	r2, #251	@ 0xfb
 80015ce:	71da      	strb	r2, [r3, #7]
 80015d0:	e004      	b.n	80015dc <CAN1_RX0_IRQHandler+0x2e0>
                        }
                        else
                        {
                        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //to check timer
 80015d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015d6:	484d      	ldr	r0, [pc, #308]	@ (800170c <CAN1_RX0_IRQHandler+0x410>)
 80015d8:	f002 fb0b 	bl	8003bf2 <HAL_GPIO_TogglePin>
                        }
                        Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 80015dc:	2108      	movs	r1, #8
 80015de:	4849      	ldr	r0, [pc, #292]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80015e0:	f7ff f906 	bl	80007f0 <Send_CAN_Message>
                        break;
 80015e4:	e00d      	b.n	8001602 <CAN1_RX0_IRQHandler+0x306>

                    default:
                        // Routine ID not defined
                        Rx_Data[0] += 0x40U;
 80015e6:	4b47      	ldr	r3, [pc, #284]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	3340      	adds	r3, #64	@ 0x40
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b45      	ldr	r3, [pc, #276]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80015f0:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = Routine_ID_not_defined;
 80015f2:	4b44      	ldr	r3, [pc, #272]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80015f4:	22ff      	movs	r2, #255	@ 0xff
 80015f6:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);
 80015f8:	2108      	movs	r1, #8
 80015fa:	4842      	ldr	r0, [pc, #264]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80015fc:	f7ff f8f8 	bl	80007f0 <Send_CAN_Message>
                        break;
 8001600:	bf00      	nop
                }
                break;
 8001602:	e074      	b.n	80016ee <CAN1_RX0_IRQHandler+0x3f2>
            case module_PWM_Input:  // Module ID for PWM Input
                switch (Rx_Data[1])  // Routine ID = Rx_Data[1]
 8001604:	4b3f      	ldr	r3, [pc, #252]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d153      	bne.n	80016b4 <CAN1_RX0_IRQHandler+0x3b8>
                {
                    case PWM_Input_Get: // Get PWM Input values
                        pwm = Handle_TIM_IC_Capture(channel);
 800160c:	4b40      	ldr	r3, [pc, #256]	@ (8001710 <CAN1_RX0_IRQHandler+0x414>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff97 	bl	8000544 <Handle_TIM_IC_Capture>
 8001616:	4602      	mov	r2, r0
 8001618:	4b3e      	ldr	r3, [pc, #248]	@ (8001714 <CAN1_RX0_IRQHandler+0x418>)
 800161a:	4611      	mov	r1, r2
 800161c:	8019      	strh	r1, [r3, #0]
 800161e:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001622:	805a      	strh	r2, [r3, #2]
                        if (pwm.dutyCycle > 0.0f && pwm.frequency > 0.0f)
 8001624:	4b3b      	ldr	r3, [pc, #236]	@ (8001714 <CAN1_RX0_IRQHandler+0x418>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001630:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001638:	dd2e      	ble.n	8001698 <CAN1_RX0_IRQHandler+0x39c>
 800163a:	4b36      	ldr	r3, [pc, #216]	@ (8001714 <CAN1_RX0_IRQHandler+0x418>)
 800163c:	885b      	ldrh	r3, [r3, #2]
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001646:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	dd23      	ble.n	8001698 <CAN1_RX0_IRQHandler+0x39c>
                        {
                        	// Convert float values to integers
                            uint16_t dutyCycle_int = (uint16_t)pwm.dutyCycle;
 8001650:	4b30      	ldr	r3, [pc, #192]	@ (8001714 <CAN1_RX0_IRQHandler+0x418>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	80fb      	strh	r3, [r7, #6]
                            uint16_t frequency_int = (uint16_t)pwm.frequency;
 8001656:	4b2f      	ldr	r3, [pc, #188]	@ (8001714 <CAN1_RX0_IRQHandler+0x418>)
 8001658:	885b      	ldrh	r3, [r3, #2]
 800165a:	80bb      	strh	r3, [r7, #4]

                            // Successfully retrieved PWM configuration
                            // Populate the response data
                            Rx_Data[0] += 0x40U;  // Mark as response
 800165c:	4b29      	ldr	r3, [pc, #164]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	3340      	adds	r3, #64	@ 0x40
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 8001666:	701a      	strb	r2, [r3, #0]
                            Rx_Data[6] = (uint8_t)(frequency_int & 0xFF); // Low byte of frequency
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b25      	ldr	r3, [pc, #148]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 800166e:	719a      	strb	r2, [r3, #6]
                            Rx_Data[5] = (uint8_t)((frequency_int >> 8) & 0xFF); // High byte of frequency
 8001670:	88bb      	ldrh	r3, [r7, #4]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	b29b      	uxth	r3, r3
 8001676:	b2da      	uxtb	r2, r3
 8001678:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 800167a:	715a      	strb	r2, [r3, #5]
                            Rx_Data[4] = (uint8_t)(dutyCycle_int & 0xFF); // Low byte of duty cycle
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 8001682:	711a      	strb	r2, [r3, #4]
                            Rx_Data[3] = (uint8_t)((dutyCycle_int >> 8) & 0xFF); // High byte of duty cycle
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	b29b      	uxth	r3, r3
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 800168e:	70da      	strb	r2, [r3, #3]
                            Rx_Data[7] = 0U; // No error
 8001690:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 8001692:	2200      	movs	r2, #0
 8001694:	71da      	strb	r2, [r3, #7]
                        {
 8001696:	e008      	b.n	80016aa <CAN1_RX0_IRQHandler+0x3ae>
                        }
                        else
                        {
                            Rx_Data[0] += 0x40U;
 8001698:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	3340      	adds	r3, #64	@ 0x40
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80016a2:	701a      	strb	r2, [r3, #0]
                            Rx_Data[7] = Driver_error;  // Error code
 80016a4:	4b17      	ldr	r3, [pc, #92]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80016a6:	22fb      	movs	r2, #251	@ 0xfb
 80016a8:	71da      	strb	r2, [r3, #7]
                        }
                        Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 80016aa:	2108      	movs	r1, #8
 80016ac:	4815      	ldr	r0, [pc, #84]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80016ae:	f7ff f89f 	bl	80007f0 <Send_CAN_Message>
                        break;
 80016b2:	e00d      	b.n	80016d0 <CAN1_RX0_IRQHandler+0x3d4>

                    default:
                        // Routine ID not defined
                        Rx_Data[0] += 0x40U;
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3340      	adds	r3, #64	@ 0x40
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80016be:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = Routine_ID_not_defined;
 80016c0:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80016c2:	22ff      	movs	r2, #255	@ 0xff
 80016c4:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);
 80016c6:	2108      	movs	r1, #8
 80016c8:	480e      	ldr	r0, [pc, #56]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80016ca:	f7ff f891 	bl	80007f0 <Send_CAN_Message>
                        break;
 80016ce:	bf00      	nop
                }
                break;
 80016d0:	e00d      	b.n	80016ee <CAN1_RX0_IRQHandler+0x3f2>

            default:
                // Module ID not defined
                Rx_Data[0] += 0x40U;
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	3340      	adds	r3, #64	@ 0x40
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80016dc:	701a      	strb	r2, [r3, #0]
                Rx_Data[7] = Module_ID_not_defined;
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80016e0:	22fa      	movs	r2, #250	@ 0xfa
 80016e2:	71da      	strb	r2, [r3, #7]
                Send_CAN_Message(Rx_Data, 0x8U);
 80016e4:	2108      	movs	r1, #8
 80016e6:	4807      	ldr	r0, [pc, #28]	@ (8001704 <CAN1_RX0_IRQHandler+0x408>)
 80016e8:	f7ff f882 	bl	80007f0 <Send_CAN_Message>
                break;
 80016ec:	bf00      	nop
        }
    }

    // Call the default CAN interrupt handler
    HAL_CAN_IRQHandler(&hcan1);
 80016ee:	480a      	ldr	r0, [pc, #40]	@ (8001718 <CAN1_RX0_IRQHandler+0x41c>)
 80016f0:	f001 f986 	bl	8002a00 <HAL_CAN_IRQHandler>

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016f4:	4808      	ldr	r0, [pc, #32]	@ (8001718 <CAN1_RX0_IRQHandler+0x41c>)
 80016f6:	f001 f983 	bl	8002a00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000210 	.word	0x20000210
 8001708:	20000034 	.word	0x20000034
 800170c:	40020c00 	.word	0x40020c00
 8001710:	2000022c 	.word	0x2000022c
 8001714:	20000030 	.word	0x20000030
 8001718:	200000dc 	.word	0x200000dc

0800171c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001720:	4807      	ldr	r0, [pc, #28]	@ (8001740 <TIM4_IRQHandler+0x24>)
 8001722:	f003 fa61 	bl	8004be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
 pwm = Handle_TIM_IC_Capture( TIM_CHANNEL_1);
 8001726:	2000      	movs	r0, #0
 8001728:	f7fe ff0c 	bl	8000544 <Handle_TIM_IC_Capture>
 800172c:	4602      	mov	r2, r0
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <TIM4_IRQHandler+0x28>)
 8001730:	4611      	mov	r1, r2
 8001732:	8019      	strh	r1, [r3, #0]
 8001734:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001738:	805a      	strh	r2, [r3, #2]
  /* USER CODE END TIM4_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000194 	.word	0x20000194
 8001744:	20000030 	.word	0x20000030

08001748 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <DMA2_Stream0_IRQHandler+0x10>)
 800174e:	f001 fe19 	bl	8003384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000007c 	.word	0x2000007c

0800175c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	@ (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001784:	f7ff ffea 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	@ (80017c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	@ (80017cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f004 fb59 	bl	8005e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff f87d 	bl	80008b0 <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80017c4:	08005ef4 	.word	0x08005ef4
  ldr r2, =_sbss
 80017c8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80017cc:	20000234 	.word	0x20000234

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <HAL_Init+0x40>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <HAL_Init+0x40>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_Init+0x40>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f001 fc09 	bl	8003014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fba6 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f001 fc21 	bl	800307e <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f001 fbe9 	bl	800302a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000008 	.word	0x20000008
 8001870:	20000010 	.word	0x20000010
 8001874:	2000000c 	.word	0x2000000c

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000010 	.word	0x20000010
 800189c:	20000230 	.word	0x20000230

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000230 	.word	0x20000230

080018b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e033      	b.n	8001936 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fb66 	bl	8000fa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d118      	bne.n	8001928 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018fe:	f023 0302 	bic.w	r3, r3, #2
 8001902:	f043 0202 	orr.w	r2, r3, #2
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 fac2 	bl	8001e94 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f023 0303 	bic.w	r3, r3, #3
 800191e:	f043 0201 	orr.w	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	@ 0x40
 8001926:	e001      	b.n	800192c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_ADC_Start_DMA+0x1e>
 800195a:	2302      	movs	r3, #2
 800195c:	e0e9      	b.n	8001b32 <HAL_ADC_Start_DMA+0x1f2>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d018      	beq.n	80019a6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001984:	4b6d      	ldr	r3, [pc, #436]	@ (8001b3c <HAL_ADC_Start_DMA+0x1fc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a6d      	ldr	r2, [pc, #436]	@ (8001b40 <HAL_ADC_Start_DMA+0x200>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0c9a      	lsrs	r2, r3, #18
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001998:	e002      	b.n	80019a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	3b01      	subs	r3, #1
 800199e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f9      	bne.n	800199a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019b4:	d107      	bne.n	80019c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019c4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	f040 80a1 	bne.w	8001b18 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d007      	beq.n	8001a08 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a00:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a14:	d106      	bne.n	8001a24 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f023 0206 	bic.w	r2, r3, #6
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a22:	e002      	b.n	8001a2a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a32:	4b44      	ldr	r3, [pc, #272]	@ (8001b44 <HAL_ADC_Start_DMA+0x204>)
 8001a34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3a:	4a43      	ldr	r2, [pc, #268]	@ (8001b48 <HAL_ADC_Start_DMA+0x208>)
 8001a3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a42:	4a42      	ldr	r2, [pc, #264]	@ (8001b4c <HAL_ADC_Start_DMA+0x20c>)
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a4a:	4a41      	ldr	r2, [pc, #260]	@ (8001b50 <HAL_ADC_Start_DMA+0x210>)
 8001a4c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001a66:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a76:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	334c      	adds	r3, #76	@ 0x4c
 8001a82:	4619      	mov	r1, r3
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f001 fbb4 	bl	80031f4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d12a      	bne.n	8001aee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8001b54 <HAL_ADC_Start_DMA+0x214>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d015      	beq.n	8001ace <HAL_ADC_Start_DMA+0x18e>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8001b58 <HAL_ADC_Start_DMA+0x218>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d105      	bne.n	8001ab8 <HAL_ADC_Start_DMA+0x178>
 8001aac:	4b25      	ldr	r3, [pc, #148]	@ (8001b44 <HAL_ADC_Start_DMA+0x204>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00a      	beq.n	8001ace <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <HAL_ADC_Start_DMA+0x21c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d136      	bne.n	8001b30 <HAL_ADC_Start_DMA+0x1f0>
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <HAL_ADC_Start_DMA+0x204>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d130      	bne.n	8001b30 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d129      	bne.n	8001b30 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	e020      	b.n	8001b30 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a18      	ldr	r2, [pc, #96]	@ (8001b54 <HAL_ADC_Start_DMA+0x214>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d11b      	bne.n	8001b30 <HAL_ADC_Start_DMA+0x1f0>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d114      	bne.n	8001b30 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	e00b      	b.n	8001b30 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	f043 0210 	orr.w	r2, r3, #16
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	431bde83 	.word	0x431bde83
 8001b44:	40012300 	.word	0x40012300
 8001b48:	0800208d 	.word	0x0800208d
 8001b4c:	08002147 	.word	0x08002147
 8001b50:	08002163 	.word	0x08002163
 8001b54:	40012000 	.word	0x40012000
 8001b58:	40012100 	.word	0x40012100
 8001b5c:	40012200 	.word	0x40012200

08001b60 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_Stop_DMA+0x1a>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e048      	b.n	8001c0c <HAL_ADC_Stop_DMA+0xac>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d130      	bne.n	8001c02 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bae:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d10f      	bne.n	8001bde <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f001 fb6e 	bl	80032a4 <HAL_DMA_Abort>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001bec:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x1c>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e105      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x228>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	d925      	bls.n	8001cc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68d9      	ldr	r1, [r3, #12]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b1e      	subs	r3, #30
 8001c92:	2207      	movs	r2, #7
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68d9      	ldr	r1, [r3, #12]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4403      	add	r3, r0
 8001cba:	3b1e      	subs	r3, #30
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	e022      	b.n	8001d0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6919      	ldr	r1, [r3, #16]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	2207      	movs	r2, #7
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	400a      	ands	r2, r1
 8001cea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6919      	ldr	r1, [r3, #16]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	4603      	mov	r3, r0
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4403      	add	r3, r0
 8001d04:	409a      	lsls	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d824      	bhi.n	8001d60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	3b05      	subs	r3, #5
 8001d28:	221f      	movs	r2, #31
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	400a      	ands	r2, r1
 8001d36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4618      	mov	r0, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b05      	subs	r3, #5
 8001d52:	fa00 f203 	lsl.w	r2, r0, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d5e:	e04c      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b0c      	cmp	r3, #12
 8001d66:	d824      	bhi.n	8001db2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	3b23      	subs	r3, #35	@ 0x23
 8001d7a:	221f      	movs	r2, #31
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43da      	mvns	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	400a      	ands	r2, r1
 8001d88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	3b23      	subs	r3, #35	@ 0x23
 8001da4:	fa00 f203 	lsl.w	r2, r0, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001db0:	e023      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3b41      	subs	r3, #65	@ 0x41
 8001dc4:	221f      	movs	r2, #31
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	3b41      	subs	r3, #65	@ 0x41
 8001dee:	fa00 f203 	lsl.w	r2, r0, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dfa:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <HAL_ADC_ConfigChannel+0x234>)
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <HAL_ADC_ConfigChannel+0x238>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d109      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x1cc>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b12      	cmp	r3, #18
 8001e0e:	d105      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a19      	ldr	r2, [pc, #100]	@ (8001e88 <HAL_ADC_ConfigChannel+0x238>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d123      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x21e>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d003      	beq.n	8001e36 <HAL_ADC_ConfigChannel+0x1e6>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b11      	cmp	r3, #17
 8001e34:	d11b      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d111      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <HAL_ADC_ConfigChannel+0x23c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a10      	ldr	r2, [pc, #64]	@ (8001e90 <HAL_ADC_ConfigChannel+0x240>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	0c9a      	lsrs	r2, r3, #18
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e60:	e002      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f9      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40012300 	.word	0x40012300
 8001e88:	40012000 	.word	0x40012000
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	431bde83 	.word	0x431bde83

08001e94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e9c:	4b79      	ldr	r3, [pc, #484]	@ (8002084 <ADC_Init+0x1f0>)
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ec8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	021a      	lsls	r2, r3, #8
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6899      	ldr	r1, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f26:	4a58      	ldr	r2, [pc, #352]	@ (8002088 <ADC_Init+0x1f4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d022      	beq.n	8001f72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6899      	ldr	r1, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6899      	ldr	r1, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	e00f      	b.n	8001f92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f90:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0202 	bic.w	r2, r2, #2
 8001fa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6899      	ldr	r1, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7e1b      	ldrb	r3, [r3, #24]
 8001fac:	005a      	lsls	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01b      	beq.n	8001ff8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fea:	3b01      	subs	r3, #1
 8001fec:	035a      	lsls	r2, r3, #13
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	e007      	b.n	8002008 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002006:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002016:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	3b01      	subs	r3, #1
 8002024:	051a      	lsls	r2, r3, #20
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800203c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6899      	ldr	r1, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800204a:	025a      	lsls	r2, r3, #9
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002062:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6899      	ldr	r1, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	029a      	lsls	r2, r3, #10
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40012300 	.word	0x40012300
 8002088:	0f000001 	.word	0x0f000001

0800208c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002098:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d13c      	bne.n	8002120 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d12b      	bne.n	8002118 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d127      	bne.n	8002118 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d119      	bne.n	8002118 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0220 	bic.w	r2, r2, #32
 80020f2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7ff fd7b 	bl	8001c14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800211e:	e00e      	b.n	800213e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff fd85 	bl	8001c3c <HAL_ADC_ErrorCallback>
}
 8002132:	e004      	b.n	800213e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002152:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7ff fd67 	bl	8001c28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2240      	movs	r2, #64	@ 0x40
 8002174:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f043 0204 	orr.w	r2, r3, #4
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f7ff fd5a 	bl	8001c3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0ed      	b.n	800237e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe ff72 	bl	8001098 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c4:	f7ff fb6c 	bl	80018a0 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ca:	e012      	b.n	80021f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021cc:	f7ff fb68 	bl	80018a0 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b0a      	cmp	r3, #10
 80021d8:	d90b      	bls.n	80021f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2205      	movs	r2, #5
 80021ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0c5      	b.n	800237e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0e5      	beq.n	80021cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0202 	bic.w	r2, r2, #2
 800220e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002210:	f7ff fb46 	bl	80018a0 <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002216:	e012      	b.n	800223e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002218:	f7ff fb42 	bl	80018a0 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b0a      	cmp	r3, #10
 8002224:	d90b      	bls.n	800223e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2205      	movs	r2, #5
 8002236:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e09f      	b.n	800237e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e5      	bne.n	8002218 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e1b      	ldrb	r3, [r3, #24]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d108      	bne.n	8002266 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e007      	b.n	8002276 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7e5b      	ldrb	r3, [r3, #25]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e007      	b.n	80022a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800229e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e9b      	ldrb	r3, [r3, #26]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d108      	bne.n	80022ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0220 	orr.w	r2, r2, #32
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e007      	b.n	80022ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0220 	bic.w	r2, r2, #32
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7edb      	ldrb	r3, [r3, #27]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0210 	bic.w	r2, r2, #16
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e007      	b.n	80022f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0210 	orr.w	r2, r2, #16
 80022f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7f1b      	ldrb	r3, [r3, #28]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d108      	bne.n	800230e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0208 	orr.w	r2, r2, #8
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e007      	b.n	800231e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0208 	bic.w	r2, r2, #8
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7f5b      	ldrb	r3, [r3, #29]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d108      	bne.n	8002338 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0204 	orr.w	r2, r2, #4
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e007      	b.n	8002348 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0204 	bic.w	r2, r2, #4
 8002346:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	ea42 0103 	orr.w	r1, r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	1e5a      	subs	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d003      	beq.n	80023ae <HAL_CAN_ConfigFilter+0x26>
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	f040 80be 	bne.w	800252a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80023ae:	4b65      	ldr	r3, [pc, #404]	@ (8002544 <HAL_CAN_ConfigFilter+0x1bc>)
 80023b0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023c8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	431a      	orrs	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2201      	movs	r2, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	43db      	mvns	r3, r3
 8002400:	401a      	ands	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d123      	bne.n	8002458 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	401a      	ands	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002432:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3248      	adds	r2, #72	@ 0x48
 8002438:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800244c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800244e:	6979      	ldr	r1, [r7, #20]
 8002450:	3348      	adds	r3, #72	@ 0x48
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d122      	bne.n	80024a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	431a      	orrs	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002480:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3248      	adds	r2, #72	@ 0x48
 8002486:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800249a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800249c:	6979      	ldr	r1, [r7, #20]
 800249e:	3348      	adds	r3, #72	@ 0x48
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	440b      	add	r3, r1
 80024a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	401a      	ands	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80024c0:	e007      	b.n	80024d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	401a      	ands	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80024ec:	e007      	b.n	80024fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d107      	bne.n	8002516 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	431a      	orrs	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800251c:	f023 0201 	bic.w	r2, r3, #1
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e006      	b.n	8002538 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
  }
}
 8002538:	4618      	mov	r0, r3
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40006400 	.word	0x40006400

08002548 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d12e      	bne.n	80025ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002574:	f7ff f994 	bl	80018a0 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800257a:	e012      	b.n	80025a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800257c:	f7ff f990 	bl	80018a0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b0a      	cmp	r3, #10
 8002588:	d90b      	bls.n	80025a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2205      	movs	r2, #5
 800259a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e012      	b.n	80025c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e5      	bne.n	800257c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e006      	b.n	80025c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
  }
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	@ 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025ee:	7ffb      	ldrb	r3, [r7, #31]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d003      	beq.n	80025fc <HAL_CAN_AddTxMessage+0x2c>
 80025f4:	7ffb      	ldrb	r3, [r7, #31]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	f040 80ad 	bne.w	8002756 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10a      	bne.n	800261c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800260c:	2b00      	cmp	r3, #0
 800260e:	d105      	bne.n	800261c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8095 	beq.w	8002746 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	0e1b      	lsrs	r3, r3, #24
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002626:	2201      	movs	r2, #1
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	409a      	lsls	r2, r3
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10d      	bne.n	8002654 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002642:	68f9      	ldr	r1, [r7, #12]
 8002644:	6809      	ldr	r1, [r1, #0]
 8002646:	431a      	orrs	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3318      	adds	r3, #24
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	440b      	add	r3, r1
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e00f      	b.n	8002674 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800265e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002664:	68f9      	ldr	r1, [r7, #12]
 8002666:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002668:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	3318      	adds	r3, #24
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	440b      	add	r3, r1
 8002672:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6819      	ldr	r1, [r3, #0]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	3318      	adds	r3, #24
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	440b      	add	r3, r1
 8002684:	3304      	adds	r3, #4
 8002686:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	7d1b      	ldrb	r3, [r3, #20]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d111      	bne.n	80026b4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3318      	adds	r3, #24
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	4413      	add	r3, r2
 800269c:	3304      	adds	r3, #4
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	6811      	ldr	r1, [r2, #0]
 80026a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3318      	adds	r3, #24
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	440b      	add	r3, r1
 80026b0:	3304      	adds	r3, #4
 80026b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3307      	adds	r3, #7
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	061a      	lsls	r2, r3, #24
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3306      	adds	r3, #6
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	041b      	lsls	r3, r3, #16
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3305      	adds	r3, #5
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	4313      	orrs	r3, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	3204      	adds	r2, #4
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	4610      	mov	r0, r2
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	6811      	ldr	r1, [r2, #0]
 80026dc:	ea43 0200 	orr.w	r2, r3, r0
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	440b      	add	r3, r1
 80026e6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80026ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3303      	adds	r3, #3
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	061a      	lsls	r2, r3, #24
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3302      	adds	r3, #2
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3301      	adds	r3, #1
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	4313      	orrs	r3, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	7812      	ldrb	r2, [r2, #0]
 800270c:	4610      	mov	r0, r2
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	6811      	ldr	r1, [r2, #0]
 8002712:	ea43 0200 	orr.w	r2, r3, r0
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	440b      	add	r3, r1
 800271c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002720:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3318      	adds	r3, #24
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	4413      	add	r3, r2
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	6811      	ldr	r1, [r2, #0]
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	3318      	adds	r3, #24
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	440b      	add	r3, r1
 8002740:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e00e      	b.n	8002764 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e006      	b.n	8002764 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
  }
}
 8002764:	4618      	mov	r0, r3
 8002766:	3724      	adds	r7, #36	@ 0x24
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002784:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d003      	beq.n	8002794 <HAL_CAN_GetRxMessage+0x24>
 800278c:	7dfb      	ldrb	r3, [r7, #23]
 800278e:	2b02      	cmp	r3, #2
 8002790:	f040 8103 	bne.w	800299a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10e      	bne.n	80027b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d116      	bne.n	80027d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0f7      	b.n	80029a8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d107      	bne.n	80027d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0e8      	b.n	80029a8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	331b      	adds	r3, #27
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	4413      	add	r3, r2
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0204 	and.w	r2, r3, #4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10c      	bne.n	800280e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	331b      	adds	r3, #27
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	4413      	add	r3, r2
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	0d5b      	lsrs	r3, r3, #21
 8002804:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e00b      	b.n	8002826 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	331b      	adds	r3, #27
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	4413      	add	r3, r2
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	08db      	lsrs	r3, r3, #3
 800281e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	331b      	adds	r3, #27
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	4413      	add	r3, r2
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0202 	and.w	r2, r3, #2
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	331b      	adds	r3, #27
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	4413      	add	r3, r2
 8002848:	3304      	adds	r3, #4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2208      	movs	r2, #8
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	e00b      	b.n	8002874 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	331b      	adds	r3, #27
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 020f 	and.w	r2, r3, #15
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	331b      	adds	r3, #27
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	4413      	add	r3, r2
 8002880:	3304      	adds	r3, #4
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	b2da      	uxtb	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	331b      	adds	r3, #27
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	4413      	add	r3, r2
 8002898:	3304      	adds	r3, #4
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	b29a      	uxth	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0a1a      	lsrs	r2, r3, #8
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4413      	add	r3, r2
 80028de:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0c1a      	lsrs	r2, r3, #16
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	3302      	adds	r3, #2
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	0e1a      	lsrs	r2, r3, #24
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	3303      	adds	r3, #3
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	4413      	add	r3, r2
 8002912:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	3304      	adds	r3, #4
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	4413      	add	r3, r2
 800292a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0a1a      	lsrs	r2, r3, #8
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	3305      	adds	r3, #5
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	4413      	add	r3, r2
 8002944:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	0c1a      	lsrs	r2, r3, #16
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	3306      	adds	r3, #6
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	4413      	add	r3, r2
 800295e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	0e1a      	lsrs	r2, r3, #24
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	3307      	adds	r3, #7
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d108      	bne.n	8002986 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0220 	orr.w	r2, r2, #32
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	e007      	b.n	8002996 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0220 	orr.w	r2, r2, #32
 8002994:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e006      	b.n	80029a8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
  }
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d002      	beq.n	80029d2 <HAL_CAN_ActivateNotification+0x1e>
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d109      	bne.n	80029e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6959      	ldr	r1, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e006      	b.n	80029f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
  }
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	@ 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d07c      	beq.n	8002b40 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d023      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2201      	movs	r2, #1
 8002a56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f983 	bl	8002d6e <HAL_CAN_TxMailbox0CompleteCallback>
 8002a68:	e016      	b.n	8002a98 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a7c:	e00c      	b.n	8002a98 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a90:	e002      	b.n	8002a98 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f989 	bl	8002daa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d024      	beq.n	8002aec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002aaa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f963 	bl	8002d82 <HAL_CAN_TxMailbox1CompleteCallback>
 8002abc:	e016      	b.n	8002aec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad0:	e00c      	b.n	8002aec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d004      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae4:	e002      	b.n	8002aec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f969 	bl	8002dbe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d024      	beq.n	8002b40 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002afe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f943 	bl	8002d96 <HAL_CAN_TxMailbox2CompleteCallback>
 8002b10:	e016      	b.n	8002b40 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b24:	e00c      	b.n	8002b40 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b38:	e002      	b.n	8002b40 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f949 	bl	8002dd2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00c      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2210      	movs	r2, #16
 8002b62:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f93a 	bl	8002dfa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d009      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f921 	bl	8002de6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00c      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d006      	beq.n	8002bea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2208      	movs	r2, #8
 8002be2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f91c 	bl	8002e22 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d009      	beq.n	8002c08 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f903 	bl	8002e0e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d006      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2210      	movs	r2, #16
 8002c22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f906 	bl	8002e36 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2208      	movs	r2, #8
 8002c44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f8ff 	bl	8002e4a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d07b      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d072      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d043      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d03e      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cce:	2b60      	cmp	r3, #96	@ 0x60
 8002cd0:	d02b      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x32a>
 8002cd2:	2b60      	cmp	r3, #96	@ 0x60
 8002cd4:	d82e      	bhi.n	8002d34 <HAL_CAN_IRQHandler+0x334>
 8002cd6:	2b50      	cmp	r3, #80	@ 0x50
 8002cd8:	d022      	beq.n	8002d20 <HAL_CAN_IRQHandler+0x320>
 8002cda:	2b50      	cmp	r3, #80	@ 0x50
 8002cdc:	d82a      	bhi.n	8002d34 <HAL_CAN_IRQHandler+0x334>
 8002cde:	2b40      	cmp	r3, #64	@ 0x40
 8002ce0:	d019      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x316>
 8002ce2:	2b40      	cmp	r3, #64	@ 0x40
 8002ce4:	d826      	bhi.n	8002d34 <HAL_CAN_IRQHandler+0x334>
 8002ce6:	2b30      	cmp	r3, #48	@ 0x30
 8002ce8:	d010      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x30c>
 8002cea:	2b30      	cmp	r3, #48	@ 0x30
 8002cec:	d822      	bhi.n	8002d34 <HAL_CAN_IRQHandler+0x334>
 8002cee:	2b10      	cmp	r3, #16
 8002cf0:	d002      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x2f8>
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d005      	beq.n	8002d02 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cf6:	e01d      	b.n	8002d34 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	f043 0308 	orr.w	r3, r3, #8
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d00:	e019      	b.n	8002d36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	f043 0310 	orr.w	r3, r3, #16
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d0a:	e014      	b.n	8002d36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	f043 0320 	orr.w	r3, r3, #32
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d14:	e00f      	b.n	8002d36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d1e:	e00a      	b.n	8002d36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d28:	e005      	b.n	8002d36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d32:	e000      	b.n	8002d36 <HAL_CAN_IRQHandler+0x336>
            break;
 8002d34:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002d44:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f87c 	bl	8002e5e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d66:	bf00      	nop
 8002d68:	3728      	adds	r7, #40	@ 0x28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e84:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e90:	4013      	ands	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ea6:	4a04      	ldr	r2, [pc, #16]	@ (8002eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	60d3      	str	r3, [r2, #12]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec0:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	f003 0307 	and.w	r3, r3, #7
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	db0b      	blt.n	8002f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	f003 021f 	and.w	r2, r3, #31
 8002ef0:	4907      	ldr	r1, [pc, #28]	@ (8002f10 <__NVIC_EnableIRQ+0x38>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	2001      	movs	r0, #1
 8002efa:	fa00 f202 	lsl.w	r2, r0, r2
 8002efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	e000e100 	.word	0xe000e100

08002f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	db0a      	blt.n	8002f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	490c      	ldr	r1, [pc, #48]	@ (8002f60 <__NVIC_SetPriority+0x4c>)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	0112      	lsls	r2, r2, #4
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	440b      	add	r3, r1
 8002f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f3c:	e00a      	b.n	8002f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4908      	ldr	r1, [pc, #32]	@ (8002f64 <__NVIC_SetPriority+0x50>)
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	3b04      	subs	r3, #4
 8002f4c:	0112      	lsls	r2, r2, #4
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	440b      	add	r3, r1
 8002f52:	761a      	strb	r2, [r3, #24]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000e100 	.word	0xe000e100
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	@ 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f1c3 0307 	rsb	r3, r3, #7
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	bf28      	it	cs
 8002f86:	2304      	movcs	r3, #4
 8002f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2b06      	cmp	r3, #6
 8002f90:	d902      	bls.n	8002f98 <NVIC_EncodePriority+0x30>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3b03      	subs	r3, #3
 8002f96:	e000      	b.n	8002f9a <NVIC_EncodePriority+0x32>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	401a      	ands	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	43d9      	mvns	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	4313      	orrs	r3, r2
         );
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	@ 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fe0:	d301      	bcc.n	8002fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00f      	b.n	8003006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <SysTick_Config+0x40>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fee:	210f      	movs	r1, #15
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f7ff ff8e 	bl	8002f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff8:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <SysTick_Config+0x40>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffe:	4b04      	ldr	r3, [pc, #16]	@ (8003010 <SysTick_Config+0x40>)
 8003000:	2207      	movs	r2, #7
 8003002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	e000e010 	.word	0xe000e010

08003014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ff29 	bl	8002e74 <__NVIC_SetPriorityGrouping>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800303c:	f7ff ff3e 	bl	8002ebc <__NVIC_GetPriorityGrouping>
 8003040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	6978      	ldr	r0, [r7, #20]
 8003048:	f7ff ff8e 	bl	8002f68 <NVIC_EncodePriority>
 800304c:	4602      	mov	r2, r0
 800304e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff5d 	bl	8002f14 <__NVIC_SetPriority>
}
 800305a:	bf00      	nop
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff31 	bl	8002ed8 <__NVIC_EnableIRQ>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ffa2 	bl	8002fd0 <SysTick_Config>
 800308c:	4603      	mov	r3, r0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030a4:	f7fe fbfc 	bl	80018a0 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e099      	b.n	80031e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d4:	e00f      	b.n	80030f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030d6:	f7fe fbe3 	bl	80018a0 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d908      	bls.n	80030f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2203      	movs	r2, #3
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e078      	b.n	80031e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e8      	bne.n	80030d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4b38      	ldr	r3, [pc, #224]	@ (80031f0 <HAL_DMA_Init+0x158>)
 8003110:	4013      	ands	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003122:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800312e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800313a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	2b04      	cmp	r3, #4
 800314e:	d107      	bne.n	8003160 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	4313      	orrs	r3, r2
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f023 0307 	bic.w	r3, r3, #7
 8003176:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	2b04      	cmp	r3, #4
 8003188:	d117      	bne.n	80031ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00e      	beq.n	80031ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fadf 	bl	8003760 <DMA_CheckFifoParam>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2240      	movs	r2, #64	@ 0x40
 80031ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80031b6:	2301      	movs	r3, #1
 80031b8:	e016      	b.n	80031e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa96 	bl	80036f4 <DMA_CalcBaseAndBitshift>
 80031c8:	4603      	mov	r3, r0
 80031ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d0:	223f      	movs	r2, #63	@ 0x3f
 80031d2:	409a      	lsls	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	f010803f 	.word	0xf010803f

080031f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_DMA_Start_IT+0x26>
 8003216:	2302      	movs	r3, #2
 8003218:	e040      	b.n	800329c <HAL_DMA_Start_IT+0xa8>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d12f      	bne.n	800328e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2202      	movs	r2, #2
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fa28 	bl	8003698 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324c:	223f      	movs	r2, #63	@ 0x3f
 800324e:	409a      	lsls	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0216 	orr.w	r2, r2, #22
 8003262:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0208 	orr.w	r2, r2, #8
 800327a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e005      	b.n	800329a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003296:	2302      	movs	r3, #2
 8003298:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800329a:	7dfb      	ldrb	r3, [r7, #23]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032b2:	f7fe faf5 	bl	80018a0 <HAL_GetTick>
 80032b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d008      	beq.n	80032d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2280      	movs	r2, #128	@ 0x80
 80032c8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e052      	b.n	800337c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0216 	bic.w	r2, r2, #22
 80032e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <HAL_DMA_Abort+0x62>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0208 	bic.w	r2, r2, #8
 8003314:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003326:	e013      	b.n	8003350 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003328:	f7fe faba 	bl	80018a0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b05      	cmp	r3, #5
 8003334:	d90c      	bls.n	8003350 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2203      	movs	r2, #3
 8003340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e015      	b.n	800337c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e4      	bne.n	8003328 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003362:	223f      	movs	r2, #63	@ 0x3f
 8003364:	409a      	lsls	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003390:	4b8e      	ldr	r3, [pc, #568]	@ (80035cc <HAL_DMA_IRQHandler+0x248>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a8e      	ldr	r2, [pc, #568]	@ (80035d0 <HAL_DMA_IRQHandler+0x24c>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0a9b      	lsrs	r3, r3, #10
 800339c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ae:	2208      	movs	r2, #8
 80033b0:	409a      	lsls	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01a      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0204 	bic.w	r2, r2, #4
 80033d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033dc:	2208      	movs	r2, #8
 80033de:	409a      	lsls	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	2201      	movs	r2, #1
 80033f6:	409a      	lsls	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d012      	beq.n	8003426 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	2201      	movs	r2, #1
 8003414:	409a      	lsls	r2, r3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341e:	f043 0202 	orr.w	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	2204      	movs	r2, #4
 800342c:	409a      	lsls	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d012      	beq.n	800345c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	2204      	movs	r2, #4
 800344a:	409a      	lsls	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	f043 0204 	orr.w	r2, r3, #4
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003460:	2210      	movs	r2, #16
 8003462:	409a      	lsls	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d043      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d03c      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347e:	2210      	movs	r2, #16
 8003480:	409a      	lsls	r2, r3
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d018      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d024      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
 80034b2:	e01f      	b.n	80034f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01b      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
 80034c4:	e016      	b.n	80034f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d107      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0208 	bic.w	r2, r2, #8
 80034e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f8:	2220      	movs	r2, #32
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 808f 	beq.w	8003624 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8087 	beq.w	8003624 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	2220      	movs	r2, #32
 800351c:	409a      	lsls	r2, r3
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b05      	cmp	r3, #5
 800352c:	d136      	bne.n	800359c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0216 	bic.w	r2, r2, #22
 800353c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800354c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <HAL_DMA_IRQHandler+0x1da>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0208 	bic.w	r2, r2, #8
 800356c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003572:	223f      	movs	r2, #63	@ 0x3f
 8003574:	409a      	lsls	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800358e:	2b00      	cmp	r3, #0
 8003590:	d07e      	beq.n	8003690 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
        }
        return;
 800359a:	e079      	b.n	8003690 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01d      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10d      	bne.n	80035d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d031      	beq.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
 80035c8:	e02c      	b.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
 80035ca:	bf00      	nop
 80035cc:	20000008 	.word	0x20000008
 80035d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d023      	beq.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4798      	blx	r3
 80035e4:	e01e      	b.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10f      	bne.n	8003614 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0210 	bic.w	r2, r2, #16
 8003602:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003628:	2b00      	cmp	r3, #0
 800362a:	d032      	beq.n	8003692 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d022      	beq.n	800367e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2205      	movs	r2, #5
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3301      	adds	r3, #1
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	d307      	bcc.n	800366c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f2      	bne.n	8003650 <HAL_DMA_IRQHandler+0x2cc>
 800366a:	e000      	b.n	800366e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800366c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
 800368e:	e000      	b.n	8003692 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003690:	bf00      	nop
    }
  }
}
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b40      	cmp	r3, #64	@ 0x40
 80036c4:	d108      	bne.n	80036d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036d6:	e007      	b.n	80036e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	60da      	str	r2, [r3, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	3b10      	subs	r3, #16
 8003704:	4a14      	ldr	r2, [pc, #80]	@ (8003758 <DMA_CalcBaseAndBitshift+0x64>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800370e:	4a13      	ldr	r2, [pc, #76]	@ (800375c <DMA_CalcBaseAndBitshift+0x68>)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d909      	bls.n	8003736 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800372a:	f023 0303 	bic.w	r3, r3, #3
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	659a      	str	r2, [r3, #88]	@ 0x58
 8003734:	e007      	b.n	8003746 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	aaaaaaab 	.word	0xaaaaaaab
 800375c:	08005edc 	.word	0x08005edc

08003760 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003770:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d11f      	bne.n	80037ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d856      	bhi.n	800382e <DMA_CheckFifoParam+0xce>
 8003780:	a201      	add	r2, pc, #4	@ (adr r2, 8003788 <DMA_CheckFifoParam+0x28>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	08003799 	.word	0x08003799
 800378c:	080037ab 	.word	0x080037ab
 8003790:	08003799 	.word	0x08003799
 8003794:	0800382f 	.word	0x0800382f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d046      	beq.n	8003832 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a8:	e043      	b.n	8003832 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037b2:	d140      	bne.n	8003836 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b8:	e03d      	b.n	8003836 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c2:	d121      	bne.n	8003808 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d837      	bhi.n	800383a <DMA_CheckFifoParam+0xda>
 80037ca:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <DMA_CheckFifoParam+0x70>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037e7 	.word	0x080037e7
 80037d8:	080037e1 	.word	0x080037e1
 80037dc:	080037f9 	.word	0x080037f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e030      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d025      	beq.n	800383e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f6:	e022      	b.n	800383e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003800:	d11f      	bne.n	8003842 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003806:	e01c      	b.n	8003842 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d903      	bls.n	8003816 <DMA_CheckFifoParam+0xb6>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d003      	beq.n	800381c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003814:	e018      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
      break;
 800381a:	e015      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      break;
 800382c:	e00b      	b.n	8003846 <DMA_CheckFifoParam+0xe6>
      break;
 800382e:	bf00      	nop
 8003830:	e00a      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 8003832:	bf00      	nop
 8003834:	e008      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 8003836:	bf00      	nop
 8003838:	e006      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 800383a:	bf00      	nop
 800383c:	e004      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 800383e:	bf00      	nop
 8003840:	e002      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;   
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 8003846:	bf00      	nop
    }
  } 
  
  return status; 
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop

08003858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	@ 0x24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	e16b      	b.n	8003b4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003874:	2201      	movs	r2, #1
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	429a      	cmp	r2, r3
 800388e:	f040 815a 	bne.w	8003b46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d005      	beq.n	80038aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d130      	bne.n	800390c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	2203      	movs	r2, #3
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e0:	2201      	movs	r2, #1
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 0201 	and.w	r2, r3, #1
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	2b03      	cmp	r3, #3
 8003916:	d017      	beq.n	8003948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2203      	movs	r2, #3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d123      	bne.n	800399c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	08da      	lsrs	r2, r3, #3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3208      	adds	r2, #8
 800395c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	220f      	movs	r2, #15
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	08da      	lsrs	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3208      	adds	r2, #8
 8003996:	69b9      	ldr	r1, [r7, #24]
 8003998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	2203      	movs	r2, #3
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0203 	and.w	r2, r3, #3
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80b4 	beq.w	8003b46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	4b60      	ldr	r3, [pc, #384]	@ (8003b64 <HAL_GPIO_Init+0x30c>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003b64 <HAL_GPIO_Init+0x30c>)
 80039e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003b64 <HAL_GPIO_Init+0x30c>)
 80039f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003b68 <HAL_GPIO_Init+0x310>)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	089b      	lsrs	r3, r3, #2
 8003a00:	3302      	adds	r3, #2
 8003a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	220f      	movs	r2, #15
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a52      	ldr	r2, [pc, #328]	@ (8003b6c <HAL_GPIO_Init+0x314>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d02b      	beq.n	8003a7e <HAL_GPIO_Init+0x226>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a51      	ldr	r2, [pc, #324]	@ (8003b70 <HAL_GPIO_Init+0x318>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d025      	beq.n	8003a7a <HAL_GPIO_Init+0x222>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a50      	ldr	r2, [pc, #320]	@ (8003b74 <HAL_GPIO_Init+0x31c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01f      	beq.n	8003a76 <HAL_GPIO_Init+0x21e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4f      	ldr	r2, [pc, #316]	@ (8003b78 <HAL_GPIO_Init+0x320>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d019      	beq.n	8003a72 <HAL_GPIO_Init+0x21a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4e      	ldr	r2, [pc, #312]	@ (8003b7c <HAL_GPIO_Init+0x324>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <HAL_GPIO_Init+0x216>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a4d      	ldr	r2, [pc, #308]	@ (8003b80 <HAL_GPIO_Init+0x328>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00d      	beq.n	8003a6a <HAL_GPIO_Init+0x212>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4c      	ldr	r2, [pc, #304]	@ (8003b84 <HAL_GPIO_Init+0x32c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <HAL_GPIO_Init+0x20e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4b      	ldr	r2, [pc, #300]	@ (8003b88 <HAL_GPIO_Init+0x330>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <HAL_GPIO_Init+0x20a>
 8003a5e:	2307      	movs	r3, #7
 8003a60:	e00e      	b.n	8003a80 <HAL_GPIO_Init+0x228>
 8003a62:	2308      	movs	r3, #8
 8003a64:	e00c      	b.n	8003a80 <HAL_GPIO_Init+0x228>
 8003a66:	2306      	movs	r3, #6
 8003a68:	e00a      	b.n	8003a80 <HAL_GPIO_Init+0x228>
 8003a6a:	2305      	movs	r3, #5
 8003a6c:	e008      	b.n	8003a80 <HAL_GPIO_Init+0x228>
 8003a6e:	2304      	movs	r3, #4
 8003a70:	e006      	b.n	8003a80 <HAL_GPIO_Init+0x228>
 8003a72:	2303      	movs	r3, #3
 8003a74:	e004      	b.n	8003a80 <HAL_GPIO_Init+0x228>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e002      	b.n	8003a80 <HAL_GPIO_Init+0x228>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_GPIO_Init+0x228>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	f002 0203 	and.w	r2, r2, #3
 8003a86:	0092      	lsls	r2, r2, #2
 8003a88:	4093      	lsls	r3, r2
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a90:	4935      	ldr	r1, [pc, #212]	@ (8003b68 <HAL_GPIO_Init+0x310>)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	3302      	adds	r3, #2
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b8c <HAL_GPIO_Init+0x334>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac2:	4a32      	ldr	r2, [pc, #200]	@ (8003b8c <HAL_GPIO_Init+0x334>)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac8:	4b30      	ldr	r3, [pc, #192]	@ (8003b8c <HAL_GPIO_Init+0x334>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aec:	4a27      	ldr	r2, [pc, #156]	@ (8003b8c <HAL_GPIO_Init+0x334>)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003af2:	4b26      	ldr	r3, [pc, #152]	@ (8003b8c <HAL_GPIO_Init+0x334>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b16:	4a1d      	ldr	r2, [pc, #116]	@ (8003b8c <HAL_GPIO_Init+0x334>)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b8c <HAL_GPIO_Init+0x334>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b40:	4a12      	ldr	r2, [pc, #72]	@ (8003b8c <HAL_GPIO_Init+0x334>)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	f67f ae90 	bls.w	8003874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3724      	adds	r7, #36	@ 0x24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40013800 	.word	0x40013800
 8003b6c:	40020000 	.word	0x40020000
 8003b70:	40020400 	.word	0x40020400
 8003b74:	40020800 	.word	0x40020800
 8003b78:	40020c00 	.word	0x40020c00
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40021400 	.word	0x40021400
 8003b84:	40021800 	.word	0x40021800
 8003b88:	40021c00 	.word	0x40021c00
 8003b8c:	40013c00 	.word	0x40013c00

08003b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	887b      	ldrh	r3, [r7, #2]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
 8003bac:	e001      	b.n	8003bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bd0:	787b      	ldrb	r3, [r7, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bdc:	e003      	b.n	8003be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	041a      	lsls	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	619a      	str	r2, [r3, #24]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c04:	887a      	ldrh	r2, [r7, #2]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	041a      	lsls	r2, r3, #16
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	43d9      	mvns	r1, r3
 8003c10:	887b      	ldrh	r3, [r7, #2]
 8003c12:	400b      	ands	r3, r1
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	619a      	str	r2, [r3, #24]
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e267      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d075      	beq.n	8003d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c46:	4b88      	ldr	r3, [pc, #544]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d00c      	beq.n	8003c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c52:	4b85      	ldr	r3, [pc, #532]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d112      	bne.n	8003c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5e:	4b82      	ldr	r3, [pc, #520]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d05b      	beq.n	8003d30 <HAL_RCC_OscConfig+0x108>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d157      	bne.n	8003d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e242      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c8c:	d106      	bne.n	8003c9c <HAL_RCC_OscConfig+0x74>
 8003c8e:	4b76      	ldr	r3, [pc, #472]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a75      	ldr	r2, [pc, #468]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e01d      	b.n	8003cd8 <HAL_RCC_OscConfig+0xb0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x98>
 8003ca6:	4b70      	ldr	r3, [pc, #448]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6f      	ldr	r2, [pc, #444]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6c      	ldr	r2, [pc, #432]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0xb0>
 8003cc0:	4b69      	ldr	r3, [pc, #420]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a68      	ldr	r2, [pc, #416]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	4b66      	ldr	r3, [pc, #408]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a65      	ldr	r2, [pc, #404]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d013      	beq.n	8003d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fdde 	bl	80018a0 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7fd fdda 	bl	80018a0 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	@ 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e207      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0xc0>
 8003d06:	e014      	b.n	8003d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fd fdca 	bl	80018a0 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d10:	f7fd fdc6 	bl	80018a0 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	@ 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e1f3      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	4b51      	ldr	r3, [pc, #324]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0xe8>
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d063      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4a:	4b47      	ldr	r3, [pc, #284]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d11c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d56:	4b44      	ldr	r3, [pc, #272]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d116      	bne.n	8003d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d62:	4b41      	ldr	r3, [pc, #260]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_RCC_OscConfig+0x152>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e1c7      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4937      	ldr	r1, [pc, #220]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	e03a      	b.n	8003e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d020      	beq.n	8003dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d98:	4b34      	ldr	r3, [pc, #208]	@ (8003e6c <HAL_RCC_OscConfig+0x244>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fd fd7f 	bl	80018a0 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da6:	f7fd fd7b 	bl	80018a0 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e1a8      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc4:	4b28      	ldr	r3, [pc, #160]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4925      	ldr	r1, [pc, #148]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]
 8003dd8:	e015      	b.n	8003e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dda:	4b24      	ldr	r3, [pc, #144]	@ (8003e6c <HAL_RCC_OscConfig+0x244>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fd fd5e 	bl	80018a0 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003de8:	f7fd fd5a 	bl	80018a0 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e187      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d036      	beq.n	8003e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d016      	beq.n	8003e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e1a:	4b15      	ldr	r3, [pc, #84]	@ (8003e70 <HAL_RCC_OscConfig+0x248>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fd fd3e 	bl	80018a0 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fd fd3a 	bl	80018a0 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e167      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x200>
 8003e46:	e01b      	b.n	8003e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e48:	4b09      	ldr	r3, [pc, #36]	@ (8003e70 <HAL_RCC_OscConfig+0x248>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7fd fd27 	bl	80018a0 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e54:	e00e      	b.n	8003e74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e56:	f7fd fd23 	bl	80018a0 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d907      	bls.n	8003e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e150      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	42470000 	.word	0x42470000
 8003e70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e74:	4b88      	ldr	r3, [pc, #544]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1ea      	bne.n	8003e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8097 	beq.w	8003fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e92:	4b81      	ldr	r3, [pc, #516]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10f      	bne.n	8003ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	4b7d      	ldr	r3, [pc, #500]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	4a7c      	ldr	r2, [pc, #496]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eae:	4b7a      	ldr	r3, [pc, #488]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b77      	ldr	r3, [pc, #476]	@ (800409c <HAL_RCC_OscConfig+0x474>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d118      	bne.n	8003efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eca:	4b74      	ldr	r3, [pc, #464]	@ (800409c <HAL_RCC_OscConfig+0x474>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a73      	ldr	r2, [pc, #460]	@ (800409c <HAL_RCC_OscConfig+0x474>)
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed6:	f7fd fce3 	bl	80018a0 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ede:	f7fd fcdf 	bl	80018a0 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e10c      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800409c <HAL_RCC_OscConfig+0x474>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <HAL_RCC_OscConfig+0x2ea>
 8003f04:	4b64      	ldr	r3, [pc, #400]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f08:	4a63      	ldr	r2, [pc, #396]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f10:	e01c      	b.n	8003f4c <HAL_RCC_OscConfig+0x324>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b05      	cmp	r3, #5
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x30c>
 8003f1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1e:	4a5e      	ldr	r2, [pc, #376]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f20:	f043 0304 	orr.w	r3, r3, #4
 8003f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f26:	4b5c      	ldr	r3, [pc, #368]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	4a5b      	ldr	r2, [pc, #364]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_OscConfig+0x324>
 8003f34:	4b58      	ldr	r3, [pc, #352]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f38:	4a57      	ldr	r2, [pc, #348]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f40:	4b55      	ldr	r3, [pc, #340]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f44:	4a54      	ldr	r2, [pc, #336]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f46:	f023 0304 	bic.w	r3, r3, #4
 8003f4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d015      	beq.n	8003f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f54:	f7fd fca4 	bl	80018a0 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f5c:	f7fd fca0 	bl	80018a0 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e0cb      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f72:	4b49      	ldr	r3, [pc, #292]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0ee      	beq.n	8003f5c <HAL_RCC_OscConfig+0x334>
 8003f7e:	e014      	b.n	8003faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fd fc8e 	bl	80018a0 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f88:	f7fd fc8a 	bl	80018a0 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e0b5      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1ee      	bne.n	8003f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d105      	bne.n	8003fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb0:	4b39      	ldr	r3, [pc, #228]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	4a38      	ldr	r2, [pc, #224]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a1 	beq.w	8004108 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fc6:	4b34      	ldr	r3, [pc, #208]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d05c      	beq.n	800408c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d141      	bne.n	800405e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	4b31      	ldr	r3, [pc, #196]	@ (80040a0 <HAL_RCC_OscConfig+0x478>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fc5e 	bl	80018a0 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fd fc5a 	bl	80018a0 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e087      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffa:	4b27      	ldr	r3, [pc, #156]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69da      	ldr	r2, [r3, #28]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004014:	019b      	lsls	r3, r3, #6
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	3b01      	subs	r3, #1
 8004020:	041b      	lsls	r3, r3, #16
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	491b      	ldr	r1, [pc, #108]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004030:	4b1b      	ldr	r3, [pc, #108]	@ (80040a0 <HAL_RCC_OscConfig+0x478>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fd fc33 	bl	80018a0 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403e:	f7fd fc2f 	bl	80018a0 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e05c      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004050:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x416>
 800405c:	e054      	b.n	8004108 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405e:	4b10      	ldr	r3, [pc, #64]	@ (80040a0 <HAL_RCC_OscConfig+0x478>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fd fc1c 	bl	80018a0 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406c:	f7fd fc18 	bl	80018a0 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e045      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407e:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <HAL_RCC_OscConfig+0x470>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x444>
 800408a:	e03d      	b.n	8004108 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e038      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
 8004098:	40023800 	.word	0x40023800
 800409c:	40007000 	.word	0x40007000
 80040a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004114 <HAL_RCC_OscConfig+0x4ec>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d028      	beq.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d121      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d11a      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040dc:	4293      	cmp	r3, r2
 80040de:	d111      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800

08004118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0cc      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b68      	ldr	r3, [pc, #416]	@ (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d90c      	bls.n	8004154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b65      	ldr	r3, [pc, #404]	@ (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b63      	ldr	r3, [pc, #396]	@ (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0b8      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800416c:	4b59      	ldr	r3, [pc, #356]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a58      	ldr	r2, [pc, #352]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004184:	4b53      	ldr	r3, [pc, #332]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a52      	ldr	r2, [pc, #328]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800418e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004190:	4b50      	ldr	r3, [pc, #320]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	494d      	ldr	r1, [pc, #308]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d044      	beq.n	8004238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	4b47      	ldr	r3, [pc, #284]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d119      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e07f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d003      	beq.n	80041d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d6:	4b3f      	ldr	r3, [pc, #252]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e06f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e6:	4b3b      	ldr	r3, [pc, #236]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e067      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f6:	4b37      	ldr	r3, [pc, #220]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4934      	ldr	r1, [pc, #208]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004208:	f7fd fb4a 	bl	80018a0 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	e00a      	b.n	8004226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fd fb46 	bl	80018a0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e04f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	4b2b      	ldr	r3, [pc, #172]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 020c 	and.w	r2, r3, #12
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	429a      	cmp	r2, r3
 8004236:	d1eb      	bne.n	8004210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004238:	4b25      	ldr	r3, [pc, #148]	@ (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d20c      	bcs.n	8004260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b22      	ldr	r3, [pc, #136]	@ (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b20      	ldr	r3, [pc, #128]	@ (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e032      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426c:	4b19      	ldr	r3, [pc, #100]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4916      	ldr	r1, [pc, #88]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800428a:	4b12      	ldr	r3, [pc, #72]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	490e      	ldr	r1, [pc, #56]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800429e:	f000 f821 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	490a      	ldr	r1, [pc, #40]	@ (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	fa22 f303 	lsr.w	r3, r2, r3
 80042b6:	4a09      	ldr	r2, [pc, #36]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ba:	4b09      	ldr	r3, [pc, #36]	@ (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd faaa 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40023c00 	.word	0x40023c00
 80042d4:	40023800 	.word	0x40023800
 80042d8:	08005ec4 	.word	0x08005ec4
 80042dc:	20000008 	.word	0x20000008
 80042e0:	2000000c 	.word	0x2000000c

080042e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b094      	sub	sp, #80	@ 0x50
 80042ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f0:	2300      	movs	r3, #0
 80042f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042f4:	2300      	movs	r3, #0
 80042f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042fc:	4b79      	ldr	r3, [pc, #484]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b08      	cmp	r3, #8
 8004306:	d00d      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x40>
 8004308:	2b08      	cmp	r3, #8
 800430a:	f200 80e1 	bhi.w	80044d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x34>
 8004312:	2b04      	cmp	r3, #4
 8004314:	d003      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x3a>
 8004316:	e0db      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004318:	4b73      	ldr	r3, [pc, #460]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800431a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800431c:	e0db      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800431e:	4b73      	ldr	r3, [pc, #460]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004320:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004322:	e0d8      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004324:	4b6f      	ldr	r3, [pc, #444]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800432c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800432e:	4b6d      	ldr	r3, [pc, #436]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d063      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433a:	4b6a      	ldr	r3, [pc, #424]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	2200      	movs	r2, #0
 8004342:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004344:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434c:	633b      	str	r3, [r7, #48]	@ 0x30
 800434e:	2300      	movs	r3, #0
 8004350:	637b      	str	r3, [r7, #52]	@ 0x34
 8004352:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004356:	4622      	mov	r2, r4
 8004358:	462b      	mov	r3, r5
 800435a:	f04f 0000 	mov.w	r0, #0
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	0159      	lsls	r1, r3, #5
 8004364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004368:	0150      	lsls	r0, r2, #5
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4621      	mov	r1, r4
 8004370:	1a51      	subs	r1, r2, r1
 8004372:	6139      	str	r1, [r7, #16]
 8004374:	4629      	mov	r1, r5
 8004376:	eb63 0301 	sbc.w	r3, r3, r1
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004388:	4659      	mov	r1, fp
 800438a:	018b      	lsls	r3, r1, #6
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004392:	4651      	mov	r1, sl
 8004394:	018a      	lsls	r2, r1, #6
 8004396:	4651      	mov	r1, sl
 8004398:	ebb2 0801 	subs.w	r8, r2, r1
 800439c:	4659      	mov	r1, fp
 800439e:	eb63 0901 	sbc.w	r9, r3, r1
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b6:	4690      	mov	r8, r2
 80043b8:	4699      	mov	r9, r3
 80043ba:	4623      	mov	r3, r4
 80043bc:	eb18 0303 	adds.w	r3, r8, r3
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	462b      	mov	r3, r5
 80043c4:	eb49 0303 	adc.w	r3, r9, r3
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043d6:	4629      	mov	r1, r5
 80043d8:	024b      	lsls	r3, r1, #9
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043e0:	4621      	mov	r1, r4
 80043e2:	024a      	lsls	r2, r1, #9
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ea:	2200      	movs	r2, #0
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043f4:	f7fb fee8 	bl	80001c8 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004400:	e058      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004402:	4b38      	ldr	r3, [pc, #224]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	2200      	movs	r2, #0
 800440a:	4618      	mov	r0, r3
 800440c:	4611      	mov	r1, r2
 800440e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004412:	623b      	str	r3, [r7, #32]
 8004414:	2300      	movs	r3, #0
 8004416:	627b      	str	r3, [r7, #36]	@ 0x24
 8004418:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	f04f 0000 	mov.w	r0, #0
 8004424:	f04f 0100 	mov.w	r1, #0
 8004428:	0159      	lsls	r1, r3, #5
 800442a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800442e:	0150      	lsls	r0, r2, #5
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4641      	mov	r1, r8
 8004436:	ebb2 0a01 	subs.w	sl, r2, r1
 800443a:	4649      	mov	r1, r9
 800443c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800444c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004450:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004454:	ebb2 040a 	subs.w	r4, r2, sl
 8004458:	eb63 050b 	sbc.w	r5, r3, fp
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	00eb      	lsls	r3, r5, #3
 8004466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800446a:	00e2      	lsls	r2, r4, #3
 800446c:	4614      	mov	r4, r2
 800446e:	461d      	mov	r5, r3
 8004470:	4643      	mov	r3, r8
 8004472:	18e3      	adds	r3, r4, r3
 8004474:	603b      	str	r3, [r7, #0]
 8004476:	464b      	mov	r3, r9
 8004478:	eb45 0303 	adc.w	r3, r5, r3
 800447c:	607b      	str	r3, [r7, #4]
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800448a:	4629      	mov	r1, r5
 800448c:	028b      	lsls	r3, r1, #10
 800448e:	4621      	mov	r1, r4
 8004490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004494:	4621      	mov	r1, r4
 8004496:	028a      	lsls	r2, r1, #10
 8004498:	4610      	mov	r0, r2
 800449a:	4619      	mov	r1, r3
 800449c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800449e:	2200      	movs	r2, #0
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	61fa      	str	r2, [r7, #28]
 80044a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044a8:	f7fb fe8e 	bl	80001c8 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044b4:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	0c1b      	lsrs	r3, r3, #16
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	3301      	adds	r3, #1
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80044c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044ce:	e002      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044d0:	4b05      	ldr	r3, [pc, #20]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80044d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3750      	adds	r7, #80	@ 0x50
 80044dc:	46bd      	mov	sp, r7
 80044de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800
 80044e8:	00f42400 	.word	0x00f42400
 80044ec:	007a1200 	.word	0x007a1200

080044f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f4:	4b03      	ldr	r3, [pc, #12]	@ (8004504 <HAL_RCC_GetHCLKFreq+0x14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000008 	.word	0x20000008

08004508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800450c:	f7ff fff0 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b05      	ldr	r3, [pc, #20]	@ (8004528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0a9b      	lsrs	r3, r3, #10
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4903      	ldr	r1, [pc, #12]	@ (800452c <HAL_RCC_GetPCLK1Freq+0x24>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	08005ed4 	.word	0x08005ed4

08004530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e041      	b.n	80045c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc fdee 	bl	8001138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f000 ff08 	bl	8005384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d001      	beq.n	80045e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e046      	b.n	8004676 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a23      	ldr	r2, [pc, #140]	@ (8004684 <HAL_TIM_Base_Start+0xb4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d022      	beq.n	8004640 <HAL_TIM_Base_Start+0x70>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004602:	d01d      	beq.n	8004640 <HAL_TIM_Base_Start+0x70>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1f      	ldr	r2, [pc, #124]	@ (8004688 <HAL_TIM_Base_Start+0xb8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d018      	beq.n	8004640 <HAL_TIM_Base_Start+0x70>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1e      	ldr	r2, [pc, #120]	@ (800468c <HAL_TIM_Base_Start+0xbc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <HAL_TIM_Base_Start+0x70>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1c      	ldr	r2, [pc, #112]	@ (8004690 <HAL_TIM_Base_Start+0xc0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_TIM_Base_Start+0x70>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1b      	ldr	r2, [pc, #108]	@ (8004694 <HAL_TIM_Base_Start+0xc4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_TIM_Base_Start+0x70>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a19      	ldr	r2, [pc, #100]	@ (8004698 <HAL_TIM_Base_Start+0xc8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <HAL_TIM_Base_Start+0x70>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a18      	ldr	r2, [pc, #96]	@ (800469c <HAL_TIM_Base_Start+0xcc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d111      	bne.n	8004664 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b06      	cmp	r3, #6
 8004650:	d010      	beq.n	8004674 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0201 	orr.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004662:	e007      	b.n	8004674 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40010000 	.word	0x40010000
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40010400 	.word	0x40010400
 8004698:	40014000 	.word	0x40014000
 800469c:	40001800 	.word	0x40001800

080046a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e041      	b.n	8004736 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f839 	bl	800473e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3304      	adds	r3, #4
 80046dc:	4619      	mov	r1, r3
 80046de:	4610      	mov	r0, r2
 80046e0:	f000 fe50 	bl	8005384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_TIM_PWM_Start+0x24>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e022      	b.n	80047be <HAL_TIM_PWM_Start+0x6a>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b04      	cmp	r3, #4
 800477c:	d109      	bne.n	8004792 <HAL_TIM_PWM_Start+0x3e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e015      	b.n	80047be <HAL_TIM_PWM_Start+0x6a>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x58>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e008      	b.n	80047be <HAL_TIM_PWM_Start+0x6a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e07c      	b.n	80048c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <HAL_TIM_PWM_Start+0x82>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047d4:	e013      	b.n	80047fe <HAL_TIM_PWM_Start+0xaa>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_PWM_Start+0x92>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047e4:	e00b      	b.n	80047fe <HAL_TIM_PWM_Start+0xaa>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Start+0xa2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047f4:	e003      	b.n	80047fe <HAL_TIM_PWM_Start+0xaa>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2201      	movs	r2, #1
 8004804:	6839      	ldr	r1, [r7, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f001 fa6e 	bl	8005ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a2d      	ldr	r2, [pc, #180]	@ (80048c8 <HAL_TIM_PWM_Start+0x174>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIM_PWM_Start+0xcc>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a2c      	ldr	r2, [pc, #176]	@ (80048cc <HAL_TIM_PWM_Start+0x178>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d101      	bne.n	8004824 <HAL_TIM_PWM_Start+0xd0>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <HAL_TIM_PWM_Start+0xd2>
 8004824:	2300      	movs	r3, #0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004838:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a22      	ldr	r2, [pc, #136]	@ (80048c8 <HAL_TIM_PWM_Start+0x174>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d022      	beq.n	800488a <HAL_TIM_PWM_Start+0x136>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484c:	d01d      	beq.n	800488a <HAL_TIM_PWM_Start+0x136>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1f      	ldr	r2, [pc, #124]	@ (80048d0 <HAL_TIM_PWM_Start+0x17c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d018      	beq.n	800488a <HAL_TIM_PWM_Start+0x136>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1d      	ldr	r2, [pc, #116]	@ (80048d4 <HAL_TIM_PWM_Start+0x180>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_TIM_PWM_Start+0x136>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <HAL_TIM_PWM_Start+0x184>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_TIM_PWM_Start+0x136>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a16      	ldr	r2, [pc, #88]	@ (80048cc <HAL_TIM_PWM_Start+0x178>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d009      	beq.n	800488a <HAL_TIM_PWM_Start+0x136>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a18      	ldr	r2, [pc, #96]	@ (80048dc <HAL_TIM_PWM_Start+0x188>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_TIM_PWM_Start+0x136>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a16      	ldr	r2, [pc, #88]	@ (80048e0 <HAL_TIM_PWM_Start+0x18c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d111      	bne.n	80048ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b06      	cmp	r3, #6
 800489a:	d010      	beq.n	80048be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ac:	e007      	b.n	80048be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0201 	orr.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40010000 	.word	0x40010000
 80048cc:	40010400 	.word	0x40010400
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40000800 	.word	0x40000800
 80048d8:	40000c00 	.word	0x40000c00
 80048dc:	40014000 	.word	0x40014000
 80048e0:	40001800 	.word	0x40001800

080048e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e041      	b.n	800497a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f839 	bl	8004982 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f000 fd2e 	bl	8005384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_IC_Start_IT+0x1e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	e013      	b.n	80049de <HAL_TIM_IC_Start_IT+0x46>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_IC_Start_IT+0x2e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	e00b      	b.n	80049de <HAL_TIM_IC_Start_IT+0x46>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_IC_Start_IT+0x3e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	e003      	b.n	80049de <HAL_TIM_IC_Start_IT+0x46>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d104      	bne.n	80049f0 <HAL_TIM_IC_Start_IT+0x58>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e013      	b.n	8004a18 <HAL_TIM_IC_Start_IT+0x80>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d104      	bne.n	8004a00 <HAL_TIM_IC_Start_IT+0x68>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e00b      	b.n	8004a18 <HAL_TIM_IC_Start_IT+0x80>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d104      	bne.n	8004a10 <HAL_TIM_IC_Start_IT+0x78>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e003      	b.n	8004a18 <HAL_TIM_IC_Start_IT+0x80>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a1a:	7bbb      	ldrb	r3, [r7, #14]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d102      	bne.n	8004a26 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a20:	7b7b      	ldrb	r3, [r7, #13]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d001      	beq.n	8004a2a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e0cc      	b.n	8004bc4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIM_IC_Start_IT+0xa2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a38:	e013      	b.n	8004a62 <HAL_TIM_IC_Start_IT+0xca>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d104      	bne.n	8004a4a <HAL_TIM_IC_Start_IT+0xb2>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a48:	e00b      	b.n	8004a62 <HAL_TIM_IC_Start_IT+0xca>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d104      	bne.n	8004a5a <HAL_TIM_IC_Start_IT+0xc2>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a58:	e003      	b.n	8004a62 <HAL_TIM_IC_Start_IT+0xca>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_IC_Start_IT+0xda>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a70:	e013      	b.n	8004a9a <HAL_TIM_IC_Start_IT+0x102>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_IC_Start_IT+0xea>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a80:	e00b      	b.n	8004a9a <HAL_TIM_IC_Start_IT+0x102>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_IC_Start_IT+0xfa>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a90:	e003      	b.n	8004a9a <HAL_TIM_IC_Start_IT+0x102>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d841      	bhi.n	8004b24 <HAL_TIM_IC_Start_IT+0x18c>
 8004aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa8 <HAL_TIM_IC_Start_IT+0x110>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004add 	.word	0x08004add
 8004aac:	08004b25 	.word	0x08004b25
 8004ab0:	08004b25 	.word	0x08004b25
 8004ab4:	08004b25 	.word	0x08004b25
 8004ab8:	08004aef 	.word	0x08004aef
 8004abc:	08004b25 	.word	0x08004b25
 8004ac0:	08004b25 	.word	0x08004b25
 8004ac4:	08004b25 	.word	0x08004b25
 8004ac8:	08004b01 	.word	0x08004b01
 8004acc:	08004b25 	.word	0x08004b25
 8004ad0:	08004b25 	.word	0x08004b25
 8004ad4:	08004b25 	.word	0x08004b25
 8004ad8:	08004b13 	.word	0x08004b13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0202 	orr.w	r2, r2, #2
 8004aea:	60da      	str	r2, [r3, #12]
      break;
 8004aec:	e01d      	b.n	8004b2a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0204 	orr.w	r2, r2, #4
 8004afc:	60da      	str	r2, [r3, #12]
      break;
 8004afe:	e014      	b.n	8004b2a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0208 	orr.w	r2, r2, #8
 8004b0e:	60da      	str	r2, [r3, #12]
      break;
 8004b10:	e00b      	b.n	8004b2a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0210 	orr.w	r2, r2, #16
 8004b20:	60da      	str	r2, [r3, #12]
      break;
 8004b22:	e002      	b.n	8004b2a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d148      	bne.n	8004bc2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2201      	movs	r2, #1
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 f8d5 	bl	8005ce8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a22      	ldr	r2, [pc, #136]	@ (8004bcc <HAL_TIM_IC_Start_IT+0x234>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d022      	beq.n	8004b8e <HAL_TIM_IC_Start_IT+0x1f6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b50:	d01d      	beq.n	8004b8e <HAL_TIM_IC_Start_IT+0x1f6>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd0 <HAL_TIM_IC_Start_IT+0x238>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d018      	beq.n	8004b8e <HAL_TIM_IC_Start_IT+0x1f6>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd4 <HAL_TIM_IC_Start_IT+0x23c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d013      	beq.n	8004b8e <HAL_TIM_IC_Start_IT+0x1f6>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd8 <HAL_TIM_IC_Start_IT+0x240>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00e      	beq.n	8004b8e <HAL_TIM_IC_Start_IT+0x1f6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a19      	ldr	r2, [pc, #100]	@ (8004bdc <HAL_TIM_IC_Start_IT+0x244>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_TIM_IC_Start_IT+0x1f6>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a18      	ldr	r2, [pc, #96]	@ (8004be0 <HAL_TIM_IC_Start_IT+0x248>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_TIM_IC_Start_IT+0x1f6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a16      	ldr	r2, [pc, #88]	@ (8004be4 <HAL_TIM_IC_Start_IT+0x24c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d111      	bne.n	8004bb2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b06      	cmp	r3, #6
 8004b9e:	d010      	beq.n	8004bc2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	e007      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40000800 	.word	0x40000800
 8004bd8:	40000c00 	.word	0x40000c00
 8004bdc:	40010400 	.word	0x40010400
 8004be0:	40014000 	.word	0x40014000
 8004be4:	40001800 	.word	0x40001800

08004be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d020      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01b      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0202 	mvn.w	r2, #2
 8004c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fb88 	bl	8005348 <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fb7a 	bl	8005334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fb8b 	bl	800535c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d020      	beq.n	8004c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01b      	beq.n	8004c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0204 	mvn.w	r2, #4
 8004c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fb62 	bl	8005348 <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fb54 	bl	8005334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fb65 	bl	800535c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d020      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01b      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0208 	mvn.w	r2, #8
 8004cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2204      	movs	r2, #4
 8004cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fb3c 	bl	8005348 <HAL_TIM_IC_CaptureCallback>
 8004cd0:	e005      	b.n	8004cde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fb2e 	bl	8005334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fb3f 	bl	800535c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d020      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01b      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0210 	mvn.w	r2, #16
 8004d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2208      	movs	r2, #8
 8004d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fb16 	bl	8005348 <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e005      	b.n	8004d2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fb08 	bl	8005334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fb19 	bl	800535c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00c      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d007      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0201 	mvn.w	r2, #1
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fae6 	bl	8005320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00c      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f001 f864 	bl	8005e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00c      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 faea 	bl	8005370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00c      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d007      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0220 	mvn.w	r2, #32
 8004db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f001 f836 	bl	8005e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e088      	b.n	8004ef8 <HAL_TIM_IC_ConfigChannel+0x130>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d11b      	bne.n	8004e2c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004e04:	f000 fdac 	bl	8005960 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 020c 	bic.w	r2, r2, #12
 8004e16:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6999      	ldr	r1, [r3, #24]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	619a      	str	r2, [r3, #24]
 8004e2a:	e060      	b.n	8004eee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d11c      	bne.n	8004e6c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004e42:	f000 fe30 	bl	8005aa6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004e54:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6999      	ldr	r1, [r3, #24]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	021a      	lsls	r2, r3, #8
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	619a      	str	r2, [r3, #24]
 8004e6a:	e040      	b.n	8004eee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d11b      	bne.n	8004eaa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004e82:	f000 fe7d 	bl	8005b80 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 020c 	bic.w	r2, r2, #12
 8004e94:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69d9      	ldr	r1, [r3, #28]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	61da      	str	r2, [r3, #28]
 8004ea8:	e021      	b.n	8004eee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b0c      	cmp	r3, #12
 8004eae:	d11c      	bne.n	8004eea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004ec0:	f000 fe9a 	bl	8005bf8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69da      	ldr	r2, [r3, #28]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004ed2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69d9      	ldr	r1, [r3, #28]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	021a      	lsls	r2, r3, #8
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	61da      	str	r2, [r3, #28]
 8004ee8:	e001      	b.n	8004eee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e0ae      	b.n	800507c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b0c      	cmp	r3, #12
 8004f2a:	f200 809f 	bhi.w	800506c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004f69 	.word	0x08004f69
 8004f38:	0800506d 	.word	0x0800506d
 8004f3c:	0800506d 	.word	0x0800506d
 8004f40:	0800506d 	.word	0x0800506d
 8004f44:	08004fa9 	.word	0x08004fa9
 8004f48:	0800506d 	.word	0x0800506d
 8004f4c:	0800506d 	.word	0x0800506d
 8004f50:	0800506d 	.word	0x0800506d
 8004f54:	08004feb 	.word	0x08004feb
 8004f58:	0800506d 	.word	0x0800506d
 8004f5c:	0800506d 	.word	0x0800506d
 8004f60:	0800506d 	.word	0x0800506d
 8004f64:	0800502b 	.word	0x0800502b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fab4 	bl	80054dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0208 	orr.w	r2, r2, #8
 8004f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0204 	bic.w	r2, r2, #4
 8004f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6999      	ldr	r1, [r3, #24]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	619a      	str	r2, [r3, #24]
      break;
 8004fa6:	e064      	b.n	8005072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fb04 	bl	80055bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6999      	ldr	r1, [r3, #24]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	021a      	lsls	r2, r3, #8
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	619a      	str	r2, [r3, #24]
      break;
 8004fe8:	e043      	b.n	8005072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fb59 	bl	80056a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0208 	orr.w	r2, r2, #8
 8005004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0204 	bic.w	r2, r2, #4
 8005014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69d9      	ldr	r1, [r3, #28]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	61da      	str	r2, [r3, #28]
      break;
 8005028:	e023      	b.n	8005072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fbad 	bl	8005790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69d9      	ldr	r1, [r3, #28]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	021a      	lsls	r2, r3, #8
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	61da      	str	r2, [r3, #28]
      break;
 800506a:	e002      	b.n	8005072 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	75fb      	strb	r3, [r7, #23]
      break;
 8005070:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800507a:	7dfb      	ldrb	r3, [r7, #23]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_TIM_ConfigClockSource+0x1c>
 800509c:	2302      	movs	r3, #2
 800509e:	e0b4      	b.n	800520a <HAL_TIM_ConfigClockSource+0x186>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050d8:	d03e      	beq.n	8005158 <HAL_TIM_ConfigClockSource+0xd4>
 80050da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050de:	f200 8087 	bhi.w	80051f0 <HAL_TIM_ConfigClockSource+0x16c>
 80050e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e6:	f000 8086 	beq.w	80051f6 <HAL_TIM_ConfigClockSource+0x172>
 80050ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ee:	d87f      	bhi.n	80051f0 <HAL_TIM_ConfigClockSource+0x16c>
 80050f0:	2b70      	cmp	r3, #112	@ 0x70
 80050f2:	d01a      	beq.n	800512a <HAL_TIM_ConfigClockSource+0xa6>
 80050f4:	2b70      	cmp	r3, #112	@ 0x70
 80050f6:	d87b      	bhi.n	80051f0 <HAL_TIM_ConfigClockSource+0x16c>
 80050f8:	2b60      	cmp	r3, #96	@ 0x60
 80050fa:	d050      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x11a>
 80050fc:	2b60      	cmp	r3, #96	@ 0x60
 80050fe:	d877      	bhi.n	80051f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005100:	2b50      	cmp	r3, #80	@ 0x50
 8005102:	d03c      	beq.n	800517e <HAL_TIM_ConfigClockSource+0xfa>
 8005104:	2b50      	cmp	r3, #80	@ 0x50
 8005106:	d873      	bhi.n	80051f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005108:	2b40      	cmp	r3, #64	@ 0x40
 800510a:	d058      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x13a>
 800510c:	2b40      	cmp	r3, #64	@ 0x40
 800510e:	d86f      	bhi.n	80051f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005110:	2b30      	cmp	r3, #48	@ 0x30
 8005112:	d064      	beq.n	80051de <HAL_TIM_ConfigClockSource+0x15a>
 8005114:	2b30      	cmp	r3, #48	@ 0x30
 8005116:	d86b      	bhi.n	80051f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005118:	2b20      	cmp	r3, #32
 800511a:	d060      	beq.n	80051de <HAL_TIM_ConfigClockSource+0x15a>
 800511c:	2b20      	cmp	r3, #32
 800511e:	d867      	bhi.n	80051f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d05c      	beq.n	80051de <HAL_TIM_ConfigClockSource+0x15a>
 8005124:	2b10      	cmp	r3, #16
 8005126:	d05a      	beq.n	80051de <HAL_TIM_ConfigClockSource+0x15a>
 8005128:	e062      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800513a:	f000 fdb5 	bl	8005ca8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800514c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	609a      	str	r2, [r3, #8]
      break;
 8005156:	e04f      	b.n	80051f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005168:	f000 fd9e 	bl	8005ca8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800517a:	609a      	str	r2, [r3, #8]
      break;
 800517c:	e03c      	b.n	80051f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	461a      	mov	r2, r3
 800518c:	f000 fc5c 	bl	8005a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2150      	movs	r1, #80	@ 0x50
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fd6b 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 800519c:	e02c      	b.n	80051f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051aa:	461a      	mov	r2, r3
 80051ac:	f000 fcb8 	bl	8005b20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2160      	movs	r1, #96	@ 0x60
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fd5b 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 80051bc:	e01c      	b.n	80051f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ca:	461a      	mov	r2, r3
 80051cc:	f000 fc3c 	bl	8005a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2140      	movs	r1, #64	@ 0x40
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fd4b 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 80051dc:	e00c      	b.n	80051f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4619      	mov	r1, r3
 80051e8:	4610      	mov	r0, r2
 80051ea:	f000 fd42 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 80051ee:	e003      	b.n	80051f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
      break;
 80051f4:	e000      	b.n	80051f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005226:	2302      	movs	r3, #2
 8005228:	e031      	b.n	800528e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fafd 	bl	800583c <TIM_SlaveTimer_SetConfig>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e018      	b.n	800528e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800526a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800527a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b0c      	cmp	r3, #12
 80052aa:	d831      	bhi.n	8005310 <HAL_TIM_ReadCapturedValue+0x78>
 80052ac:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052e9 	.word	0x080052e9
 80052b8:	08005311 	.word	0x08005311
 80052bc:	08005311 	.word	0x08005311
 80052c0:	08005311 	.word	0x08005311
 80052c4:	080052f3 	.word	0x080052f3
 80052c8:	08005311 	.word	0x08005311
 80052cc:	08005311 	.word	0x08005311
 80052d0:	08005311 	.word	0x08005311
 80052d4:	080052fd 	.word	0x080052fd
 80052d8:	08005311 	.word	0x08005311
 80052dc:	08005311 	.word	0x08005311
 80052e0:	08005311 	.word	0x08005311
 80052e4:	08005307 	.word	0x08005307
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ee:	60fb      	str	r3, [r7, #12]

      break;
 80052f0:	e00f      	b.n	8005312 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	60fb      	str	r3, [r7, #12]

      break;
 80052fa:	e00a      	b.n	8005312 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005302:	60fb      	str	r3, [r7, #12]

      break;
 8005304:	e005      	b.n	8005312 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530c:	60fb      	str	r3, [r7, #12]

      break;
 800530e:	e000      	b.n	8005312 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005310:	bf00      	nop
  }

  return tmpreg;
 8005312:	68fb      	ldr	r3, [r7, #12]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a46      	ldr	r2, [pc, #280]	@ (80054b0 <TIM_Base_SetConfig+0x12c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a2:	d00f      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a43      	ldr	r2, [pc, #268]	@ (80054b4 <TIM_Base_SetConfig+0x130>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00b      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a42      	ldr	r2, [pc, #264]	@ (80054b8 <TIM_Base_SetConfig+0x134>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d007      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a41      	ldr	r2, [pc, #260]	@ (80054bc <TIM_Base_SetConfig+0x138>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a40      	ldr	r2, [pc, #256]	@ (80054c0 <TIM_Base_SetConfig+0x13c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d108      	bne.n	80053d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a35      	ldr	r2, [pc, #212]	@ (80054b0 <TIM_Base_SetConfig+0x12c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d02b      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e4:	d027      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a32      	ldr	r2, [pc, #200]	@ (80054b4 <TIM_Base_SetConfig+0x130>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d023      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a31      	ldr	r2, [pc, #196]	@ (80054b8 <TIM_Base_SetConfig+0x134>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01f      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a30      	ldr	r2, [pc, #192]	@ (80054bc <TIM_Base_SetConfig+0x138>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01b      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a2f      	ldr	r2, [pc, #188]	@ (80054c0 <TIM_Base_SetConfig+0x13c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d017      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2e      	ldr	r2, [pc, #184]	@ (80054c4 <TIM_Base_SetConfig+0x140>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2d      	ldr	r2, [pc, #180]	@ (80054c8 <TIM_Base_SetConfig+0x144>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00f      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a2c      	ldr	r2, [pc, #176]	@ (80054cc <TIM_Base_SetConfig+0x148>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00b      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2b      	ldr	r2, [pc, #172]	@ (80054d0 <TIM_Base_SetConfig+0x14c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d007      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2a      	ldr	r2, [pc, #168]	@ (80054d4 <TIM_Base_SetConfig+0x150>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a29      	ldr	r2, [pc, #164]	@ (80054d8 <TIM_Base_SetConfig+0x154>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d108      	bne.n	8005448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800543c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a10      	ldr	r2, [pc, #64]	@ (80054b0 <TIM_Base_SetConfig+0x12c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_Base_SetConfig+0xf8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a12      	ldr	r2, [pc, #72]	@ (80054c0 <TIM_Base_SetConfig+0x13c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d103      	bne.n	8005484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b01      	cmp	r3, #1
 8005494:	d105      	bne.n	80054a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f023 0201 	bic.w	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	611a      	str	r2, [r3, #16]
  }
}
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40010000 	.word	0x40010000
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40000c00 	.word	0x40000c00
 80054c0:	40010400 	.word	0x40010400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800
 80054d0:	40001800 	.word	0x40001800
 80054d4:	40001c00 	.word	0x40001c00
 80054d8:	40002000 	.word	0x40002000

080054dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f023 0201 	bic.w	r2, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f023 0302 	bic.w	r3, r3, #2
 8005524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a20      	ldr	r2, [pc, #128]	@ (80055b4 <TIM_OC1_SetConfig+0xd8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC1_SetConfig+0x64>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a1f      	ldr	r2, [pc, #124]	@ (80055b8 <TIM_OC1_SetConfig+0xdc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d10c      	bne.n	800555a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0308 	bic.w	r3, r3, #8
 8005546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 0304 	bic.w	r3, r3, #4
 8005558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a15      	ldr	r2, [pc, #84]	@ (80055b4 <TIM_OC1_SetConfig+0xd8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <TIM_OC1_SetConfig+0x8e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a14      	ldr	r2, [pc, #80]	@ (80055b8 <TIM_OC1_SetConfig+0xdc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d111      	bne.n	800558e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	621a      	str	r2, [r3, #32]
}
 80055a8:	bf00      	nop
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40010400 	.word	0x40010400

080055bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f023 0210 	bic.w	r2, r3, #16
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0320 	bic.w	r3, r3, #32
 8005606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a22      	ldr	r2, [pc, #136]	@ (80056a0 <TIM_OC2_SetConfig+0xe4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d003      	beq.n	8005624 <TIM_OC2_SetConfig+0x68>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a21      	ldr	r2, [pc, #132]	@ (80056a4 <TIM_OC2_SetConfig+0xe8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d10d      	bne.n	8005640 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800562a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800563e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a17      	ldr	r2, [pc, #92]	@ (80056a0 <TIM_OC2_SetConfig+0xe4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC2_SetConfig+0x94>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a16      	ldr	r2, [pc, #88]	@ (80056a4 <TIM_OC2_SetConfig+0xe8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d113      	bne.n	8005678 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800565e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40010400 	.word	0x40010400

080056a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0303 	bic.w	r3, r3, #3
 80056de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a21      	ldr	r2, [pc, #132]	@ (8005788 <TIM_OC3_SetConfig+0xe0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_OC3_SetConfig+0x66>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a20      	ldr	r2, [pc, #128]	@ (800578c <TIM_OC3_SetConfig+0xe4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d10d      	bne.n	800572a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	021b      	lsls	r3, r3, #8
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a16      	ldr	r2, [pc, #88]	@ (8005788 <TIM_OC3_SetConfig+0xe0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_OC3_SetConfig+0x92>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a15      	ldr	r2, [pc, #84]	@ (800578c <TIM_OC3_SetConfig+0xe4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d113      	bne.n	8005762 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	621a      	str	r2, [r3, #32]
}
 800577c:	bf00      	nop
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	40010000 	.word	0x40010000
 800578c:	40010400 	.word	0x40010400

08005790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	021b      	lsls	r3, r3, #8
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	031b      	lsls	r3, r3, #12
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a12      	ldr	r2, [pc, #72]	@ (8005834 <TIM_OC4_SetConfig+0xa4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_OC4_SetConfig+0x68>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a11      	ldr	r2, [pc, #68]	@ (8005838 <TIM_OC4_SetConfig+0xa8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d109      	bne.n	800580c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	019b      	lsls	r3, r3, #6
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40010000 	.word	0x40010000
 8005838:	40010400 	.word	0x40010400

0800583c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005858:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f023 0307 	bic.w	r3, r3, #7
 800586a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b70      	cmp	r3, #112	@ 0x70
 8005884:	d01a      	beq.n	80058bc <TIM_SlaveTimer_SetConfig+0x80>
 8005886:	2b70      	cmp	r3, #112	@ 0x70
 8005888:	d860      	bhi.n	800594c <TIM_SlaveTimer_SetConfig+0x110>
 800588a:	2b60      	cmp	r3, #96	@ 0x60
 800588c:	d054      	beq.n	8005938 <TIM_SlaveTimer_SetConfig+0xfc>
 800588e:	2b60      	cmp	r3, #96	@ 0x60
 8005890:	d85c      	bhi.n	800594c <TIM_SlaveTimer_SetConfig+0x110>
 8005892:	2b50      	cmp	r3, #80	@ 0x50
 8005894:	d046      	beq.n	8005924 <TIM_SlaveTimer_SetConfig+0xe8>
 8005896:	2b50      	cmp	r3, #80	@ 0x50
 8005898:	d858      	bhi.n	800594c <TIM_SlaveTimer_SetConfig+0x110>
 800589a:	2b40      	cmp	r3, #64	@ 0x40
 800589c:	d019      	beq.n	80058d2 <TIM_SlaveTimer_SetConfig+0x96>
 800589e:	2b40      	cmp	r3, #64	@ 0x40
 80058a0:	d854      	bhi.n	800594c <TIM_SlaveTimer_SetConfig+0x110>
 80058a2:	2b30      	cmp	r3, #48	@ 0x30
 80058a4:	d055      	beq.n	8005952 <TIM_SlaveTimer_SetConfig+0x116>
 80058a6:	2b30      	cmp	r3, #48	@ 0x30
 80058a8:	d850      	bhi.n	800594c <TIM_SlaveTimer_SetConfig+0x110>
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d051      	beq.n	8005952 <TIM_SlaveTimer_SetConfig+0x116>
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d84c      	bhi.n	800594c <TIM_SlaveTimer_SetConfig+0x110>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d04d      	beq.n	8005952 <TIM_SlaveTimer_SetConfig+0x116>
 80058b6:	2b10      	cmp	r3, #16
 80058b8:	d04b      	beq.n	8005952 <TIM_SlaveTimer_SetConfig+0x116>
 80058ba:	e047      	b.n	800594c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80058cc:	f000 f9ec 	bl	8005ca8 <TIM_ETR_SetConfig>
      break;
 80058d0:	e040      	b.n	8005954 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b05      	cmp	r3, #5
 80058d8:	d101      	bne.n	80058de <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e03b      	b.n	8005956 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a1a      	ldr	r2, [r3, #32]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005904:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	4313      	orrs	r3, r2
 8005910:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	621a      	str	r2, [r3, #32]
      break;
 8005922:	e017      	b.n	8005954 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005930:	461a      	mov	r2, r3
 8005932:	f000 f889 	bl	8005a48 <TIM_TI1_ConfigInputStage>
      break;
 8005936:	e00d      	b.n	8005954 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005944:	461a      	mov	r2, r3
 8005946:	f000 f8eb 	bl	8005b20 <TIM_TI2_ConfigInputStage>
      break;
 800594a:	e003      	b.n	8005954 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	75fb      	strb	r3, [r7, #23]
      break;
 8005950:	e000      	b.n	8005954 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005952:	bf00      	nop
  }

  return status;
 8005954:	7dfb      	ldrb	r3, [r7, #23]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	f023 0201 	bic.w	r2, r3, #1
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4a28      	ldr	r2, [pc, #160]	@ (8005a2c <TIM_TI1_SetConfig+0xcc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01b      	beq.n	80059c6 <TIM_TI1_SetConfig+0x66>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005994:	d017      	beq.n	80059c6 <TIM_TI1_SetConfig+0x66>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a25      	ldr	r2, [pc, #148]	@ (8005a30 <TIM_TI1_SetConfig+0xd0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d013      	beq.n	80059c6 <TIM_TI1_SetConfig+0x66>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4a24      	ldr	r2, [pc, #144]	@ (8005a34 <TIM_TI1_SetConfig+0xd4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00f      	beq.n	80059c6 <TIM_TI1_SetConfig+0x66>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4a23      	ldr	r2, [pc, #140]	@ (8005a38 <TIM_TI1_SetConfig+0xd8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00b      	beq.n	80059c6 <TIM_TI1_SetConfig+0x66>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a22      	ldr	r2, [pc, #136]	@ (8005a3c <TIM_TI1_SetConfig+0xdc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <TIM_TI1_SetConfig+0x66>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4a21      	ldr	r2, [pc, #132]	@ (8005a40 <TIM_TI1_SetConfig+0xe0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_TI1_SetConfig+0x66>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4a20      	ldr	r2, [pc, #128]	@ (8005a44 <TIM_TI1_SetConfig+0xe4>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d101      	bne.n	80059ca <TIM_TI1_SetConfig+0x6a>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <TIM_TI1_SetConfig+0x6c>
 80059ca:	2300      	movs	r3, #0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0303 	bic.w	r3, r3, #3
 80059d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	e003      	b.n	80059ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f043 0301 	orr.w	r3, r3, #1
 80059e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f023 030a 	bic.w	r3, r3, #10
 8005a04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f003 030a 	and.w	r3, r3, #10
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40010400 	.word	0x40010400
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40001800 	.word	0x40001800

08005a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f023 0201 	bic.w	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f023 030a 	bic.w	r3, r3, #10
 8005a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	621a      	str	r2, [r3, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b087      	sub	sp, #28
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]
 8005ab2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0210 	bic.w	r2, r3, #16
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	031b      	lsls	r3, r3, #12
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005af8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f023 0210 	bic.w	r2, r3, #16
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	031b      	lsls	r3, r3, #12
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f023 0303 	bic.w	r3, r3, #3
 8005bac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bbc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	621a      	str	r2, [r3, #32]
}
 8005bec:	bf00      	nop
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c24:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	021b      	lsls	r3, r3, #8
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c36:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	031b      	lsls	r3, r3, #12
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005c4a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	031b      	lsls	r3, r3, #12
 8005c50:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f043 0307 	orr.w	r3, r3, #7
 8005c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	609a      	str	r2, [r3, #8]
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	021a      	lsls	r2, r3, #8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	609a      	str	r2, [r3, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1a      	ldr	r2, [r3, #32]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	43db      	mvns	r3, r3
 8005d0a:	401a      	ands	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a1a      	ldr	r2, [r3, #32]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 031f 	and.w	r3, r3, #31
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d20:	431a      	orrs	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e05a      	b.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a21      	ldr	r2, [pc, #132]	@ (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d022      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d98:	d01d      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d018      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00e      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a18      	ldr	r2, [pc, #96]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a17      	ldr	r2, [pc, #92]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a15      	ldr	r2, [pc, #84]	@ (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10c      	bne.n	8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40010000 	.word	0x40010000
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	40000c00 	.word	0x40000c00
 8005e20:	40010400 	.word	0x40010400
 8005e24:	40014000 	.word	0x40014000
 8005e28:	40001800 	.word	0x40001800

08005e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <memset>:
 8005e54:	4402      	add	r2, r0
 8005e56:	4603      	mov	r3, r0
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d100      	bne.n	8005e5e <memset+0xa>
 8005e5c:	4770      	bx	lr
 8005e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e62:	e7f9      	b.n	8005e58 <memset+0x4>

08005e64 <__libc_init_array>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4d0d      	ldr	r5, [pc, #52]	@ (8005e9c <__libc_init_array+0x38>)
 8005e68:	4c0d      	ldr	r4, [pc, #52]	@ (8005ea0 <__libc_init_array+0x3c>)
 8005e6a:	1b64      	subs	r4, r4, r5
 8005e6c:	10a4      	asrs	r4, r4, #2
 8005e6e:	2600      	movs	r6, #0
 8005e70:	42a6      	cmp	r6, r4
 8005e72:	d109      	bne.n	8005e88 <__libc_init_array+0x24>
 8005e74:	4d0b      	ldr	r5, [pc, #44]	@ (8005ea4 <__libc_init_array+0x40>)
 8005e76:	4c0c      	ldr	r4, [pc, #48]	@ (8005ea8 <__libc_init_array+0x44>)
 8005e78:	f000 f818 	bl	8005eac <_init>
 8005e7c:	1b64      	subs	r4, r4, r5
 8005e7e:	10a4      	asrs	r4, r4, #2
 8005e80:	2600      	movs	r6, #0
 8005e82:	42a6      	cmp	r6, r4
 8005e84:	d105      	bne.n	8005e92 <__libc_init_array+0x2e>
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8c:	4798      	blx	r3
 8005e8e:	3601      	adds	r6, #1
 8005e90:	e7ee      	b.n	8005e70 <__libc_init_array+0xc>
 8005e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e96:	4798      	blx	r3
 8005e98:	3601      	adds	r6, #1
 8005e9a:	e7f2      	b.n	8005e82 <__libc_init_array+0x1e>
 8005e9c:	08005eec 	.word	0x08005eec
 8005ea0:	08005eec 	.word	0x08005eec
 8005ea4:	08005eec 	.word	0x08005eec
 8005ea8:	08005ef0 	.word	0x08005ef0

08005eac <_init>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr

08005eb8 <_fini>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	bf00      	nop
 8005ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ebe:	bc08      	pop	{r3}
 8005ec0:	469e      	mov	lr, r3
 8005ec2:	4770      	bx	lr
