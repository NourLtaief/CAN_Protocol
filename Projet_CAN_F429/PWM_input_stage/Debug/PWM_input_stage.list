
PWM_input_stage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ccc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005e54  08005e54  00006e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e74  08005e74  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005e74  08005e74  00006e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e7c  08005e7c  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e7c  08005e7c  00006e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e80  08005e80  00006e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005e84  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          00000240  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3f5  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fbf  00000000  00000000  00014439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  000163f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d6  00000000  00000000  00017098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002191c  00000000  00000000  00017a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e322  00000000  00000000  0003938a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d473c  00000000  00000000  000476ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011bde8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003560  00000000  00000000  0011be2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0011f38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e3c 	.word	0x08005e3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005e3c 	.word	0x08005e3c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <Control_LED>:
uint32_t HighTime = 0, Period = 0,LowTime=0;



uint8_t Control_LED(uint8_t led_num, uint8_t action)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	460a      	mov	r2, r1
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	4613      	mov	r3, r2
 80004c6:	71bb      	strb	r3, [r7, #6]
	uint8_t ReturnStatus = 0U;   //default value //no error
 80004c8:	2300      	movs	r3, #0
 80004ca:	73fb      	strb	r3, [r7, #15]


	if ( (action > LED_SET )||(led_num >= GPIO_Input_Number ))   //LED_SET =1  //GPIO_Input_Number 0..3
 80004cc:	79bb      	ldrb	r3, [r7, #6]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d802      	bhi.n	80004d8 <Control_LED+0x20>
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d902      	bls.n	80004de <Control_LED+0x26>
	{
		ReturnStatus = Bad_parameter ;   //Error Message
 80004d8:	23fe      	movs	r3, #254	@ 0xfe
 80004da:	73fb      	strb	r3, [r7, #15]
 80004dc:	e008      	b.n	80004f0 <Control_LED+0x38>
	}
	else   //ReturnStatus = 0U;
	{
        HAL_GPIO_WritePin(GPIOD, (uint16_t)led_matrix[led_num], (GPIO_PinState)action); // configure  pin number and action :set or reset
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	4a06      	ldr	r2, [pc, #24]	@ (80004fc <Control_LED+0x44>)
 80004e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004e6:	79ba      	ldrb	r2, [r7, #6]
 80004e8:	4619      	mov	r1, r3
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <Control_LED+0x48>)
 80004ec:	f003 fc1e 	bl	8003d2c <HAL_GPIO_WritePin>
	}
	return ReturnStatus;      //last value of ReturnStatus
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000000 	.word	0x20000000
 8000500:	40020c00 	.word	0x40020c00

08000504 <Read_LED>:


GPIO_PinState Read_LED(uint8_t led_num)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState bitstatus = GPIO_PIN_RESET;  // Default state is OFF
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
    // Check if the led_num is within valid range
    if (led_num < GPIO_Input_Number)
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d80a      	bhi.n	800052e <Read_LED+0x2a>
    {
        // Read the state of the specified LED
    	bitstatus = HAL_GPIO_ReadPin(GPIOD, led_matrix[led_num]);
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	4a08      	ldr	r2, [pc, #32]	@ (800053c <Read_LED+0x38>)
 800051c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000520:	4619      	mov	r1, r3
 8000522:	4807      	ldr	r0, [pc, #28]	@ (8000540 <Read_LED+0x3c>)
 8000524:	f003 fbea 	bl	8003cfc <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	73fb      	strb	r3, [r7, #15]
 800052c:	e001      	b.n	8000532 <Read_LED+0x2e>
    }
    else
    {
    	bitstatus = Bad_parameter ;
 800052e:	23fe      	movs	r3, #254	@ 0xfe
 8000530:	73fb      	strb	r3, [r7, #15]
    }
    return bitstatus;
 8000532:	7bfb      	ldrb	r3, [r7, #15]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000000 	.word	0x20000000
 8000540:	40020c00 	.word	0x40020c00

08000544 <Send_CAN_Message>:


void Send_CAN_Message(uint8_t *data, uint32_t length)  //variable data length
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
    TxHeader.DLC = length;
 800054e:	4a09      	ldr	r2, [pc, #36]	@ (8000574 <Send_CAN_Message+0x30>)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	6113      	str	r3, [r2, #16]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TxMailbox) != HAL_OK)
 8000554:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <Send_CAN_Message+0x34>)
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	4906      	ldr	r1, [pc, #24]	@ (8000574 <Send_CAN_Message+0x30>)
 800055a:	4808      	ldr	r0, [pc, #32]	@ (800057c <Send_CAN_Message+0x38>)
 800055c:	f002 f8ee 	bl	800273c <HAL_CAN_AddTxMessage>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <Send_CAN_Message+0x26>
    {
        Error_Handler();          // Handle transmission error
 8000566:	f000 fd93 	bl	8001090 <Error_Handler>
    }
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200001d8 	.word	0x200001d8
 8000578:	20000214 	.word	0x20000214
 800057c:	200000d8 	.word	0x200000d8

08000580 <Set_PWM_output>:


uint8_t Set_PWM_output(uint32_t channel, uint16_t duty_cycle, uint16_t frequency)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	@ 0x30
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	807b      	strh	r3, [r7, #2]
 800058c:	4613      	mov	r3, r2
 800058e:	803b      	strh	r3, [r7, #0]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
 80005a0:	615a      	str	r2, [r3, #20]
 80005a2:	619a      	str	r2, [r3, #24]
    uint8_t ReturnStatus = 0U;
 80005a4:	2300      	movs	r3, #0
 80005a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if ((channel > pwm_channel_max ) || (duty_cycle >duty_cycle_max ) || (frequency == 0U))
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d807      	bhi.n	80005c0 <Set_PWM_output+0x40>
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d802      	bhi.n	80005c0 <Set_PWM_output+0x40>
 80005ba:	883b      	ldrh	r3, [r7, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d101      	bne.n	80005c4 <Set_PWM_output+0x44>
    {
        return Bad_parameter ;
 80005c0:	23fe      	movs	r3, #254	@ 0xfe
 80005c2:	e05e      	b.n	8000682 <Set_PWM_output+0x102>
    }
    else
    {
        uint32_t PCLK1 = HAL_RCC_GetPCLK1Freq();
 80005c4:	f004 f83c 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 80005c8:	6278      	str	r0, [r7, #36]	@ 0x24
        htim2.Init.Prescaler = (PCLK1 / (1000U * 1000U)) - 1U;  //PCLK1 clock in MHZ  //prescaler=39
 80005ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005cc:	4a2f      	ldr	r2, [pc, #188]	@ (800068c <Set_PWM_output+0x10c>)
 80005ce:	fba2 2303 	umull	r2, r3, r2, r3
 80005d2:	0c9b      	lsrs	r3, r3, #18
 80005d4:	3b01      	subs	r3, #1
 80005d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000690 <Set_PWM_output+0x110>)
 80005d8:	6053      	str	r3, [r2, #4]
        htim2.Init.Period = (1000000/frequency) - 1U;     //ARR=999
 80005da:	883b      	ldrh	r3, [r7, #0]
 80005dc:	4a2d      	ldr	r2, [pc, #180]	@ (8000694 <Set_PWM_output+0x114>)
 80005de:	fb92 f3f3 	sdiv	r3, r2, r3
 80005e2:	3b01      	subs	r3, #1
 80005e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000690 <Set_PWM_output+0x110>)
 80005e6:	60d3      	str	r3, [r2, #12]
        if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005e8:	4829      	ldr	r0, [pc, #164]	@ (8000690 <Set_PWM_output+0x110>)
 80005ea:	f004 f8f5 	bl	80047d8 <HAL_TIM_PWM_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <Set_PWM_output+0x78>
        {
            return Driver_error;
 80005f4:	23fb      	movs	r3, #251	@ 0xfb
 80005f6:	e044      	b.n	8000682 <Set_PWM_output+0x102>
        }
        sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005f8:	2360      	movs	r3, #96	@ 0x60
 80005fa:	60bb      	str	r3, [r7, #8]
        sConfigOC.Pulse = ((duty_cycle*htim2.Init.Period)/100)/100; //duty cycle in %
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	4a24      	ldr	r2, [pc, #144]	@ (8000690 <Set_PWM_output+0x110>)
 8000600:	68d2      	ldr	r2, [r2, #12]
 8000602:	fb02 f303 	mul.w	r3, r2, r3
 8000606:	4a24      	ldr	r2, [pc, #144]	@ (8000698 <Set_PWM_output+0x118>)
 8000608:	fba2 2303 	umull	r2, r3, r2, r3
 800060c:	0b5b      	lsrs	r3, r3, #13
 800060e:	60fb      	str	r3, [r7, #12]
        sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
        sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
          uint32_t tim_channel;
          switch (channel)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	2b03      	cmp	r3, #3
 800061e:	d817      	bhi.n	8000650 <Set_PWM_output+0xd0>
 8000620:	a201      	add	r2, pc, #4	@ (adr r2, 8000628 <Set_PWM_output+0xa8>)
 8000622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000626:	bf00      	nop
 8000628:	08000639 	.word	0x08000639
 800062c:	0800063f 	.word	0x0800063f
 8000630:	08000645 	.word	0x08000645
 8000634:	0800064b 	.word	0x0800064b
           {
               case 1: tim_channel = TIM_CHANNEL_1; break;
 8000638:	2300      	movs	r3, #0
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800063c:	e00a      	b.n	8000654 <Set_PWM_output+0xd4>
               case 2: tim_channel = TIM_CHANNEL_2; break;
 800063e:	2304      	movs	r3, #4
 8000640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000642:	e007      	b.n	8000654 <Set_PWM_output+0xd4>
               case 3: tim_channel = TIM_CHANNEL_3; break;
 8000644:	2308      	movs	r3, #8
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000648:	e004      	b.n	8000654 <Set_PWM_output+0xd4>
               case 4: tim_channel = TIM_CHANNEL_4; break;
 800064a:	230c      	movs	r3, #12
 800064c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800064e:	e001      	b.n	8000654 <Set_PWM_output+0xd4>
               default: return Bad_parameter; // Channel invalid
 8000650:	23fe      	movs	r3, #254	@ 0xfe
 8000652:	e016      	b.n	8000682 <Set_PWM_output+0x102>
           }
           if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, tim_channel) != HAL_OK)
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800065a:	4619      	mov	r1, r3
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <Set_PWM_output+0x110>)
 800065e:	f004 fceb 	bl	8005038 <HAL_TIM_PWM_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <Set_PWM_output+0xec>
           {
               return Driver_error;
 8000668:	23fb      	movs	r3, #251	@ 0xfb
 800066a:	e00a      	b.n	8000682 <Set_PWM_output+0x102>
           }

           if (HAL_TIM_PWM_Start(&htim2, tim_channel) != HAL_OK)
 800066c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800066e:	4808      	ldr	r0, [pc, #32]	@ (8000690 <Set_PWM_output+0x110>)
 8000670:	f004 f90c 	bl	800488c <HAL_TIM_PWM_Start>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <Set_PWM_output+0xfe>
           {
               return Driver_error;
 800067a:	23fb      	movs	r3, #251	@ 0xfb
 800067c:	e001      	b.n	8000682 <Set_PWM_output+0x102>
           }
           return ReturnStatus; // success
 800067e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
    }
}
 8000682:	4618      	mov	r0, r3
 8000684:	3730      	adds	r7, #48	@ 0x30
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	431bde83 	.word	0x431bde83
 8000690:	20000100 	.word	0x20000100
 8000694:	000f4240 	.word	0x000f4240
 8000698:	d1b71759 	.word	0xd1b71759

0800069c <Get_PWM_output>:


//check set_PWM_output values
uint8_t Get_PWM_output(uint32_t channel, uint16_t *duty_cycle, uint16_t *frequency)  //use pointer to return 2 values : duty cycle and frequency
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
    if ((channel >  pwm_channel_max) || (duty_cycle == NULL) || (frequency == NULL))
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	d805      	bhi.n	80006ba <Get_PWM_output+0x1e>
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d002      	beq.n	80006ba <Get_PWM_output+0x1e>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <Get_PWM_output+0x22>
    {
        return Bad_parameter;
 80006ba:	23fe      	movs	r3, #254	@ 0xfe
 80006bc:	e05b      	b.n	8000776 <Get_PWM_output+0xda>
    }
    uint32_t PCLK1 = HAL_RCC_GetPCLK1Freq();
 80006be:	f003 ffbf 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 80006c2:	61b8      	str	r0, [r7, #24]
    uint32_t prescaler = htim2.Init.Prescaler + 1U;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000780 <Get_PWM_output+0xe4>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	3301      	adds	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
    uint32_t period = htim2.Init.Period + 1U;
 80006cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <Get_PWM_output+0xe4>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
    uint32_t compare_value = 0U;                    // Compare register default  value CCR
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
    switch (channel)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3b01      	subs	r3, #1
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d81f      	bhi.n	8000720 <Get_PWM_output+0x84>
 80006e0:	a201      	add	r2, pc, #4	@ (adr r2, 80006e8 <Get_PWM_output+0x4c>)
 80006e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e6:	bf00      	nop
 80006e8:	080006f9 	.word	0x080006f9
 80006ec:	08000703 	.word	0x08000703
 80006f0:	0800070d 	.word	0x0800070d
 80006f4:	08000717 	.word	0x08000717
    {
        case 1: compare_value = htim2.Instance->CCR1; break;
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <Get_PWM_output+0xe4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006fe:	61fb      	str	r3, [r7, #28]
 8000700:	e010      	b.n	8000724 <Get_PWM_output+0x88>
        case 2: compare_value = htim2.Instance->CCR2; break;
 8000702:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <Get_PWM_output+0xe4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000708:	61fb      	str	r3, [r7, #28]
 800070a:	e00b      	b.n	8000724 <Get_PWM_output+0x88>
        case 3: compare_value = htim2.Instance->CCR3; break;
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <Get_PWM_output+0xe4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000712:	61fb      	str	r3, [r7, #28]
 8000714:	e006      	b.n	8000724 <Get_PWM_output+0x88>
        case 4: compare_value = htim2.Instance->CCR4; break;
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <Get_PWM_output+0xe4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	61fb      	str	r3, [r7, #28]
 800071e:	e001      	b.n	8000724 <Get_PWM_output+0x88>
        default: return Bad_parameter;       // Invalid channel
 8000720:	23fe      	movs	r3, #254	@ 0xfe
 8000722:	e028      	b.n	8000776 <Get_PWM_output+0xda>
    }
    if (period != 0)   //check the PWM frequency
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d01e      	beq.n	8000768 <Get_PWM_output+0xcc>
    {
        *frequency = (PCLK1 / prescaler) / period;
 800072a:	69ba      	ldr	r2, [r7, #24]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	fbb2 f3f3 	udiv	r3, r2, r3
 8000738:	b29a      	uxth	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	801a      	strh	r2, [r3, #0]
        *duty_cycle = ((compare_value * 100U) / period)*100;
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	2264      	movs	r2, #100	@ 0x64
 8000742:	fb03 f202 	mul.w	r2, r3, r2
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	fbb2 f3f3 	udiv	r3, r2, r3
 800074c:	b29b      	uxth	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	0092      	lsls	r2, r2, #2
 8000752:	4413      	add	r3, r2
 8000754:	461a      	mov	r2, r3
 8000756:	0091      	lsls	r1, r2, #2
 8000758:	461a      	mov	r2, r3
 800075a:	460b      	mov	r3, r1
 800075c:	4413      	add	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	801a      	strh	r2, [r3, #0]
 8000766:	e005      	b.n	8000774 <Get_PWM_output+0xd8>
    }
    else
    {
        *frequency = 0U;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	801a      	strh	r2, [r3, #0]
        *duty_cycle = 0U;
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2200      	movs	r2, #0
 8000772:	801a      	strh	r2, [r3, #0]
    }
    return 0U; // Success
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000100 	.word	0x20000100

08000784 <Handle_TIM_IC_Capture>:


PWM_Measurement Handle_TIM_IC_Capture(uint32_t channel)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    static uint8_t edgeType = 0;  // Type de front (0: indéfini, 1: montant, 2: descendant)
    static uint32_t previousIC_Val1 = 0;  // Valeur précédente pour détecter les erreurs
    static uint8_t lastState = 0;  // Stocke le dernier état du front (0: descendant, 1: montant)
    uint8_t currentState = 0;  // Stocke l'état actuel du front
 800078c:	2300      	movs	r3, #0
 800078e:	75fb      	strb	r3, [r7, #23]

    if (channel == TIM_CHANNEL_1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	f040 80de 	bne.w	8000954 <Handle_TIM_IC_Capture+0x1d0>
    {
        switch (CaptureCount)
 8000798:	4b7a      	ldr	r3, [pc, #488]	@ (8000984 <Handle_TIM_IC_Capture+0x200>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d058      	beq.n	8000852 <Handle_TIM_IC_Capture+0xce>
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	f300 80e1 	bgt.w	8000968 <Handle_TIM_IC_Capture+0x1e4>
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <Handle_TIM_IC_Capture+0x2c>
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d02d      	beq.n	800080a <Handle_TIM_IC_Capture+0x86>
 80007ae:	e0db      	b.n	8000968 <Handle_TIM_IC_Capture+0x1e4>
        {
            case 0: // Première capture (front montant ou descendant)
                IC_Val1 = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 80007b0:	2100      	movs	r1, #0
 80007b2:	4875      	ldr	r0, [pc, #468]	@ (8000988 <Handle_TIM_IC_Capture+0x204>)
 80007b4:	f004 fdca 	bl	800534c <HAL_TIM_ReadCapturedValue>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4a74      	ldr	r2, [pc, #464]	@ (800098c <Handle_TIM_IC_Capture+0x208>)
 80007bc:	6013      	str	r3, [r2, #0]

                // Si IC_Val1 est identique à la valeur précédente, il peut s'agir d'une erreur
                if (IC_Val1 == previousIC_Val1)
 80007be:	4b73      	ldr	r3, [pc, #460]	@ (800098c <Handle_TIM_IC_Capture+0x208>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4b73      	ldr	r3, [pc, #460]	@ (8000990 <Handle_TIM_IC_Capture+0x20c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	f000 80cb 	beq.w	8000962 <Handle_TIM_IC_Capture+0x1de>
                    // Ignore cette capture, attends le prochain front
                    break;
                }

                // Détermine le type de front actuel
                GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80007cc:	2101      	movs	r1, #1
 80007ce:	4871      	ldr	r0, [pc, #452]	@ (8000994 <Handle_TIM_IC_Capture+0x210>)
 80007d0:	f003 fa94 	bl	8003cfc <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
                currentState = (pinState == GPIO_PIN_SET) ? 1 : 0;  // 1: front montant, 0: front descendant
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	bf0c      	ite	eq
 80007de:	2301      	moveq	r3, #1
 80007e0:	2300      	movne	r3, #0
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	75fb      	strb	r3, [r7, #23]

                // S'assure que le premier front est montant
                if (currentState == 1)
 80007e6:	7dfb      	ldrb	r3, [r7, #23]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	f040 80bc 	bne.w	8000966 <Handle_TIM_IC_Capture+0x1e2>
                {
                    edgeType = 1;  // Premier front est montant, continuer normalement
 80007ee:	4b6a      	ldr	r3, [pc, #424]	@ (8000998 <Handle_TIM_IC_Capture+0x214>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
                    previousIC_Val1 = IC_Val1;  // Met à jour la valeur précédente
 80007f4:	4b65      	ldr	r3, [pc, #404]	@ (800098c <Handle_TIM_IC_Capture+0x208>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a65      	ldr	r2, [pc, #404]	@ (8000990 <Handle_TIM_IC_Capture+0x20c>)
 80007fa:	6013      	str	r3, [r2, #0]
                    CaptureCount = 1;
 80007fc:	4b61      	ldr	r3, [pc, #388]	@ (8000984 <Handle_TIM_IC_Capture+0x200>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
                    lastState = currentState;  // Stocke le dernier état
 8000802:	4a66      	ldr	r2, [pc, #408]	@ (800099c <Handle_TIM_IC_Capture+0x218>)
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	7013      	strb	r3, [r2, #0]
                else
                {
                    // Si le premier front n'est pas montant, attends le bon front
                    break;
                }
                break;
 8000808:	e0ae      	b.n	8000968 <Handle_TIM_IC_Capture+0x1e4>

            case 1: // Deuxième capture (front descendant)
                IC_Val2 = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 800080a:	2100      	movs	r1, #0
 800080c:	485e      	ldr	r0, [pc, #376]	@ (8000988 <Handle_TIM_IC_Capture+0x204>)
 800080e:	f004 fd9d 	bl	800534c <HAL_TIM_ReadCapturedValue>
 8000812:	4603      	mov	r3, r0
 8000814:	4a62      	ldr	r2, [pc, #392]	@ (80009a0 <Handle_TIM_IC_Capture+0x21c>)
 8000816:	6013      	str	r3, [r2, #0]

                // Met à jour l'état actuel en fonction du front détecté
                pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000818:	2101      	movs	r1, #1
 800081a:	485e      	ldr	r0, [pc, #376]	@ (8000994 <Handle_TIM_IC_Capture+0x210>)
 800081c:	f003 fa6e 	bl	8003cfc <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	73fb      	strb	r3, [r7, #15]
                currentState = (pinState == GPIO_PIN_SET) ? 1 : 0;  // 1: front montant, 0: front descendant
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	2b01      	cmp	r3, #1
 8000828:	bf0c      	ite	eq
 800082a:	2301      	moveq	r3, #1
 800082c:	2300      	movne	r3, #0
 800082e:	b2db      	uxtb	r3, r3
 8000830:	75fb      	strb	r3, [r7, #23]

                // Ne continue que si la transition de front est correcte (descendant après montant)
                if (lastState == 1 && currentState == 0)
 8000832:	4b5a      	ldr	r3, [pc, #360]	@ (800099c <Handle_TIM_IC_Capture+0x218>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	f040 8096 	bne.w	8000968 <Handle_TIM_IC_Capture+0x1e4>
 800083c:	7dfb      	ldrb	r3, [r7, #23]
 800083e:	2b00      	cmp	r3, #0
 8000840:	f040 8092 	bne.w	8000968 <Handle_TIM_IC_Capture+0x1e4>
                {
                    edgeType = 2;  // Front descendant valide après montant
 8000844:	4b54      	ldr	r3, [pc, #336]	@ (8000998 <Handle_TIM_IC_Capture+0x214>)
 8000846:	2202      	movs	r2, #2
 8000848:	701a      	strb	r2, [r3, #0]
                    CaptureCount = 2;
 800084a:	4b4e      	ldr	r3, [pc, #312]	@ (8000984 <Handle_TIM_IC_Capture+0x200>)
 800084c:	2202      	movs	r2, #2
 800084e:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Ignore les transitions incorrectes
                    break;
                }
                break;
 8000850:	e08a      	b.n	8000968 <Handle_TIM_IC_Capture+0x1e4>

            case 2: // Troisième capture (front montant à nouveau)
                IC_Val3 = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8000852:	2100      	movs	r1, #0
 8000854:	484c      	ldr	r0, [pc, #304]	@ (8000988 <Handle_TIM_IC_Capture+0x204>)
 8000856:	f004 fd79 	bl	800534c <HAL_TIM_ReadCapturedValue>
 800085a:	4603      	mov	r3, r0
 800085c:	4a51      	ldr	r2, [pc, #324]	@ (80009a4 <Handle_TIM_IC_Capture+0x220>)
 800085e:	6013      	str	r3, [r2, #0]

                // Vérifie si le edgeType correspond à la séquence correcte de transitions
                while(edgeType == 2) // Si le premier front était montant
 8000860:	bf00      	nop
 8000862:	4b4d      	ldr	r3, [pc, #308]	@ (8000998 <Handle_TIM_IC_Capture+0x214>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d0fb      	beq.n	8000862 <Handle_TIM_IC_Capture+0xde>
                {
                	;
                }

                    // Calcul du HighTime (temps haut)
                    if (IC_Val2 >= IC_Val1)
 800086a:	4b4d      	ldr	r3, [pc, #308]	@ (80009a0 <Handle_TIM_IC_Capture+0x21c>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	4b47      	ldr	r3, [pc, #284]	@ (800098c <Handle_TIM_IC_Capture+0x208>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	429a      	cmp	r2, r3
 8000874:	d307      	bcc.n	8000886 <Handle_TIM_IC_Capture+0x102>
                    {
                        HighTime = IC_Val2 - IC_Val1;
 8000876:	4b4a      	ldr	r3, [pc, #296]	@ (80009a0 <Handle_TIM_IC_Capture+0x21c>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b44      	ldr	r3, [pc, #272]	@ (800098c <Handle_TIM_IC_Capture+0x208>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	4a49      	ldr	r2, [pc, #292]	@ (80009a8 <Handle_TIM_IC_Capture+0x224>)
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	e008      	b.n	8000898 <Handle_TIM_IC_Capture+0x114>
                    }
                    else // Gérer le débordement
                    {
                        HighTime = (0xFFFF - IC_Val1 + IC_Val2 + 1);
 8000886:	4b46      	ldr	r3, [pc, #280]	@ (80009a0 <Handle_TIM_IC_Capture+0x21c>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	4b40      	ldr	r3, [pc, #256]	@ (800098c <Handle_TIM_IC_Capture+0x208>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000894:	4a44      	ldr	r2, [pc, #272]	@ (80009a8 <Handle_TIM_IC_Capture+0x224>)
 8000896:	6013      	str	r3, [r2, #0]
                    }

                    // Calcul de la période (Period)
                    if (IC_Val3 >= IC_Val1)
 8000898:	4b42      	ldr	r3, [pc, #264]	@ (80009a4 <Handle_TIM_IC_Capture+0x220>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b3b      	ldr	r3, [pc, #236]	@ (800098c <Handle_TIM_IC_Capture+0x208>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d307      	bcc.n	80008b4 <Handle_TIM_IC_Capture+0x130>
                    {
                        Period = IC_Val3 - IC_Val1;
 80008a4:	4b3f      	ldr	r3, [pc, #252]	@ (80009a4 <Handle_TIM_IC_Capture+0x220>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b38      	ldr	r3, [pc, #224]	@ (800098c <Handle_TIM_IC_Capture+0x208>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	4a3f      	ldr	r2, [pc, #252]	@ (80009ac <Handle_TIM_IC_Capture+0x228>)
 80008b0:	6013      	str	r3, [r2, #0]
 80008b2:	e008      	b.n	80008c6 <Handle_TIM_IC_Capture+0x142>
                    }
                    else // Gérer le débordement
                    {
                        Period = (0xFFFF - IC_Val1 + IC_Val3 + 1);
 80008b4:	4b3b      	ldr	r3, [pc, #236]	@ (80009a4 <Handle_TIM_IC_Capture+0x220>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b34      	ldr	r3, [pc, #208]	@ (800098c <Handle_TIM_IC_Capture+0x208>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80008c2:	4a3a      	ldr	r2, [pc, #232]	@ (80009ac <Handle_TIM_IC_Capture+0x228>)
 80008c4:	6013      	str	r3, [r2, #0]
                    }

                    // Calcul de la fréquence et du duty cycle
                    uint32_t timerClock = HAL_RCC_GetPCLK1Freq() / (htim5.Init.Prescaler + 1);
 80008c6:	f003 febb 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 80008ca:	4602      	mov	r2, r0
 80008cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <Handle_TIM_IC_Capture+0x204>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	3301      	adds	r3, #1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	613b      	str	r3, [r7, #16]
                    if (Period != 0)
 80008d8:	4b34      	ldr	r3, [pc, #208]	@ (80009ac <Handle_TIM_IC_Capture+0x228>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d028      	beq.n	8000932 <Handle_TIM_IC_Capture+0x1ae>
                    {
                        pwm.frequency = (uint16_t)(timerClock / Period);
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <Handle_TIM_IC_Capture+0x228>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	4b30      	ldr	r3, [pc, #192]	@ (80009b0 <Handle_TIM_IC_Capture+0x22c>)
 80008ee:	805a      	strh	r2, [r3, #2]
                        pwm.dutyCycle = (uint16_t)(((float)HighTime / (float)Period) * 100.0f);
 80008f0:	4b2d      	ldr	r3, [pc, #180]	@ (80009a8 <Handle_TIM_IC_Capture+0x224>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	ee07 3a90 	vmov	s15, r3
 80008f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80008fc:	4b2b      	ldr	r3, [pc, #172]	@ (80009ac <Handle_TIM_IC_Capture+0x228>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	ee07 3a90 	vmov	s15, r3
 8000904:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800090c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80009b4 <Handle_TIM_IC_Capture+0x230>
 8000910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000918:	ee17 3a90 	vmov	r3, s15
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b24      	ldr	r3, [pc, #144]	@ (80009b0 <Handle_TIM_IC_Capture+0x22c>)
 8000920:	801a      	strh	r2, [r3, #0]

                        if (pwm.dutyCycle > 100)
 8000922:	4b23      	ldr	r3, [pc, #140]	@ (80009b0 <Handle_TIM_IC_Capture+0x22c>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	2b64      	cmp	r3, #100	@ 0x64
 8000928:	d909      	bls.n	800093e <Handle_TIM_IC_Capture+0x1ba>
                        {
                            pwm.dutyCycle = 100;
 800092a:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <Handle_TIM_IC_Capture+0x22c>)
 800092c:	2264      	movs	r2, #100	@ 0x64
 800092e:	801a      	strh	r2, [r3, #0]
 8000930:	e005      	b.n	800093e <Handle_TIM_IC_Capture+0x1ba>
                        }
                    }
                    else
                    {
                        pwm.frequency = Bad_parameter;
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <Handle_TIM_IC_Capture+0x22c>)
 8000934:	22fe      	movs	r2, #254	@ 0xfe
 8000936:	805a      	strh	r2, [r3, #2]
                        pwm.dutyCycle = Bad_parameter;
 8000938:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <Handle_TIM_IC_Capture+0x22c>)
 800093a:	22fe      	movs	r2, #254	@ 0xfe
 800093c:	801a      	strh	r2, [r3, #0]
                    }

                // Prépare pour le prochain cycle
                IC_Val1 = IC_Val3;  // Commence le prochain cycle avec IC_Val3
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <Handle_TIM_IC_Capture+0x220>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a12      	ldr	r2, [pc, #72]	@ (800098c <Handle_TIM_IC_Capture+0x208>)
 8000944:	6013      	str	r3, [r2, #0]
                CaptureCount = 1;   // Réinitialise CaptureCount pour continuer depuis le deuxième front
 8000946:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <Handle_TIM_IC_Capture+0x200>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
                lastState = currentState;  // Met à jour le dernier état pour la prochaine capture
 800094c:	4a13      	ldr	r2, [pc, #76]	@ (800099c <Handle_TIM_IC_Capture+0x218>)
 800094e:	7dfb      	ldrb	r3, [r7, #23]
 8000950:	7013      	strb	r3, [r2, #0]
                break;
 8000952:	e009      	b.n	8000968 <Handle_TIM_IC_Capture+0x1e4>
        }
    }
    else
    {
        // Gère le cas où le canal n'est pas TIM_CHANNEL_1
        pwm.frequency = Bad_parameter;
 8000954:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <Handle_TIM_IC_Capture+0x22c>)
 8000956:	22fe      	movs	r2, #254	@ 0xfe
 8000958:	805a      	strh	r2, [r3, #2]
        pwm.dutyCycle = Bad_parameter;
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <Handle_TIM_IC_Capture+0x22c>)
 800095c:	22fe      	movs	r2, #254	@ 0xfe
 800095e:	801a      	strh	r2, [r3, #0]
 8000960:	e002      	b.n	8000968 <Handle_TIM_IC_Capture+0x1e4>
                    break;
 8000962:	bf00      	nop
 8000964:	e000      	b.n	8000968 <Handle_TIM_IC_Capture+0x1e4>
                    break;
 8000966:	bf00      	nop
    }

    return pwm;
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <Handle_TIM_IC_Capture+0x22c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	2300      	movs	r3, #0
 8000970:	893a      	ldrh	r2, [r7, #8]
 8000972:	f362 030f 	bfi	r3, r2, #0, #16
 8000976:	897a      	ldrh	r2, [r7, #10]
 8000978:	f362 431f 	bfi	r3, r2, #16, #16
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000224 	.word	0x20000224
 8000988:	20000190 	.word	0x20000190
 800098c:	20000218 	.word	0x20000218
 8000990:	20000234 	.word	0x20000234
 8000994:	40020000 	.word	0x40020000
 8000998:	20000238 	.word	0x20000238
 800099c:	20000239 	.word	0x20000239
 80009a0:	2000021c 	.word	0x2000021c
 80009a4:	20000220 	.word	0x20000220
 80009a8:	2000022c 	.word	0x2000022c
 80009ac:	20000230 	.word	0x20000230
 80009b0:	20000228 	.word	0x20000228
 80009b4:	42c80000 	.word	0x42c80000

080009b8 <CAN_ConfigFilter>:
}
*/


void CAN_ConfigFilter(uint32_t filterBank, uint32_t id, uint32_t idType)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	@ 0x38
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
    CAN_FilterTypeDef canFilterConfig;  // Declare a filter configuration structure
    canFilterConfig.FilterBank = filterBank;   // Set the filter bank number to configure
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
    canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Set the filter mode to ID mask
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;// Set the filter scale to 32 bits (for extended IDs)
 80009cc:	2301      	movs	r3, #1
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;  // Assign the filter to FIFO0 (First In First Out)
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
    canFilterConfig.FilterActivation = ENABLE;   // Activate the filter
 80009d4:	2301      	movs	r3, #1
 80009d6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (idType == CAN_ID_STD)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d109      	bne.n	80009f2 <CAN_ConfigFilter+0x3a>
    {
        // Configure the standard ID filter
        canFilterConfig.FilterIdHigh = id << 5; // Shift the ID left by 5 bits for the high part
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	015b      	lsls	r3, r3, #5
 80009e2:	613b      	str	r3, [r7, #16]
        canFilterConfig.FilterIdLow = 0x0000;   // Low part is not used for standard IDs
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
        // Set the mask for standard IDs (allow any ID matching the higher bits)
        canFilterConfig.FilterMaskIdHigh = 0xFFFF << 5; // Mask high part
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <CAN_ConfigFilter+0x7c>)
 80009ea:	61bb      	str	r3, [r7, #24]
        canFilterConfig.FilterMaskIdLow = 0x0000;       // Mask low part
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	e010      	b.n	8000a14 <CAN_ConfigFilter+0x5c>
    }
    else if (idType == CAN_ID_EXT)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b04      	cmp	r3, #4
 80009f6:	d10d      	bne.n	8000a14 <CAN_ConfigFilter+0x5c>
    {
        // Configure the extended ID filter
        canFilterConfig.FilterIdHigh = (id >> 13) & 0xFFFF; // Get the high part of the extended ID
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	0b5b      	lsrs	r3, r3, #13
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	613b      	str	r3, [r7, #16]
        canFilterConfig.FilterIdLow = (id << 3) & 0xFFFF;   // Get the low part of the extended ID
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	617b      	str	r3, [r7, #20]
        // Set the mask for extended IDs
        canFilterConfig.FilterMaskIdHigh = (0x1FFFFFFF >> 13) & 0xFFFF; // Max mask high part
 8000a08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a0c:	61bb      	str	r3, [r7, #24]
        canFilterConfig.FilterMaskIdLow = (0x1FFFFFFF << 3) & 0xFFFF;   // Max mask low part
 8000a0e:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000a12:	61fb      	str	r3, [r7, #28]
    }
    if (HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig) != HAL_OK)  // Configure the CAN filter with the defined settings
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4807      	ldr	r0, [pc, #28]	@ (8000a38 <CAN_ConfigFilter+0x80>)
 8000a1c:	f001 fd6a 	bl	80024f4 <HAL_CAN_ConfigFilter>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <CAN_ConfigFilter+0x72>
    {
        Error_Handler();
 8000a26:	f000 fb33 	bl	8001090 <Error_Handler>
    }
}
 8000a2a:	bf00      	nop
 8000a2c:	3738      	adds	r7, #56	@ 0x38
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	001fffe0 	.word	0x001fffe0
 8000a38:	200000d8 	.word	0x200000d8

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a40:	f000 ff7e 	bl	8001940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a44:	f000 f842 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a48:	f000 fad0 	bl	8000fec <MX_GPIO_Init>
  MX_DMA_Init();
 8000a4c:	f000 faae 	bl	8000fac <MX_DMA_Init>
  MX_ADC1_Init();
 8000a50:	f000 f8a4 	bl	8000b9c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000a54:	f000 f9ec 	bl	8000e30 <MX_TIM3_Init>
  MX_CAN1_Init();
 8000a58:	f000 f91e 	bl	8000c98 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000a5c:	f000 f952 	bl	8000d04 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000a60:	f000 fa34 	bl	8000ecc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000a64:	2100      	movs	r1, #0
 8000a66:	4815      	ldr	r0, [pc, #84]	@ (8000abc <main+0x80>)
 8000a68:	f004 f832 	bl	8004ad0 <HAL_TIM_IC_Start_IT>
  //simplify the timer configuration and interrupt handling code by using a single channel to capture both edges of the signal

  if (HAL_CAN_ActivateNotification(&hcan1,IRQ_Enable) != HAL_OK)  //activate the notification after successful transmission
 8000a6c:	217f      	movs	r1, #127	@ 0x7f
 8000a6e:	4814      	ldr	r0, [pc, #80]	@ (8000ac0 <main+0x84>)
 8000a70:	f002 f856 	bl	8002b20 <HAL_CAN_ActivateNotification>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <main+0x42>
  {
      Error_Handler();
 8000a7a:	f000 fb09 	bl	8001090 <Error_Handler>
  }
  HAL_TIM_Base_Start(&htim2);
 8000a7e:	4811      	ldr	r0, [pc, #68]	@ (8000ac4 <main+0x88>)
 8000a80:	f003 fe42 	bl	8004708 <HAL_TIM_Base_Start>
  HAL_CAN_Start(&hcan1);
 8000a84:	480e      	ldr	r0, [pc, #56]	@ (8000ac0 <main+0x84>)
 8000a86:	f001 fe15 	bl	80026b4 <HAL_CAN_Start>

  // Configuration of header of message CAN
  TxHeader.DLC=0x8U; // Length data (8 bytes )
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <main+0x8c>)
 8000a8c:	2208      	movs	r2, #8
 8000a8e:	611a      	str	r2, [r3, #16]
  TxHeader.IDE=CAN_ID_STD; // standard Identifier
 8000a90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <main+0x8c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  TxHeader.RTR=CAN_RTR_DATA; // Data frame
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <main+0x8c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  TxHeader.StdId=0x400U;// standard Identifier
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <main+0x8c>)
 8000a9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aa2:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime=DISABLE;   //not include a global timestamp
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <main+0x8c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	751a      	strb	r2, [r3, #20]
  CAN_ConfigFilter(0, 0x466, CAN_ID_STD);   //accepted ID  =0x466
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f240 4166 	movw	r1, #1126	@ 0x466
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff ff81 	bl	80009b8 <CAN_ConfigFilter>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ab6:	bf00      	nop
 8000ab8:	e7fd      	b.n	8000ab6 <main+0x7a>
 8000aba:	bf00      	nop
 8000abc:	20000190 	.word	0x20000190
 8000ac0:	200000d8 	.word	0x200000d8
 8000ac4:	20000100 	.word	0x20000100
 8000ac8:	200001d8 	.word	0x200001d8

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	@ 0x50
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	2230      	movs	r2, #48	@ 0x30
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f005 f982 	bl	8005de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <SystemClock_Config+0xc8>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	4a26      	ldr	r2, [pc, #152]	@ (8000b94 <SystemClock_Config+0xc8>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b00:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <SystemClock_Config+0xc8>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <SystemClock_Config+0xcc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a20      	ldr	r2, [pc, #128]	@ (8000b98 <SystemClock_Config+0xcc>)
 8000b16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <SystemClock_Config+0xcc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b30:	2310      	movs	r3, #16
 8000b32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b34:	2302      	movs	r3, #2
 8000b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000b40:	2350      	movs	r3, #80	@ 0x50
 8000b42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 f905 	bl	8003d60 <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b5c:	f000 fa98 	bl	8001090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	230f      	movs	r3, #15
 8000b62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b64:	2302      	movs	r3, #2
 8000b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b68:	2380      	movs	r3, #128	@ 0x80
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2101      	movs	r1, #1
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 fb68 	bl	8004250 <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b86:	f000 fa83 	bl	8001090 <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3750      	adds	r7, #80	@ 0x50
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40007000 	.word	0x40007000

08000b9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bae:	4b38      	ldr	r3, [pc, #224]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000bb0:	4a38      	ldr	r2, [pc, #224]	@ (8000c94 <MX_ADC1_Init+0xf8>)
 8000bb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bb4:	4b36      	ldr	r3, [pc, #216]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bba:	4b35      	ldr	r3, [pc, #212]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000bc0:	4b33      	ldr	r3, [pc, #204]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bc6:	4b32      	ldr	r3, [pc, #200]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 4;
 8000bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bda:	4b2d      	ldr	r3, [pc, #180]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000bdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000be0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000be2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000be4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000be8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bea:	4b29      	ldr	r3, [pc, #164]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000bf0:	4b27      	ldr	r3, [pc, #156]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bf6:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c04:	4822      	ldr	r0, [pc, #136]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000c06:	f000 ff0d 	bl	8001a24 <HAL_ADC_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_ADC1_Init+0x78>
  {
    Error_Handler();
 8000c10:	f000 fa3e 	bl	8001090 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c14:	2304      	movs	r3, #4
 8000c16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	481a      	ldr	r0, [pc, #104]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000c26:	f001 f8c9 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c30:	f000 fa2e 	bl	8001090 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c34:	2305      	movs	r3, #5
 8000c36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4813      	ldr	r0, [pc, #76]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000c42:	f001 f8bb 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000c4c:	f000 fa20 	bl	8001090 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c50:	2306      	movs	r3, #6
 8000c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000c54:	2303      	movs	r3, #3
 8000c56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000c5e:	f001 f8ad 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000c68:	f000 fa12 	bl	8001090 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000c70:	2304      	movs	r3, #4
 8000c72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_ADC1_Init+0xf4>)
 8000c7a:	f001 f89f 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000c84:	f000 fa04 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000030 	.word	0x20000030
 8000c94:	40012000 	.word	0x40012000

08000c98 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000c9e:	4a18      	ldr	r2, [pc, #96]	@ (8000d00 <MX_CAN1_Init+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000ca4:	220a      	movs	r2, #10
 8000ca6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000cb6:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000cba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000cbe:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cc2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_CAN1_Init+0x64>)
 8000cea:	f001 fb07 	bl	80022fc <HAL_CAN_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000cf4:	f000 f9cc 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200000d8 	.word	0x200000d8
 8000d00:	40006400 	.word	0x40006400

08000d04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	@ 0x38
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
 8000d30:	615a      	str	r2, [r3, #20]
 8000d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d34:	4b3d      	ldr	r3, [pc, #244]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000d36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8000d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000d3e:	2227      	movs	r2, #39	@ 0x27
 8000d40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b3a      	ldr	r3, [pc, #232]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d48:	4b38      	ldr	r3, [pc, #224]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000d4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d50:	4b36      	ldr	r3, [pc, #216]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	4b35      	ldr	r3, [pc, #212]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d5c:	4833      	ldr	r0, [pc, #204]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000d5e:	f003 fc83 	bl	8004668 <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d68:	f000 f992 	bl	8001090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d76:	4619      	mov	r1, r3
 8000d78:	482c      	ldr	r0, [pc, #176]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000d7a:	f004 fa1f 	bl	80051bc <HAL_TIM_ConfigClockSource>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d84:	f000 f984 	bl	8001090 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d88:	4828      	ldr	r0, [pc, #160]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000d8a:	f003 fd25 	bl	80047d8 <HAL_TIM_PWM_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d94:	f000 f97c 	bl	8001090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	4619      	mov	r1, r3
 8000da6:	4821      	ldr	r0, [pc, #132]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000da8:	f004 ff8c 	bl	8005cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000db2:	f000 f96d 	bl	8001090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db6:	2360      	movs	r3, #96	@ 0x60
 8000db8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4817      	ldr	r0, [pc, #92]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000dce:	f004 f933 	bl	8005038 <HAL_TIM_PWM_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000dd8:	f000 f95a 	bl	8001090 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2204      	movs	r2, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	4812      	ldr	r0, [pc, #72]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000de4:	f004 f928 	bl	8005038 <HAL_TIM_PWM_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000dee:	f000 f94f 	bl	8001090 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2208      	movs	r2, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000dfa:	f004 f91d 	bl	8005038 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000e04:	f000 f944 	bl	8001090 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4807      	ldr	r0, [pc, #28]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000e10:	f004 f912 	bl	8005038 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000e1a:	f000 f939 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e1e:	4803      	ldr	r0, [pc, #12]	@ (8000e2c <MX_TIM2_Init+0x128>)
 8000e20:	f000 faae 	bl	8001380 <HAL_TIM_MspPostInit>

}
 8000e24:	bf00      	nop
 8000e26:	3738      	adds	r7, #56	@ 0x38
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000100 	.word	0x20000100

08000e30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <MX_TIM3_Init+0x94>)
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec8 <MX_TIM3_Init+0x98>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39999;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <MX_TIM3_Init+0x94>)
 8000e54:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000e58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_TIM3_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <MX_TIM3_Init+0x94>)
 8000e62:	2263      	movs	r2, #99	@ 0x63
 8000e64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e66:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_TIM3_Init+0x94>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <MX_TIM3_Init+0x94>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e72:	4814      	ldr	r0, [pc, #80]	@ (8000ec4 <MX_TIM3_Init+0x94>)
 8000e74:	f003 fbf8 	bl	8004668 <HAL_TIM_Base_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f000 f907 	bl	8001090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480d      	ldr	r0, [pc, #52]	@ (8000ec4 <MX_TIM3_Init+0x94>)
 8000e90:	f004 f994 	bl	80051bc <HAL_TIM_ConfigClockSource>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e9a:	f000 f8f9 	bl	8001090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	@ (8000ec4 <MX_TIM3_Init+0x94>)
 8000eac:	f004 ff0a 	bl	8005cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000eb6:	f000 f8eb 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000148 	.word	0x20000148
 8000ec8:	40000400 	.word	0x40000400

08000ecc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa4 <MX_TIM5_Init+0xd8>)
 8000ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8000fa8 <MX_TIM5_Init+0xdc>)
 8000efa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 39;
 8000efc:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <MX_TIM5_Init+0xd8>)
 8000efe:	2227      	movs	r2, #39	@ 0x27
 8000f00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <MX_TIM5_Init+0xd8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f08:	4b26      	ldr	r3, [pc, #152]	@ (8000fa4 <MX_TIM5_Init+0xd8>)
 8000f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f10:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <MX_TIM5_Init+0xd8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <MX_TIM5_Init+0xd8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f1c:	4821      	ldr	r0, [pc, #132]	@ (8000fa4 <MX_TIM5_Init+0xd8>)
 8000f1e:	f003 fba3 	bl	8004668 <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8000f28:	f000 f8b2 	bl	8001090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f30:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f32:	f107 0318 	add.w	r3, r7, #24
 8000f36:	4619      	mov	r1, r3
 8000f38:	481a      	ldr	r0, [pc, #104]	@ (8000fa4 <MX_TIM5_Init+0xd8>)
 8000f3a:	f004 f93f 	bl	80051bc <HAL_TIM_ConfigClockSource>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000f44:	f000 f8a4 	bl	8001090 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000f48:	4816      	ldr	r0, [pc, #88]	@ (8000fa4 <MX_TIM5_Init+0xd8>)
 8000f4a:	f003 fd67 	bl	8004a1c <HAL_TIM_IC_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000f54:	f000 f89c 	bl	8001090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	4619      	mov	r1, r3
 8000f66:	480f      	ldr	r0, [pc, #60]	@ (8000fa4 <MX_TIM5_Init+0xd8>)
 8000f68:	f004 feac 	bl	8005cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8000f72:	f000 f88d 	bl	8001090 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000f76:	230a      	movs	r3, #10
 8000f78:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_TIM5_Init+0xd8>)
 8000f8e:	f003 ffb7 	bl	8004f00 <HAL_TIM_IC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8000f98:	f000 f87a 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	@ 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000190 	.word	0x20000190
 8000fa8:	40000c00 	.word	0x40000c00

08000fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_DMA_Init+0x3c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe8 <MX_DMA_Init+0x3c>)
 8000fbc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_DMA_Init+0x3c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2038      	movs	r0, #56	@ 0x38
 8000fd4:	f002 f8df 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fd8:	2038      	movs	r0, #56	@ 0x38
 8000fda:	f002 f8f8 	bl	80031ce <HAL_NVIC_EnableIRQ>

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <MX_GPIO_Init+0x9c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a1f      	ldr	r2, [pc, #124]	@ (8001088 <MX_GPIO_Init+0x9c>)
 800100c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <MX_GPIO_Init+0x9c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <MX_GPIO_Init+0x9c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a18      	ldr	r2, [pc, #96]	@ (8001088 <MX_GPIO_Init+0x9c>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <MX_GPIO_Init+0x9c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_GPIO_Init+0x9c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a11      	ldr	r2, [pc, #68]	@ (8001088 <MX_GPIO_Init+0x9c>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_GPIO_Init+0x9c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800105c:	480b      	ldr	r0, [pc, #44]	@ (800108c <MX_GPIO_Init+0xa0>)
 800105e:	f002 fe65 	bl	8003d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001062:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_GPIO_Init+0xa0>)
 800107c:	f002 fca2 	bl	80039c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40023800 	.word	0x40023800
 800108c:	40020c00 	.word	0x40020c00

08001090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001094:	b672      	cpsid	i
}
 8001096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <Error_Handler+0x8>

0800109c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <HAL_MspInit+0x4c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	4a0f      	ldr	r2, [pc, #60]	@ (80010e8 <HAL_MspInit+0x4c>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b2:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <HAL_MspInit+0x4c>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	4a08      	ldr	r2, [pc, #32]	@ (80010e8 <HAL_MspInit+0x4c>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a2f      	ldr	r2, [pc, #188]	@ (80011c8 <HAL_ADC_MspInit+0xdc>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d157      	bne.n	80011be <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b2e      	ldr	r3, [pc, #184]	@ (80011cc <HAL_ADC_MspInit+0xe0>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	4a2d      	ldr	r2, [pc, #180]	@ (80011cc <HAL_ADC_MspInit+0xe0>)
 8001118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111c:	6453      	str	r3, [r2, #68]	@ 0x44
 800111e:	4b2b      	ldr	r3, [pc, #172]	@ (80011cc <HAL_ADC_MspInit+0xe0>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <HAL_ADC_MspInit+0xe0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a26      	ldr	r2, [pc, #152]	@ (80011cc <HAL_ADC_MspInit+0xe0>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <HAL_ADC_MspInit+0xe0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001146:	23f0      	movs	r3, #240	@ 0xf0
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114a:	2303      	movs	r3, #3
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	481d      	ldr	r0, [pc, #116]	@ (80011d0 <HAL_ADC_MspInit+0xe4>)
 800115a:	f002 fc33 	bl	80039c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001160:	4a1d      	ldr	r2, [pc, #116]	@ (80011d8 <HAL_ADC_MspInit+0xec>)
 8001162:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001178:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800117c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001184:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001186:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001188:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800118c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001190:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001194:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800119c:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a2:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 80011a4:	f002 f82e 	bl	8003204 <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011ae:	f7ff ff6f 	bl	8001090 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a07      	ldr	r2, [pc, #28]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 80011b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80011b8:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <HAL_ADC_MspInit+0xe8>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	@ 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012000 	.word	0x40012000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	20000078 	.word	0x20000078
 80011d8:	40026410 	.word	0x40026410

080011dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <HAL_CAN_MspInit+0xa4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d13b      	bne.n	8001276 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <HAL_CAN_MspInit+0xa8>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	4a1f      	ldr	r2, [pc, #124]	@ (8001284 <HAL_CAN_MspInit+0xa8>)
 8001208:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800120c:	6413      	str	r3, [r2, #64]	@ 0x40
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_CAN_MspInit+0xa8>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <HAL_CAN_MspInit+0xa8>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a18      	ldr	r2, [pc, #96]	@ (8001284 <HAL_CAN_MspInit+0xa8>)
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_CAN_MspInit+0xa8>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001236:	2303      	movs	r3, #3
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001246:	2309      	movs	r3, #9
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	480d      	ldr	r0, [pc, #52]	@ (8001288 <HAL_CAN_MspInit+0xac>)
 8001252:	f002 fbb7 	bl	80039c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	2013      	movs	r0, #19
 800125c:	f001 ff9b 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001260:	2013      	movs	r0, #19
 8001262:	f001 ffb4 	bl	80031ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	2014      	movs	r0, #20
 800126c:	f001 ff93 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001270:	2014      	movs	r0, #20
 8001272:	f001 ffac 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	@ 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40006400 	.word	0x40006400
 8001284:	40023800 	.word	0x40023800
 8001288:	40020c00 	.word	0x40020c00

0800128c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	@ 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ac:	d10e      	bne.n	80012cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001370 <HAL_TIM_Base_MspInit+0xe4>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001370 <HAL_TIM_Base_MspInit+0xe4>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012be:	4b2c      	ldr	r3, [pc, #176]	@ (8001370 <HAL_TIM_Base_MspInit+0xe4>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80012ca:	e04c      	b.n	8001366 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a28      	ldr	r2, [pc, #160]	@ (8001374 <HAL_TIM_Base_MspInit+0xe8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d10e      	bne.n	80012f4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <HAL_TIM_Base_MspInit+0xe4>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a24      	ldr	r2, [pc, #144]	@ (8001370 <HAL_TIM_Base_MspInit+0xe4>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <HAL_TIM_Base_MspInit+0xe4>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
}
 80012f2:	e038      	b.n	8001366 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM5)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001378 <HAL_TIM_Base_MspInit+0xec>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d133      	bne.n	8001366 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <HAL_TIM_Base_MspInit+0xe4>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	4a1a      	ldr	r2, [pc, #104]	@ (8001370 <HAL_TIM_Base_MspInit+0xe4>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	6413      	str	r3, [r2, #64]	@ 0x40
 800130e:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <HAL_TIM_Base_MspInit+0xe4>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <HAL_TIM_Base_MspInit+0xe4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a13      	ldr	r2, [pc, #76]	@ (8001370 <HAL_TIM_Base_MspInit+0xe4>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_TIM_Base_MspInit+0xe4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001336:	2301      	movs	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001346:	2302      	movs	r3, #2
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	480a      	ldr	r0, [pc, #40]	@ (800137c <HAL_TIM_Base_MspInit+0xf0>)
 8001352:	f002 fb37 	bl	80039c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	2032      	movs	r0, #50	@ 0x32
 800135c:	f001 ff1b 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001360:	2032      	movs	r0, #50	@ 0x32
 8001362:	f001 ff34 	bl	80031ce <HAL_NVIC_EnableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3730      	adds	r7, #48	@ 0x30
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40000400 	.word	0x40000400
 8001378:	40000c00 	.word	0x40000c00
 800137c:	40020000 	.word	0x40020000

08001380 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013a0:	d11e      	bne.n	80013e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <HAL_TIM_MspPostInit+0x68>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a0f      	ldr	r2, [pc, #60]	@ (80013e8 <HAL_TIM_MspPostInit+0x68>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <HAL_TIM_MspPostInit+0x68>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80013be:	f248 030e 	movw	r3, #32782	@ 0x800e
 80013c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	4619      	mov	r1, r3
 80013da:	4804      	ldr	r0, [pc, #16]	@ (80013ec <HAL_TIM_MspPostInit+0x6c>)
 80013dc:	f002 faf2 	bl	80039c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <NMI_Handler+0x4>

080013f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <MemManage_Handler+0x4>

08001408 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <UsageFault_Handler+0x4>

08001418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001446:	f000 facd 	bl	80019e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <CAN1_TX_IRQHandler+0x10>)
 8001456:	f001 fb89 	bl	8002b6c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200000d8 	.word	0x200000d8

08001464 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

    // Check if a CAN message has been received successfully
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, Rx_Data) == HAL_OK)
 800146a:	4b9c      	ldr	r3, [pc, #624]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800146c:	4a9c      	ldr	r2, [pc, #624]	@ (80016e0 <CAN1_RX0_IRQHandler+0x27c>)
 800146e:	2100      	movs	r1, #0
 8001470:	489c      	ldr	r0, [pc, #624]	@ (80016e4 <CAN1_RX0_IRQHandler+0x280>)
 8001472:	f001 fa33 	bl	80028dc <HAL_CAN_GetRxMessage>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	f040 81de 	bne.w	800183a <CAN1_RX0_IRQHandler+0x3d6>
    {
        switch (Rx_Data[0]) // Module ID = Rx_Data[0]
 800147e:	4b97      	ldr	r3, [pc, #604]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	3b01      	subs	r3, #1
 8001484:	2b03      	cmp	r3, #3
 8001486:	f200 81ca 	bhi.w	800181e <CAN1_RX0_IRQHandler+0x3ba>
 800148a:	a201      	add	r2, pc, #4	@ (adr r2, 8001490 <CAN1_RX0_IRQHandler+0x2c>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	080014a1 	.word	0x080014a1
 8001494:	08001533 	.word	0x08001533
 8001498:	08001631 	.word	0x08001631
 800149c:	08001751 	.word	0x08001751
        {
            case module_GPIO_led_ID:  // Module ID for GPIO LED control
                switch (Rx_Data[1])  // Routine ID = Rx_Data[1]
 80014a0:	4b8e      	ldr	r3, [pc, #568]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80014a2:	785b      	ldrb	r3, [r3, #1]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d002      	beq.n	80014ae <CAN1_RX0_IRQHandler+0x4a>
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d01b      	beq.n	80014e4 <CAN1_RX0_IRQHandler+0x80>
 80014ac:	e032      	b.n	8001514 <CAN1_RX0_IRQHandler+0xb0>
                {
                    case LED_Set_Val: // Set LED value
                        ReturnStatus = Control_LED(Rx_Data[2], Rx_Data[3]);
 80014ae:	4b8b      	ldr	r3, [pc, #556]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80014b0:	789b      	ldrb	r3, [r3, #2]
 80014b2:	4a8a      	ldr	r2, [pc, #552]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80014b4:	78d2      	ldrb	r2, [r2, #3]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe fffd 	bl	80004b8 <Control_LED>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b89      	ldr	r3, [pc, #548]	@ (80016e8 <CAN1_RX0_IRQHandler+0x284>)
 80014c4:	701a      	strb	r2, [r3, #0]
                        Rx_Data[0] += 0x40U;  // Mark as response
 80014c6:	4b85      	ldr	r3, [pc, #532]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	3340      	adds	r3, #64	@ 0x40
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b83      	ldr	r3, [pc, #524]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80014d0:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = ReturnStatus;
 80014d2:	4b85      	ldr	r3, [pc, #532]	@ (80016e8 <CAN1_RX0_IRQHandler+0x284>)
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	4b81      	ldr	r3, [pc, #516]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80014d8:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 80014da:	2108      	movs	r1, #8
 80014dc:	487f      	ldr	r0, [pc, #508]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80014de:	f7ff f831 	bl	8000544 <Send_CAN_Message>
                        break;
 80014e2:	e025      	b.n	8001530 <CAN1_RX0_IRQHandler+0xcc>

                    case LED_Get_Val: // Get LED value
                        bitstatus = Read_LED(Rx_Data[2]);
 80014e4:	4b7d      	ldr	r3, [pc, #500]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80014e6:	789b      	ldrb	r3, [r3, #2]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f80b 	bl	8000504 <Read_LED>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b7e      	ldr	r3, [pc, #504]	@ (80016ec <CAN1_RX0_IRQHandler+0x288>)
 80014f4:	701a      	strb	r2, [r3, #0]
                        Rx_Data[0] += 0x40U;  // Mark as response
 80014f6:	4b79      	ldr	r3, [pc, #484]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	3340      	adds	r3, #64	@ 0x40
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b77      	ldr	r3, [pc, #476]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001500:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = (uint8_t)bitstatus;  // Update with the state of the LED
 8001502:	4b7a      	ldr	r3, [pc, #488]	@ (80016ec <CAN1_RX0_IRQHandler+0x288>)
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	4b75      	ldr	r3, [pc, #468]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001508:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 800150a:	2108      	movs	r1, #8
 800150c:	4873      	ldr	r0, [pc, #460]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800150e:	f7ff f819 	bl	8000544 <Send_CAN_Message>
                        break;
 8001512:	e00d      	b.n	8001530 <CAN1_RX0_IRQHandler+0xcc>

                    default:
                        // Routine ID not defined
                        Rx_Data[0] += 0x40U;
 8001514:	4b71      	ldr	r3, [pc, #452]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	3340      	adds	r3, #64	@ 0x40
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b6f      	ldr	r3, [pc, #444]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800151e:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = Routine_ID_not_defined;
 8001520:	4b6e      	ldr	r3, [pc, #440]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001522:	22ff      	movs	r2, #255	@ 0xff
 8001524:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);
 8001526:	2108      	movs	r1, #8
 8001528:	486c      	ldr	r0, [pc, #432]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800152a:	f7ff f80b 	bl	8000544 <Send_CAN_Message>
                        break;
 800152e:	bf00      	nop
                }
                break;
 8001530:	e183      	b.n	800183a <CAN1_RX0_IRQHandler+0x3d6>

            case module_PWM_control_ID:  // Module ID for PWM control
                switch (Rx_Data[1])  // Routine ID = Rx_Data[1]
 8001532:	4b6a      	ldr	r3, [pc, #424]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001534:	785b      	ldrb	r3, [r3, #1]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d002      	beq.n	8001540 <CAN1_RX0_IRQHandler+0xdc>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d028      	beq.n	8001590 <CAN1_RX0_IRQHandler+0x12c>
 800153e:	e068      	b.n	8001612 <CAN1_RX0_IRQHandler+0x1ae>
                {
                    case PWM_Set_Freq: // Set PWM frequency
                        ReturnStatus = Set_PWM_output(
 8001540:	4b66      	ldr	r3, [pc, #408]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001542:	7898      	ldrb	r0, [r3, #2]
                            Rx_Data[2],
                            (Rx_Data[3] << 8) | Rx_Data[4],
 8001544:	4b65      	ldr	r3, [pc, #404]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001546:	78db      	ldrb	r3, [r3, #3]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b63      	ldr	r3, [pc, #396]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800154e:	791b      	ldrb	r3, [r3, #4]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21b      	sxth	r3, r3
                        ReturnStatus = Set_PWM_output(
 8001556:	b299      	uxth	r1, r3
                            (Rx_Data[5] << 8) | Rx_Data[6]
 8001558:	4b60      	ldr	r3, [pc, #384]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800155a:	795b      	ldrb	r3, [r3, #5]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	4a5f      	ldr	r2, [pc, #380]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001560:	7992      	ldrb	r2, [r2, #6]
 8001562:	4313      	orrs	r3, r2
                        ReturnStatus = Set_PWM_output(
 8001564:	461a      	mov	r2, r3
 8001566:	f7ff f80b 	bl	8000580 <Set_PWM_output>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	4b5e      	ldr	r3, [pc, #376]	@ (80016e8 <CAN1_RX0_IRQHandler+0x284>)
 8001570:	701a      	strb	r2, [r3, #0]
                        );
                        Rx_Data[0] += 0x40U;  // Mark as response
 8001572:	4b5a      	ldr	r3, [pc, #360]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	3340      	adds	r3, #64	@ 0x40
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b58      	ldr	r3, [pc, #352]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800157c:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = ReturnStatus;
 800157e:	4b5a      	ldr	r3, [pc, #360]	@ (80016e8 <CAN1_RX0_IRQHandler+0x284>)
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	4b56      	ldr	r3, [pc, #344]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001584:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 8001586:	2108      	movs	r1, #8
 8001588:	4854      	ldr	r0, [pc, #336]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800158a:	f7fe ffdb 	bl	8000544 <Send_CAN_Message>
                        break;
 800158e:	e04e      	b.n	800162e <CAN1_RX0_IRQHandler+0x1ca>

                    case PWM_Get_Freq: // Get PWM frequency and duty cycle
                        status = Get_PWM_output(Rx_Data[2], &duty_cycle, &frequency);
 8001590:	4b52      	ldr	r3, [pc, #328]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001592:	789b      	ldrb	r3, [r3, #2]
 8001594:	4a56      	ldr	r2, [pc, #344]	@ (80016f0 <CAN1_RX0_IRQHandler+0x28c>)
 8001596:	4957      	ldr	r1, [pc, #348]	@ (80016f4 <CAN1_RX0_IRQHandler+0x290>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff f87f 	bl	800069c <Get_PWM_output>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b55      	ldr	r3, [pc, #340]	@ (80016f8 <CAN1_RX0_IRQHandler+0x294>)
 80015a4:	701a      	strb	r2, [r3, #0]
                        if (status == 0U)
 80015a6:	4b54      	ldr	r3, [pc, #336]	@ (80016f8 <CAN1_RX0_IRQHandler+0x294>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d122      	bne.n	80015f4 <CAN1_RX0_IRQHandler+0x190>
                        {
                            // Successfully retrieved PWM configuration
                            // Populate the response data
                            Rx_Data[0] += 0x40U;  // Mark as response
 80015ae:	4b4b      	ldr	r3, [pc, #300]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3340      	adds	r3, #64	@ 0x40
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b49      	ldr	r3, [pc, #292]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80015b8:	701a      	strb	r2, [r3, #0]
                            Rx_Data[6] = (uint8_t)frequency;
 80015ba:	4b4d      	ldr	r3, [pc, #308]	@ (80016f0 <CAN1_RX0_IRQHandler+0x28c>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b46      	ldr	r3, [pc, #280]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80015c2:	719a      	strb	r2, [r3, #6]
                            Rx_Data[5] = (uint8_t)(frequency >> 8);
 80015c4:	4b4a      	ldr	r3, [pc, #296]	@ (80016f0 <CAN1_RX0_IRQHandler+0x28c>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4b43      	ldr	r3, [pc, #268]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80015d0:	715a      	strb	r2, [r3, #5]
                            Rx_Data[4] = (uint8_t)duty_cycle;
 80015d2:	4b48      	ldr	r3, [pc, #288]	@ (80016f4 <CAN1_RX0_IRQHandler+0x290>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b40      	ldr	r3, [pc, #256]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80015da:	711a      	strb	r2, [r3, #4]
                            Rx_Data[3] = (uint8_t)(duty_cycle >> 8);
 80015dc:	4b45      	ldr	r3, [pc, #276]	@ (80016f4 <CAN1_RX0_IRQHandler+0x290>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b3d      	ldr	r3, [pc, #244]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80015e8:	70da      	strb	r2, [r3, #3]
                            Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 80015ea:	2108      	movs	r1, #8
 80015ec:	483b      	ldr	r0, [pc, #236]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80015ee:	f7fe ffa9 	bl	8000544 <Send_CAN_Message>
                        {
                            Rx_Data[0] += 0x40U;
                            Rx_Data[7] = status;  // Error code
                            Send_CAN_Message(Rx_Data, 0x8U);  // Send response with error
                        }
                        break;
 80015f2:	e01c      	b.n	800162e <CAN1_RX0_IRQHandler+0x1ca>
                            Rx_Data[0] += 0x40U;
 80015f4:	4b39      	ldr	r3, [pc, #228]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3340      	adds	r3, #64	@ 0x40
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b37      	ldr	r3, [pc, #220]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80015fe:	701a      	strb	r2, [r3, #0]
                            Rx_Data[7] = status;  // Error code
 8001600:	4b3d      	ldr	r3, [pc, #244]	@ (80016f8 <CAN1_RX0_IRQHandler+0x294>)
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	4b35      	ldr	r3, [pc, #212]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001606:	71da      	strb	r2, [r3, #7]
                            Send_CAN_Message(Rx_Data, 0x8U);  // Send response with error
 8001608:	2108      	movs	r1, #8
 800160a:	4834      	ldr	r0, [pc, #208]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800160c:	f7fe ff9a 	bl	8000544 <Send_CAN_Message>
                        break;
 8001610:	e00d      	b.n	800162e <CAN1_RX0_IRQHandler+0x1ca>

                    default:
                        // Routine ID not defined
                        Rx_Data[0] += 0x40U;
 8001612:	4b32      	ldr	r3, [pc, #200]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	3340      	adds	r3, #64	@ 0x40
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b30      	ldr	r3, [pc, #192]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800161c:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = Routine_ID_not_defined;
 800161e:	4b2f      	ldr	r3, [pc, #188]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001620:	22ff      	movs	r2, #255	@ 0xff
 8001622:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);
 8001624:	2108      	movs	r1, #8
 8001626:	482d      	ldr	r0, [pc, #180]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001628:	f7fe ff8c 	bl	8000544 <Send_CAN_Message>
                        break;
 800162c:	bf00      	nop
                }
                break;
 800162e:	e104      	b.n	800183a <CAN1_RX0_IRQHandler+0x3d6>

            case module_ADC_DMA_control_ID:  // Module ID for ADC DMA
                switch (Rx_Data[1])  // Routine ID = Rx_Data[1]
 8001630:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d065      	beq.n	8001704 <CAN1_RX0_IRQHandler+0x2a0>
 8001638:	2b03      	cmp	r3, #3
 800163a:	dc7a      	bgt.n	8001732 <CAN1_RX0_IRQHandler+0x2ce>
 800163c:	2b01      	cmp	r3, #1
 800163e:	d002      	beq.n	8001646 <CAN1_RX0_IRQHandler+0x1e2>
 8001640:	2b02      	cmp	r3, #2
 8001642:	d019      	beq.n	8001678 <CAN1_RX0_IRQHandler+0x214>
 8001644:	e075      	b.n	8001732 <CAN1_RX0_IRQHandler+0x2ce>
                {
                    case ADC_start:
                        Rx_Data[0] += 0x40U;  // Mark as response
 8001646:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	3340      	adds	r3, #64	@ 0x40
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001650:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = 0U;
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001654:	2200      	movs	r2, #0
 8001656:	71da      	strb	r2, [r3, #7]
                        if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, (uint32_t)BUFFER_SIZE) != HAL_OK)
 8001658:	2204      	movs	r2, #4
 800165a:	4928      	ldr	r1, [pc, #160]	@ (80016fc <CAN1_RX0_IRQHandler+0x298>)
 800165c:	4828      	ldr	r0, [pc, #160]	@ (8001700 <CAN1_RX0_IRQHandler+0x29c>)
 800165e:	f000 fa25 	bl	8001aac <HAL_ADC_Start_DMA>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <CAN1_RX0_IRQHandler+0x20a>
                        {
                            Rx_Data[7] = Driver_error;
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800166a:	22fb      	movs	r2, #251	@ 0xfb
 800166c:	71da      	strb	r2, [r3, #7]
                        }
                        Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 800166e:	2108      	movs	r1, #8
 8001670:	481a      	ldr	r0, [pc, #104]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 8001672:	f7fe ff67 	bl	8000544 <Send_CAN_Message>
                        break;
 8001676:	e06a      	b.n	800174e <CAN1_RX0_IRQHandler+0x2ea>

                    case ADC_get_values: // Get conversion values
                    {
                        uint8_t channel_index = Rx_Data[2];
 8001678:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	70fb      	strb	r3, [r7, #3]
                        if (channel_index >= 4 && channel_index <= 7)
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	2b03      	cmp	r3, #3
 8001682:	d91c      	bls.n	80016be <CAN1_RX0_IRQHandler+0x25a>
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	2b07      	cmp	r3, #7
 8001688:	d819      	bhi.n	80016be <CAN1_RX0_IRQHandler+0x25a>
                        {
                            uint16_t adc_value = adc_buffer[channel_index - 4]; // Extract value of chosen channel
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	3b04      	subs	r3, #4
 800168e:	4a1b      	ldr	r2, [pc, #108]	@ (80016fc <CAN1_RX0_IRQHandler+0x298>)
 8001690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001694:	803b      	strh	r3, [r7, #0]
                            Rx_Data[3] = (uint8_t)(adc_value & 0xFF); // Low byte
 8001696:	883b      	ldrh	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 800169c:	70da      	strb	r2, [r3, #3]
                            Rx_Data[4] = (uint8_t)((adc_value >> 8) & 0xFF); // High byte
 800169e:	883b      	ldrh	r3, [r7, #0]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80016a8:	711a      	strb	r2, [r3, #4]
                            Rx_Data[0] += 0x40U;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	3340      	adds	r3, #64	@ 0x40
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80016b4:	701a      	strb	r2, [r3, #0]
                            Rx_Data[7] = 0U; // Success
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	71da      	strb	r2, [r3, #7]
                        {
 80016bc:	e008      	b.n	80016d0 <CAN1_RX0_IRQHandler+0x26c>
                        }
                        else
                        {
                            Rx_Data[0] += 0x40U;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	3340      	adds	r3, #64	@ 0x40
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80016c8:	701a      	strb	r2, [r3, #0]
                            Rx_Data[7] = Bad_parameter; // Invalid channel
 80016ca:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80016cc:	22fe      	movs	r2, #254	@ 0xfe
 80016ce:	71da      	strb	r2, [r3, #7]
                        }
                        Send_CAN_Message(Rx_Data, 0x8U); // Send response
 80016d0:	2108      	movs	r1, #8
 80016d2:	4802      	ldr	r0, [pc, #8]	@ (80016dc <CAN1_RX0_IRQHandler+0x278>)
 80016d4:	f7fe ff36 	bl	8000544 <Send_CAN_Message>
                    }
                    break;
 80016d8:	e039      	b.n	800174e <CAN1_RX0_IRQHandler+0x2ea>
 80016da:	bf00      	nop
 80016dc:	2000020c 	.word	0x2000020c
 80016e0:	200001f0 	.word	0x200001f0
 80016e4:	200000d8 	.word	0x200000d8
 80016e8:	20000245 	.word	0x20000245
 80016ec:	20000244 	.word	0x20000244
 80016f0:	2000024a 	.word	0x2000024a
 80016f4:	20000248 	.word	0x20000248
 80016f8:	20000246 	.word	0x20000246
 80016fc:	2000023c 	.word	0x2000023c
 8001700:	20000030 	.word	0x20000030

                    case ADC_stop:
                        Rx_Data[0] += 0x40U;  // Mark as response
 8001704:	4b52      	ldr	r3, [pc, #328]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	3340      	adds	r3, #64	@ 0x40
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b50      	ldr	r3, [pc, #320]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 800170e:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = 0U;
 8001710:	4b4f      	ldr	r3, [pc, #316]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 8001712:	2200      	movs	r2, #0
 8001714:	71da      	strb	r2, [r3, #7]
                        if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8001716:	484f      	ldr	r0, [pc, #316]	@ (8001854 <CAN1_RX0_IRQHandler+0x3f0>)
 8001718:	f000 fad8 	bl	8001ccc <HAL_ADC_Stop_DMA>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <CAN1_RX0_IRQHandler+0x2c4>
                        {
                            Rx_Data[7] = Driver_error;
 8001722:	4b4b      	ldr	r3, [pc, #300]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 8001724:	22fb      	movs	r2, #251	@ 0xfb
 8001726:	71da      	strb	r2, [r3, #7]
                        }
                        Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 8001728:	2108      	movs	r1, #8
 800172a:	4849      	ldr	r0, [pc, #292]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 800172c:	f7fe ff0a 	bl	8000544 <Send_CAN_Message>
                        break;
 8001730:	e00d      	b.n	800174e <CAN1_RX0_IRQHandler+0x2ea>

                    default:
                        // Routine ID not defined
                        Rx_Data[0] += 0x40U;
 8001732:	4b47      	ldr	r3, [pc, #284]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	3340      	adds	r3, #64	@ 0x40
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b45      	ldr	r3, [pc, #276]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 800173c:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = Routine_ID_not_defined;
 800173e:	4b44      	ldr	r3, [pc, #272]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 8001740:	22ff      	movs	r2, #255	@ 0xff
 8001742:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);
 8001744:	2108      	movs	r1, #8
 8001746:	4842      	ldr	r0, [pc, #264]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 8001748:	f7fe fefc 	bl	8000544 <Send_CAN_Message>
                        break;
 800174c:	bf00      	nop
                }
                break;
 800174e:	e074      	b.n	800183a <CAN1_RX0_IRQHandler+0x3d6>

            case module_PWM_Input:  // Module ID for PWM Input
                switch (Rx_Data[1])  // Routine ID = Rx_Data[1]
 8001750:	4b3f      	ldr	r3, [pc, #252]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 8001752:	785b      	ldrb	r3, [r3, #1]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d153      	bne.n	8001800 <CAN1_RX0_IRQHandler+0x39c>
                {
                    case PWM_Input_Get: // Get PWM Input values
                        pwm = Handle_TIM_IC_Capture(channel);
 8001758:	4b3f      	ldr	r3, [pc, #252]	@ (8001858 <CAN1_RX0_IRQHandler+0x3f4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff f811 	bl	8000784 <Handle_TIM_IC_Capture>
 8001762:	4602      	mov	r2, r0
 8001764:	4b3d      	ldr	r3, [pc, #244]	@ (800185c <CAN1_RX0_IRQHandler+0x3f8>)
 8001766:	4611      	mov	r1, r2
 8001768:	8019      	strh	r1, [r3, #0]
 800176a:	f3c2 420f 	ubfx	r2, r2, #16, #16
 800176e:	805a      	strh	r2, [r3, #2]
                    	//pwm = Handle_PWM_Input();
                        if (pwm.dutyCycle > 0.0f && pwm.frequency > 0.0f)
 8001770:	4b3a      	ldr	r3, [pc, #232]	@ (800185c <CAN1_RX0_IRQHandler+0x3f8>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001784:	dd2e      	ble.n	80017e4 <CAN1_RX0_IRQHandler+0x380>
 8001786:	4b35      	ldr	r3, [pc, #212]	@ (800185c <CAN1_RX0_IRQHandler+0x3f8>)
 8001788:	885b      	ldrh	r3, [r3, #2]
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001792:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179a:	dd23      	ble.n	80017e4 <CAN1_RX0_IRQHandler+0x380>
                        {
                        	// Convert float values to integers
                            uint16_t dutyCycle_int = (uint16_t)pwm.dutyCycle;
 800179c:	4b2f      	ldr	r3, [pc, #188]	@ (800185c <CAN1_RX0_IRQHandler+0x3f8>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	80fb      	strh	r3, [r7, #6]
                            uint16_t frequency_int = (uint16_t)pwm.frequency;
 80017a2:	4b2e      	ldr	r3, [pc, #184]	@ (800185c <CAN1_RX0_IRQHandler+0x3f8>)
 80017a4:	885b      	ldrh	r3, [r3, #2]
 80017a6:	80bb      	strh	r3, [r7, #4]

                            // Successfully retrieved PWM configuration
                            // Populate the response data
                            Rx_Data[0] += 0x40U;  // Mark as response
 80017a8:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	3340      	adds	r3, #64	@ 0x40
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 80017b2:	701a      	strb	r2, [r3, #0]
                            Rx_Data[6] = (uint8_t)(frequency_int & 0xFF); // Low byte of frequency
 80017b4:	88bb      	ldrh	r3, [r7, #4]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b25      	ldr	r3, [pc, #148]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 80017ba:	719a      	strb	r2, [r3, #6]
                            Rx_Data[5] = (uint8_t)((frequency_int >> 8) & 0xFF); // High byte of frequency
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b22      	ldr	r3, [pc, #136]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 80017c6:	715a      	strb	r2, [r3, #5]
                            Rx_Data[4] = (uint8_t)(dutyCycle_int & 0xFF); // Low byte of duty cycle
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 80017ce:	711a      	strb	r2, [r3, #4]
                            Rx_Data[3] = (uint8_t)((dutyCycle_int >> 8) & 0xFF); // High byte of duty cycle
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 80017da:	70da      	strb	r2, [r3, #3]
                            Rx_Data[7] = 0U; // No error
 80017dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 80017de:	2200      	movs	r2, #0
 80017e0:	71da      	strb	r2, [r3, #7]
                        {
 80017e2:	e008      	b.n	80017f6 <CAN1_RX0_IRQHandler+0x392>
                        }
                        else
                        {
                            Rx_Data[0] += 0x40U;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	3340      	adds	r3, #64	@ 0x40
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 80017ee:	701a      	strb	r2, [r3, #0]
                            Rx_Data[7] = Driver_error;  // Error code
 80017f0:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 80017f2:	22fb      	movs	r2, #251	@ 0xfb
 80017f4:	71da      	strb	r2, [r3, #7]
                        }
                        Send_CAN_Message(Rx_Data, 0x8U);  // Send response
 80017f6:	2108      	movs	r1, #8
 80017f8:	4815      	ldr	r0, [pc, #84]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 80017fa:	f7fe fea3 	bl	8000544 <Send_CAN_Message>
                        break;
 80017fe:	e00d      	b.n	800181c <CAN1_RX0_IRQHandler+0x3b8>

                    default:
                        // Routine ID not defined
                        Rx_Data[0] += 0x40U;
 8001800:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	3340      	adds	r3, #64	@ 0x40
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 800180a:	701a      	strb	r2, [r3, #0]
                        Rx_Data[7] = Routine_ID_not_defined;
 800180c:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 800180e:	22ff      	movs	r2, #255	@ 0xff
 8001810:	71da      	strb	r2, [r3, #7]
                        Send_CAN_Message(Rx_Data, 0x8U);
 8001812:	2108      	movs	r1, #8
 8001814:	480e      	ldr	r0, [pc, #56]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 8001816:	f7fe fe95 	bl	8000544 <Send_CAN_Message>
                        break;
 800181a:	bf00      	nop
                }
                break;
 800181c:	e00d      	b.n	800183a <CAN1_RX0_IRQHandler+0x3d6>

            default:
                // Module ID not defined
                Rx_Data[0] += 0x40U;
 800181e:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	3340      	adds	r3, #64	@ 0x40
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 8001828:	701a      	strb	r2, [r3, #0]
                Rx_Data[7] = Module_ID_not_defined;
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 800182c:	22fa      	movs	r2, #250	@ 0xfa
 800182e:	71da      	strb	r2, [r3, #7]
                Send_CAN_Message(Rx_Data, 0x8U);
 8001830:	2108      	movs	r1, #8
 8001832:	4807      	ldr	r0, [pc, #28]	@ (8001850 <CAN1_RX0_IRQHandler+0x3ec>)
 8001834:	f7fe fe86 	bl	8000544 <Send_CAN_Message>
                break;
 8001838:	bf00      	nop
        }
    }

    // Call the default CAN interrupt handler
    HAL_CAN_IRQHandler(&hcan1);
 800183a:	4809      	ldr	r0, [pc, #36]	@ (8001860 <CAN1_RX0_IRQHandler+0x3fc>)
 800183c:	f001 f996 	bl	8002b6c <HAL_CAN_IRQHandler>

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001840:	4807      	ldr	r0, [pc, #28]	@ (8001860 <CAN1_RX0_IRQHandler+0x3fc>)
 8001842:	f001 f993 	bl	8002b6c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000020c 	.word	0x2000020c
 8001854:	20000030 	.word	0x20000030
 8001858:	2000024c 	.word	0x2000024c
 800185c:	20000228 	.word	0x20000228
 8001860:	200000d8 	.word	0x200000d8

08001864 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	//int a;
  /* USER CODE BEGIN TIM5_IRQn 0 */
    // Vérifier si l'interruption est due à un événement de capture
    if (__HAL_TIM_GET_FLAG(&htim5, TIM_FLAG_CC1) != RESET)
 8001868:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <TIM5_IRQHandler+0x48>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b02      	cmp	r3, #2
 8001874:	d115      	bne.n	80018a2 <TIM5_IRQHandler+0x3e>
    {
        if (__HAL_TIM_GET_IT_SOURCE(&htim5, TIM_IT_CC1) != RESET)
 8001876:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <TIM5_IRQHandler+0x48>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b02      	cmp	r3, #2
 8001882:	d10e      	bne.n	80018a2 <TIM5_IRQHandler+0x3e>
        {
            __HAL_TIM_CLEAR_IT(&htim5, TIM_IT_CC1);
 8001884:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <TIM5_IRQHandler+0x48>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0202 	mvn.w	r2, #2
 800188c:	611a      	str	r2, [r3, #16]
            pwm = Handle_TIM_IC_Capture( TIM_CHANNEL_1);
 800188e:	2000      	movs	r0, #0
 8001890:	f7fe ff78 	bl	8000784 <Handle_TIM_IC_Capture>
 8001894:	4602      	mov	r2, r0
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <TIM5_IRQHandler+0x4c>)
 8001898:	4611      	mov	r1, r2
 800189a:	8019      	strh	r1, [r3, #0]
 800189c:	f3c2 420f 	ubfx	r2, r2, #16, #16
 80018a0:	805a      	strh	r2, [r3, #2]
	if(x == GPIO_PIN_SET)
	{
		a++;
	}*/
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80018a2:	4802      	ldr	r0, [pc, #8]	@ (80018ac <TIM5_IRQHandler+0x48>)
 80018a4:	f003 fa3c 	bl	8004d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000190 	.word	0x20000190
 80018b0:	20000228 	.word	0x20000228

080018b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <DMA2_Stream0_IRQHandler+0x10>)
 80018ba:	f001 fe19 	bl	80034f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000078 	.word	0x20000078

080018c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001924 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018f0:	f7ff ffea 	bl	80018c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f4:	480c      	ldr	r0, [pc, #48]	@ (8001928 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f6:	490d      	ldr	r1, [pc, #52]	@ (800192c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018fc:	e002      	b.n	8001904 <LoopCopyDataInit>

080018fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001902:	3304      	adds	r3, #4

08001904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001908:	d3f9      	bcc.n	80018fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800190c:	4c0a      	ldr	r4, [pc, #40]	@ (8001938 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001910:	e001      	b.n	8001916 <LoopFillZerobss>

08001912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001914:	3204      	adds	r2, #4

08001916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001918:	d3fb      	bcc.n	8001912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800191a:	f004 fa6b 	bl	8005df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191e:	f7ff f88d 	bl	8000a3c <main>
  bx  lr    
 8001922:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001930:	08005e84 	.word	0x08005e84
  ldr r2, =_sbss
 8001934:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001938:	20000254 	.word	0x20000254

0800193c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC_IRQHandler>
	...

08001940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001944:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0d      	ldr	r2, [pc, #52]	@ (8001980 <HAL_Init+0x40>)
 800194a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800194e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <HAL_Init+0x40>)
 8001956:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800195a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a07      	ldr	r2, [pc, #28]	@ (8001980 <HAL_Init+0x40>)
 8001962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001968:	2003      	movs	r0, #3
 800196a:	f001 fc09 	bl	8003180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196e:	200f      	movs	r0, #15
 8001970:	f000 f808 	bl	8001984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001974:	f7ff fb92 	bl	800109c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023c00 	.word	0x40023c00

08001984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_InitTick+0x54>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <HAL_InitTick+0x58>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800199a:	fbb3 f3f1 	udiv	r3, r3, r1
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 fc21 	bl	80031ea <HAL_SYSTICK_Config>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00e      	b.n	80019d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b0f      	cmp	r3, #15
 80019b6:	d80a      	bhi.n	80019ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b8:	2200      	movs	r2, #0
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f001 fbe9 	bl	8003196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c4:	4a06      	ldr	r2, [pc, #24]	@ (80019e0 <HAL_InitTick+0x5c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e000      	b.n	80019d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000010 	.word	0x20000010
 80019e0:	2000000c 	.word	0x2000000c

080019e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_IncTick+0x20>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_IncTick+0x24>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <HAL_IncTick+0x24>)
 80019f6:	6013      	str	r3, [r2, #0]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000010 	.word	0x20000010
 8001a08:	20000250 	.word	0x20000250

08001a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a10:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <HAL_GetTick+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000250 	.word	0x20000250

08001a24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e033      	b.n	8001aa2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fb52 	bl	80010ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d118      	bne.n	8001a94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a6a:	f023 0302 	bic.w	r3, r3, #2
 8001a6e:	f043 0202 	orr.w	r2, r3, #2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fac2 	bl	8002000 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f023 0303 	bic.w	r3, r3, #3
 8001a8a:	f043 0201 	orr.w	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a92:	e001      	b.n	8001a98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Start_DMA+0x1e>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e0e9      	b.n	8001c9e <HAL_ADC_Start_DMA+0x1f2>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d018      	beq.n	8001b12 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001af0:	4b6d      	ldr	r3, [pc, #436]	@ (8001ca8 <HAL_ADC_Start_DMA+0x1fc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a6d      	ldr	r2, [pc, #436]	@ (8001cac <HAL_ADC_Start_DMA+0x200>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	0c9a      	lsrs	r2, r3, #18
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001b04:	e002      	b.n	8001b0c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f9      	bne.n	8001b06 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b20:	d107      	bne.n	8001b32 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b30:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	f040 80a1 	bne.w	8001c84 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b80:	d106      	bne.n	8001b90 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	f023 0206 	bic.w	r2, r3, #6
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b8e:	e002      	b.n	8001b96 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b9e:	4b44      	ldr	r3, [pc, #272]	@ (8001cb0 <HAL_ADC_Start_DMA+0x204>)
 8001ba0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba6:	4a43      	ldr	r2, [pc, #268]	@ (8001cb4 <HAL_ADC_Start_DMA+0x208>)
 8001ba8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bae:	4a42      	ldr	r2, [pc, #264]	@ (8001cb8 <HAL_ADC_Start_DMA+0x20c>)
 8001bb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb6:	4a41      	ldr	r2, [pc, #260]	@ (8001cbc <HAL_ADC_Start_DMA+0x210>)
 8001bb8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001bd2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001be2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	334c      	adds	r3, #76	@ 0x4c
 8001bee:	4619      	mov	r1, r3
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f001 fbb4 	bl	8003360 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d12a      	bne.n	8001c5a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc0 <HAL_ADC_Start_DMA+0x214>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d015      	beq.n	8001c3a <HAL_ADC_Start_DMA+0x18e>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a2c      	ldr	r2, [pc, #176]	@ (8001cc4 <HAL_ADC_Start_DMA+0x218>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d105      	bne.n	8001c24 <HAL_ADC_Start_DMA+0x178>
 8001c18:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <HAL_ADC_Start_DMA+0x204>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 031f 	and.w	r3, r3, #31
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00a      	beq.n	8001c3a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a27      	ldr	r2, [pc, #156]	@ (8001cc8 <HAL_ADC_Start_DMA+0x21c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d136      	bne.n	8001c9c <HAL_ADC_Start_DMA+0x1f0>
 8001c2e:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <HAL_ADC_Start_DMA+0x204>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d130      	bne.n	8001c9c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d129      	bne.n	8001c9c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	e020      	b.n	8001c9c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a18      	ldr	r2, [pc, #96]	@ (8001cc0 <HAL_ADC_Start_DMA+0x214>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d11b      	bne.n	8001c9c <HAL_ADC_Start_DMA+0x1f0>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d114      	bne.n	8001c9c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	e00b      	b.n	8001c9c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	f043 0210 	orr.w	r2, r3, #16
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	431bde83 	.word	0x431bde83
 8001cb0:	40012300 	.word	0x40012300
 8001cb4:	080021f9 	.word	0x080021f9
 8001cb8:	080022b3 	.word	0x080022b3
 8001cbc:	080022cf 	.word	0x080022cf
 8001cc0:	40012000 	.word	0x40012000
 8001cc4:	40012100 	.word	0x40012100
 8001cc8:	40012200 	.word	0x40012200

08001ccc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Stop_DMA+0x1a>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e048      	b.n	8001d78 <HAL_ADC_Stop_DMA+0xac>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0201 	bic.w	r2, r2, #1
 8001cfc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d130      	bne.n	8001d6e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d1a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d10f      	bne.n	8001d4a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 fb6e 	bl	8003410 <HAL_DMA_Abort>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001d58:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1c>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e105      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x228>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	d925      	bls.n	8001e34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68d9      	ldr	r1, [r3, #12]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3b1e      	subs	r3, #30
 8001dfe:	2207      	movs	r2, #7
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43da      	mvns	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68d9      	ldr	r1, [r3, #12]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	4603      	mov	r3, r0
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4403      	add	r3, r0
 8001e26:	3b1e      	subs	r3, #30
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	e022      	b.n	8001e7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6919      	ldr	r1, [r3, #16]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	2207      	movs	r2, #7
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6919      	ldr	r1, [r3, #16]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4403      	add	r3, r0
 8001e70:	409a      	lsls	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d824      	bhi.n	8001ecc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	3b05      	subs	r3, #5
 8001e94:	221f      	movs	r2, #31
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b05      	subs	r3, #5
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eca:	e04c      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b0c      	cmp	r3, #12
 8001ed2:	d824      	bhi.n	8001f1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b23      	subs	r3, #35	@ 0x23
 8001ee6:	221f      	movs	r2, #31
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43da      	mvns	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b23      	subs	r3, #35	@ 0x23
 8001f10:	fa00 f203 	lsl.w	r2, r0, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f1c:	e023      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b41      	subs	r3, #65	@ 0x41
 8001f30:	221f      	movs	r2, #31
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	3b41      	subs	r3, #65	@ 0x41
 8001f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f66:	4b22      	ldr	r3, [pc, #136]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x234>)
 8001f68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a21      	ldr	r2, [pc, #132]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x238>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d109      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1cc>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b12      	cmp	r3, #18
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a19      	ldr	r2, [pc, #100]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x238>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d123      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x21e>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d003      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x1e6>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b11      	cmp	r3, #17
 8001fa0:	d11b      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d111      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x23c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a10      	ldr	r2, [pc, #64]	@ (8001ffc <HAL_ADC_ConfigChannel+0x240>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	0c9a      	lsrs	r2, r3, #18
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fcc:	e002      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f9      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40012300 	.word	0x40012300
 8001ff4:	40012000 	.word	0x40012000
 8001ff8:	20000008 	.word	0x20000008
 8001ffc:	431bde83 	.word	0x431bde83

08002000 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002008:	4b79      	ldr	r3, [pc, #484]	@ (80021f0 <ADC_Init+0x1f0>)
 800200a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	431a      	orrs	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002034:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	021a      	lsls	r2, r3, #8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002058:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800207a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6899      	ldr	r1, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002092:	4a58      	ldr	r2, [pc, #352]	@ (80021f4 <ADC_Init+0x1f4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d022      	beq.n	80020de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6899      	ldr	r1, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	e00f      	b.n	80020fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0202 	bic.w	r2, r2, #2
 800210c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6899      	ldr	r1, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7e1b      	ldrb	r3, [r3, #24]
 8002118:	005a      	lsls	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01b      	beq.n	8002164 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800213a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800214a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6859      	ldr	r1, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	3b01      	subs	r3, #1
 8002158:	035a      	lsls	r2, r3, #13
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	e007      	b.n	8002174 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002172:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002182:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	3b01      	subs	r3, #1
 8002190:	051a      	lsls	r2, r3, #20
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6899      	ldr	r1, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021b6:	025a      	lsls	r2, r3, #9
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6899      	ldr	r1, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	029a      	lsls	r2, r3, #10
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40012300 	.word	0x40012300
 80021f4:	0f000001 	.word	0x0f000001

080021f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002204:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800220e:	2b00      	cmp	r3, #0
 8002210:	d13c      	bne.n	800228c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d12b      	bne.n	8002284 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d127      	bne.n	8002284 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800224c:	2b00      	cmp	r3, #0
 800224e:	d119      	bne.n	8002284 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0220 	bic.w	r2, r2, #32
 800225e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7ff fd7b 	bl	8001d80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800228a:	e00e      	b.n	80022aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f7ff fd85 	bl	8001da8 <HAL_ADC_ErrorCallback>
}
 800229e:	e004      	b.n	80022aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022be:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff fd67 	bl	8001d94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022da:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2240      	movs	r2, #64	@ 0x40
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f043 0204 	orr.w	r2, r3, #4
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff fd5a 	bl	8001da8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0ed      	b.n	80024ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d102      	bne.n	8002320 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe ff5e 	bl	80011dc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002330:	f7ff fb6c 	bl	8001a0c <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002336:	e012      	b.n	800235e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002338:	f7ff fb68 	bl	8001a0c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b0a      	cmp	r3, #10
 8002344:	d90b      	bls.n	800235e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2205      	movs	r2, #5
 8002356:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0c5      	b.n	80024ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0e5      	beq.n	8002338 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0202 	bic.w	r2, r2, #2
 800237a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800237c:	f7ff fb46 	bl	8001a0c <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002382:	e012      	b.n	80023aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002384:	f7ff fb42 	bl	8001a0c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b0a      	cmp	r3, #10
 8002390:	d90b      	bls.n	80023aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002396:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2205      	movs	r2, #5
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e09f      	b.n	80024ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e5      	bne.n	8002384 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7e1b      	ldrb	r3, [r3, #24]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d108      	bne.n	80023d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e007      	b.n	80023e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7e5b      	ldrb	r3, [r3, #25]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d108      	bne.n	80023fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e007      	b.n	800240c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800240a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7e9b      	ldrb	r3, [r3, #26]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d108      	bne.n	8002426 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0220 	orr.w	r2, r2, #32
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e007      	b.n	8002436 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0220 	bic.w	r2, r2, #32
 8002434:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7edb      	ldrb	r3, [r3, #27]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d108      	bne.n	8002450 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0210 	bic.w	r2, r2, #16
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e007      	b.n	8002460 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0210 	orr.w	r2, r2, #16
 800245e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7f1b      	ldrb	r3, [r3, #28]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d108      	bne.n	800247a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0208 	orr.w	r2, r2, #8
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e007      	b.n	800248a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0208 	bic.w	r2, r2, #8
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7f5b      	ldrb	r3, [r3, #29]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d108      	bne.n	80024a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0204 	orr.w	r2, r2, #4
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e007      	b.n	80024b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0204 	bic.w	r2, r2, #4
 80024b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	ea42 0103 	orr.w	r1, r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d003      	beq.n	800251a <HAL_CAN_ConfigFilter+0x26>
 8002512:	7cfb      	ldrb	r3, [r7, #19]
 8002514:	2b02      	cmp	r3, #2
 8002516:	f040 80be 	bne.w	8002696 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800251a:	4b65      	ldr	r3, [pc, #404]	@ (80026b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800251c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002534:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	431a      	orrs	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2201      	movs	r2, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	43db      	mvns	r3, r3
 800256c:	401a      	ands	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d123      	bne.n	80025c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	43db      	mvns	r3, r3
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800259e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3248      	adds	r2, #72	@ 0x48
 80025a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025ba:	6979      	ldr	r1, [r7, #20]
 80025bc:	3348      	adds	r3, #72	@ 0x48
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d122      	bne.n	8002612 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3248      	adds	r2, #72	@ 0x48
 80025f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002606:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002608:	6979      	ldr	r1, [r7, #20]
 800260a:	3348      	adds	r3, #72	@ 0x48
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	440b      	add	r3, r1
 8002610:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	401a      	ands	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800262c:	e007      	b.n	800263e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	431a      	orrs	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	43db      	mvns	r3, r3
 8002650:	401a      	ands	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002658:	e007      	b.n	800266a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	431a      	orrs	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d107      	bne.n	8002682 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	431a      	orrs	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002688:	f023 0201 	bic.w	r2, r3, #1
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e006      	b.n	80026a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
  }
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	40006400 	.word	0x40006400

080026b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d12e      	bne.n	8002726 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026e0:	f7ff f994 	bl	8001a0c <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026e6:	e012      	b.n	800270e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026e8:	f7ff f990 	bl	8001a0c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b0a      	cmp	r3, #10
 80026f4:	d90b      	bls.n	800270e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2205      	movs	r2, #5
 8002706:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e012      	b.n	8002734 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e5      	bne.n	80026e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e006      	b.n	8002734 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	@ 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002750:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800275a:	7ffb      	ldrb	r3, [r7, #31]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d003      	beq.n	8002768 <HAL_CAN_AddTxMessage+0x2c>
 8002760:	7ffb      	ldrb	r3, [r7, #31]
 8002762:	2b02      	cmp	r3, #2
 8002764:	f040 80ad 	bne.w	80028c2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10a      	bne.n	8002788 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8095 	beq.w	80028b2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	0e1b      	lsrs	r3, r3, #24
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002792:	2201      	movs	r2, #1
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10d      	bne.n	80027c0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027ae:	68f9      	ldr	r1, [r7, #12]
 80027b0:	6809      	ldr	r1, [r1, #0]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3318      	adds	r3, #24
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	440b      	add	r3, r1
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e00f      	b.n	80027e0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027ca:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027d0:	68f9      	ldr	r1, [r7, #12]
 80027d2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027d4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3318      	adds	r3, #24
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	440b      	add	r3, r1
 80027de:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6819      	ldr	r1, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3318      	adds	r3, #24
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	440b      	add	r3, r1
 80027f0:	3304      	adds	r3, #4
 80027f2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	7d1b      	ldrb	r3, [r3, #20]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d111      	bne.n	8002820 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3318      	adds	r3, #24
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	4413      	add	r3, r2
 8002808:	3304      	adds	r3, #4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	6811      	ldr	r1, [r2, #0]
 8002810:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3318      	adds	r3, #24
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	440b      	add	r3, r1
 800281c:	3304      	adds	r3, #4
 800281e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3307      	adds	r3, #7
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	061a      	lsls	r2, r3, #24
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3306      	adds	r3, #6
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	041b      	lsls	r3, r3, #16
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3305      	adds	r3, #5
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	4313      	orrs	r3, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	3204      	adds	r2, #4
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	4610      	mov	r0, r2
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	6811      	ldr	r1, [r2, #0]
 8002848:	ea43 0200 	orr.w	r2, r3, r0
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	440b      	add	r3, r1
 8002852:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002856:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3303      	adds	r3, #3
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	061a      	lsls	r2, r3, #24
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3302      	adds	r3, #2
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3301      	adds	r3, #1
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	4313      	orrs	r3, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	7812      	ldrb	r2, [r2, #0]
 8002878:	4610      	mov	r0, r2
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	6811      	ldr	r1, [r2, #0]
 800287e:	ea43 0200 	orr.w	r2, r3, r0
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	440b      	add	r3, r1
 8002888:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800288c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3318      	adds	r3, #24
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	4413      	add	r3, r2
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	6811      	ldr	r1, [r2, #0]
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3318      	adds	r3, #24
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	440b      	add	r3, r1
 80028ac:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e00e      	b.n	80028d0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e006      	b.n	80028d0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
  }
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3724      	adds	r7, #36	@ 0x24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d003      	beq.n	8002900 <HAL_CAN_GetRxMessage+0x24>
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	f040 8103 	bne.w	8002b06 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10e      	bne.n	8002924 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d116      	bne.n	8002942 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0f7      	b.n	8002b14 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d107      	bne.n	8002942 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0e8      	b.n	8002b14 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	331b      	adds	r3, #27
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	4413      	add	r3, r2
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0204 	and.w	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10c      	bne.n	800297a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	331b      	adds	r3, #27
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	4413      	add	r3, r2
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0d5b      	lsrs	r3, r3, #21
 8002970:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e00b      	b.n	8002992 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	331b      	adds	r3, #27
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	4413      	add	r3, r2
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	08db      	lsrs	r3, r3, #3
 800298a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	331b      	adds	r3, #27
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	4413      	add	r3, r2
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0202 	and.w	r2, r3, #2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	331b      	adds	r3, #27
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	4413      	add	r3, r2
 80029b4:	3304      	adds	r3, #4
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2208      	movs	r2, #8
 80029c4:	611a      	str	r2, [r3, #16]
 80029c6:	e00b      	b.n	80029e0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	331b      	adds	r3, #27
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 020f 	and.w	r2, r3, #15
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	331b      	adds	r3, #27
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	4413      	add	r3, r2
 80029ec:	3304      	adds	r3, #4
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0a1b      	lsrs	r3, r3, #8
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	331b      	adds	r3, #27
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	4413      	add	r3, r2
 8002a04:	3304      	adds	r3, #4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	0a1a      	lsrs	r2, r3, #8
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0c1a      	lsrs	r2, r3, #16
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	3302      	adds	r3, #2
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	0e1a      	lsrs	r2, r3, #24
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	3303      	adds	r3, #3
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	3304      	adds	r3, #4
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0a1a      	lsrs	r2, r3, #8
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	3305      	adds	r3, #5
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	0c1a      	lsrs	r2, r3, #16
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	3306      	adds	r3, #6
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e1a      	lsrs	r2, r3, #24
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	3307      	adds	r3, #7
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d108      	bne.n	8002af2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0220 	orr.w	r2, r2, #32
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	e007      	b.n	8002b02 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0220 	orr.w	r2, r2, #32
 8002b00:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e006      	b.n	8002b14 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
  }
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b30:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d002      	beq.n	8002b3e <HAL_CAN_ActivateNotification+0x1e>
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d109      	bne.n	8002b52 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6959      	ldr	r1, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e006      	b.n	8002b60 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
  }
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	@ 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d07c      	beq.n	8002cac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d023      	beq.n	8002c04 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f983 	bl	8002eda <HAL_CAN_TxMailbox0CompleteCallback>
 8002bd4:	e016      	b.n	8002c04 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d004      	beq.n	8002bea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be8:	e00c      	b.n	8002c04 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bfc:	e002      	b.n	8002c04 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f989 	bl	8002f16 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d024      	beq.n	8002c58 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f963 	bl	8002eee <HAL_CAN_TxMailbox1CompleteCallback>
 8002c28:	e016      	b.n	8002c58 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d004      	beq.n	8002c3e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c3c:	e00c      	b.n	8002c58 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c50:	e002      	b.n	8002c58 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f969 	bl	8002f2a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d024      	beq.n	8002cac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f943 	bl	8002f02 <HAL_CAN_TxMailbox2CompleteCallback>
 8002c7c:	e016      	b.n	8002cac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c90:	e00c      	b.n	8002cac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d004      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca4:	e002      	b.n	8002cac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f949 	bl	8002f3e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d006      	beq.n	8002cf2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2208      	movs	r2, #8
 8002cea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f93a 	bl	8002f66 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d009      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f921 	bl	8002f52 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00c      	beq.n	8002d34 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2210      	movs	r2, #16
 8002d32:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f91c 	bl	8002f8e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d009      	beq.n	8002d74 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f903 	bl	8002f7a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d006      	beq.n	8002d96 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f906 	bl	8002fa2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00b      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2208      	movs	r2, #8
 8002db0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f8ff 	bl	8002fb6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d07b      	beq.n	8002eba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d072      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	f043 0304 	orr.w	r3, r3, #4
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d043      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d03e      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e3a:	2b60      	cmp	r3, #96	@ 0x60
 8002e3c:	d02b      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x32a>
 8002e3e:	2b60      	cmp	r3, #96	@ 0x60
 8002e40:	d82e      	bhi.n	8002ea0 <HAL_CAN_IRQHandler+0x334>
 8002e42:	2b50      	cmp	r3, #80	@ 0x50
 8002e44:	d022      	beq.n	8002e8c <HAL_CAN_IRQHandler+0x320>
 8002e46:	2b50      	cmp	r3, #80	@ 0x50
 8002e48:	d82a      	bhi.n	8002ea0 <HAL_CAN_IRQHandler+0x334>
 8002e4a:	2b40      	cmp	r3, #64	@ 0x40
 8002e4c:	d019      	beq.n	8002e82 <HAL_CAN_IRQHandler+0x316>
 8002e4e:	2b40      	cmp	r3, #64	@ 0x40
 8002e50:	d826      	bhi.n	8002ea0 <HAL_CAN_IRQHandler+0x334>
 8002e52:	2b30      	cmp	r3, #48	@ 0x30
 8002e54:	d010      	beq.n	8002e78 <HAL_CAN_IRQHandler+0x30c>
 8002e56:	2b30      	cmp	r3, #48	@ 0x30
 8002e58:	d822      	bhi.n	8002ea0 <HAL_CAN_IRQHandler+0x334>
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d002      	beq.n	8002e64 <HAL_CAN_IRQHandler+0x2f8>
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d005      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e62:	e01d      	b.n	8002ea0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	f043 0308 	orr.w	r3, r3, #8
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e6c:	e019      	b.n	8002ea2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	f043 0310 	orr.w	r3, r3, #16
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e76:	e014      	b.n	8002ea2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	f043 0320 	orr.w	r3, r3, #32
 8002e7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e80:	e00f      	b.n	8002ea2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e8a:	e00a      	b.n	8002ea2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e94:	e005      	b.n	8002ea2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e9e:	e000      	b.n	8002ea2 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ea0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699a      	ldr	r2, [r3, #24]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002eb0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f87c 	bl	8002fca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	3728      	adds	r7, #40	@ 0x28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800300c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	@ (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800302c:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <__NVIC_GetPriorityGrouping+0x18>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 0307 	and.w	r3, r3, #7
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	2b00      	cmp	r3, #0
 8003054:	db0b      	blt.n	800306e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	f003 021f 	and.w	r2, r3, #31
 800305c:	4907      	ldr	r1, [pc, #28]	@ (800307c <__NVIC_EnableIRQ+0x38>)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	2001      	movs	r0, #1
 8003066:	fa00 f202 	lsl.w	r2, r0, r2
 800306a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000e100 	.word	0xe000e100

08003080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db0a      	blt.n	80030aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	490c      	ldr	r1, [pc, #48]	@ (80030cc <__NVIC_SetPriority+0x4c>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	440b      	add	r3, r1
 80030a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a8:	e00a      	b.n	80030c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4908      	ldr	r1, [pc, #32]	@ (80030d0 <__NVIC_SetPriority+0x50>)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3b04      	subs	r3, #4
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	440b      	add	r3, r1
 80030be:	761a      	strb	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000e100 	.word	0xe000e100
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	@ 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f1c3 0307 	rsb	r3, r3, #7
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	bf28      	it	cs
 80030f2:	2304      	movcs	r3, #4
 80030f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d902      	bls.n	8003104 <NVIC_EncodePriority+0x30>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3b03      	subs	r3, #3
 8003102:	e000      	b.n	8003106 <NVIC_EncodePriority+0x32>
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800311c:	f04f 31ff 	mov.w	r1, #4294967295
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43d9      	mvns	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	4313      	orrs	r3, r2
         );
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	@ 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800314c:	d301      	bcc.n	8003152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800314e:	2301      	movs	r3, #1
 8003150:	e00f      	b.n	8003172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003152:	4a0a      	ldr	r2, [pc, #40]	@ (800317c <SysTick_Config+0x40>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315a:	210f      	movs	r1, #15
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	f7ff ff8e 	bl	8003080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003164:	4b05      	ldr	r3, [pc, #20]	@ (800317c <SysTick_Config+0x40>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316a:	4b04      	ldr	r3, [pc, #16]	@ (800317c <SysTick_Config+0x40>)
 800316c:	2207      	movs	r2, #7
 800316e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	e000e010 	.word	0xe000e010

08003180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff29 	bl	8002fe0 <__NVIC_SetPriorityGrouping>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a8:	f7ff ff3e 	bl	8003028 <__NVIC_GetPriorityGrouping>
 80031ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f7ff ff8e 	bl	80030d4 <NVIC_EncodePriority>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff5d 	bl	8003080 <__NVIC_SetPriority>
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff31 	bl	8003044 <__NVIC_EnableIRQ>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffa2 	bl	800313c <SysTick_Config>
 80031f8:	4603      	mov	r3, r0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003210:	f7fe fbfc 	bl	8001a0c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e099      	b.n	8003354 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003240:	e00f      	b.n	8003262 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003242:	f7fe fbe3 	bl	8001a0c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b05      	cmp	r3, #5
 800324e:	d908      	bls.n	8003262 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2203      	movs	r2, #3
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e078      	b.n	8003354 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1e8      	bne.n	8003242 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4b38      	ldr	r3, [pc, #224]	@ (800335c <HAL_DMA_Init+0x158>)
 800327c:	4013      	ands	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800328e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d107      	bne.n	80032cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	4313      	orrs	r3, r2
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f023 0307 	bic.w	r3, r3, #7
 80032e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d117      	bne.n	8003326 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fadf 	bl	80038cc <DMA_CheckFifoParam>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2240      	movs	r2, #64	@ 0x40
 8003318:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003322:	2301      	movs	r3, #1
 8003324:	e016      	b.n	8003354 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fa96 	bl	8003860 <DMA_CalcBaseAndBitshift>
 8003334:	4603      	mov	r3, r0
 8003336:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333c:	223f      	movs	r2, #63	@ 0x3f
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	f010803f 	.word	0xf010803f

08003360 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_DMA_Start_IT+0x26>
 8003382:	2302      	movs	r3, #2
 8003384:	e040      	b.n	8003408 <HAL_DMA_Start_IT+0xa8>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d12f      	bne.n	80033fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2202      	movs	r2, #2
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa28 	bl	8003804 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b8:	223f      	movs	r2, #63	@ 0x3f
 80033ba:	409a      	lsls	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0216 	orr.w	r2, r2, #22
 80033ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0208 	orr.w	r2, r2, #8
 80033e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	e005      	b.n	8003406 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003402:	2302      	movs	r3, #2
 8003404:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003406:	7dfb      	ldrb	r3, [r7, #23]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800341e:	f7fe faf5 	bl	8001a0c <HAL_GetTick>
 8003422:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d008      	beq.n	8003442 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2280      	movs	r2, #128	@ 0x80
 8003434:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e052      	b.n	80034e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0216 	bic.w	r2, r2, #22
 8003450:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003460:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <HAL_DMA_Abort+0x62>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0208 	bic.w	r2, r2, #8
 8003480:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003492:	e013      	b.n	80034bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003494:	f7fe faba 	bl	8001a0c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d90c      	bls.n	80034bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2203      	movs	r2, #3
 80034ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e015      	b.n	80034e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e4      	bne.n	8003494 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ce:	223f      	movs	r2, #63	@ 0x3f
 80034d0:	409a      	lsls	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034fc:	4b8e      	ldr	r3, [pc, #568]	@ (8003738 <HAL_DMA_IRQHandler+0x248>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a8e      	ldr	r2, [pc, #568]	@ (800373c <HAL_DMA_IRQHandler+0x24c>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0a9b      	lsrs	r3, r3, #10
 8003508:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	2208      	movs	r2, #8
 800351c:	409a      	lsls	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01a      	beq.n	800355c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0204 	bic.w	r2, r2, #4
 8003542:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003548:	2208      	movs	r2, #8
 800354a:	409a      	lsls	r2, r3
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003554:	f043 0201 	orr.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003560:	2201      	movs	r2, #1
 8003562:	409a      	lsls	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357e:	2201      	movs	r2, #1
 8003580:	409a      	lsls	r2, r3
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358a:	f043 0202 	orr.w	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003596:	2204      	movs	r2, #4
 8003598:	409a      	lsls	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4013      	ands	r3, r2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d012      	beq.n	80035c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00b      	beq.n	80035c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	2204      	movs	r2, #4
 80035b6:	409a      	lsls	r2, r3
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c0:	f043 0204 	orr.w	r2, r3, #4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035cc:	2210      	movs	r2, #16
 80035ce:	409a      	lsls	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d043      	beq.n	8003660 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d03c      	beq.n	8003660 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ea:	2210      	movs	r2, #16
 80035ec:	409a      	lsls	r2, r3
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d018      	beq.n	8003632 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d108      	bne.n	8003620 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d024      	beq.n	8003660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
 800361e:	e01f      	b.n	8003660 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
 8003630:	e016      	b.n	8003660 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d107      	bne.n	8003650 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0208 	bic.w	r2, r2, #8
 800364e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003664:	2220      	movs	r2, #32
 8003666:	409a      	lsls	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 808f 	beq.w	8003790 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8087 	beq.w	8003790 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003686:	2220      	movs	r2, #32
 8003688:	409a      	lsls	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b05      	cmp	r3, #5
 8003698:	d136      	bne.n	8003708 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0216 	bic.w	r2, r2, #22
 80036a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <HAL_DMA_IRQHandler+0x1da>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0208 	bic.w	r2, r2, #8
 80036d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036de:	223f      	movs	r2, #63	@ 0x3f
 80036e0:	409a      	lsls	r2, r3
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d07e      	beq.n	80037fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
        }
        return;
 8003706:	e079      	b.n	80037fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d01d      	beq.n	8003752 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10d      	bne.n	8003740 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003728:	2b00      	cmp	r3, #0
 800372a:	d031      	beq.n	8003790 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	e02c      	b.n	8003790 <HAL_DMA_IRQHandler+0x2a0>
 8003736:	bf00      	nop
 8003738:	20000008 	.word	0x20000008
 800373c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d023      	beq.n	8003790 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e01e      	b.n	8003790 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10f      	bne.n	8003780 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0210 	bic.w	r2, r2, #16
 800376e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003794:	2b00      	cmp	r3, #0
 8003796:	d032      	beq.n	80037fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2205      	movs	r2, #5
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	3301      	adds	r3, #1
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d307      	bcc.n	80037d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f2      	bne.n	80037bc <HAL_DMA_IRQHandler+0x2cc>
 80037d6:	e000      	b.n	80037da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	4798      	blx	r3
 80037fa:	e000      	b.n	80037fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80037fc:	bf00      	nop
    }
  }
}
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003820:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b40      	cmp	r3, #64	@ 0x40
 8003830:	d108      	bne.n	8003844 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003842:	e007      	b.n	8003854 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	3b10      	subs	r3, #16
 8003870:	4a14      	ldr	r2, [pc, #80]	@ (80038c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800387a:	4a13      	ldr	r2, [pc, #76]	@ (80038c8 <DMA_CalcBaseAndBitshift+0x68>)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d909      	bls.n	80038a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	1d1a      	adds	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	659a      	str	r2, [r3, #88]	@ 0x58
 80038a0:	e007      	b.n	80038b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	aaaaaaab 	.word	0xaaaaaaab
 80038c8:	08005e6c 	.word	0x08005e6c

080038cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d11f      	bne.n	8003926 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d856      	bhi.n	800399a <DMA_CheckFifoParam+0xce>
 80038ec:	a201      	add	r2, pc, #4	@ (adr r2, 80038f4 <DMA_CheckFifoParam+0x28>)
 80038ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f2:	bf00      	nop
 80038f4:	08003905 	.word	0x08003905
 80038f8:	08003917 	.word	0x08003917
 80038fc:	08003905 	.word	0x08003905
 8003900:	0800399b 	.word	0x0800399b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003908:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d046      	beq.n	800399e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003914:	e043      	b.n	800399e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800391e:	d140      	bne.n	80039a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003924:	e03d      	b.n	80039a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800392e:	d121      	bne.n	8003974 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b03      	cmp	r3, #3
 8003934:	d837      	bhi.n	80039a6 <DMA_CheckFifoParam+0xda>
 8003936:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <DMA_CheckFifoParam+0x70>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	0800394d 	.word	0x0800394d
 8003940:	08003953 	.word	0x08003953
 8003944:	0800394d 	.word	0x0800394d
 8003948:	08003965 	.word	0x08003965
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      break;
 8003950:	e030      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003956:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d025      	beq.n	80039aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003962:	e022      	b.n	80039aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800396c:	d11f      	bne.n	80039ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003972:	e01c      	b.n	80039ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d903      	bls.n	8003982 <DMA_CheckFifoParam+0xb6>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d003      	beq.n	8003988 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003980:	e018      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
      break;
 8003986:	e015      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00e      	beq.n	80039b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
      break;
 8003998:	e00b      	b.n	80039b2 <DMA_CheckFifoParam+0xe6>
      break;
 800399a:	bf00      	nop
 800399c:	e00a      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 800399e:	bf00      	nop
 80039a0:	e008      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 80039a2:	bf00      	nop
 80039a4:	e006      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 80039a6:	bf00      	nop
 80039a8:	e004      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 80039b2:	bf00      	nop
    }
  } 
  
  return status; 
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop

080039c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	@ 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	e16b      	b.n	8003cb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e0:	2201      	movs	r2, #1
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	f040 815a 	bne.w	8003cb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d005      	beq.n	8003a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d130      	bne.n	8003a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	2203      	movs	r2, #3
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 0201 	and.w	r2, r3, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d017      	beq.n	8003ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d123      	bne.n	8003b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	08da      	lsrs	r2, r3, #3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3208      	adds	r2, #8
 8003ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	220f      	movs	r2, #15
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	08da      	lsrs	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3208      	adds	r2, #8
 8003b02:	69b9      	ldr	r1, [r7, #24]
 8003b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 0203 	and.w	r2, r3, #3
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80b4 	beq.w	8003cb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	4b60      	ldr	r3, [pc, #384]	@ (8003cd0 <HAL_GPIO_Init+0x30c>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	4a5f      	ldr	r2, [pc, #380]	@ (8003cd0 <HAL_GPIO_Init+0x30c>)
 8003b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003cd0 <HAL_GPIO_Init+0x30c>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b66:	4a5b      	ldr	r2, [pc, #364]	@ (8003cd4 <HAL_GPIO_Init+0x310>)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a52      	ldr	r2, [pc, #328]	@ (8003cd8 <HAL_GPIO_Init+0x314>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d02b      	beq.n	8003bea <HAL_GPIO_Init+0x226>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a51      	ldr	r2, [pc, #324]	@ (8003cdc <HAL_GPIO_Init+0x318>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d025      	beq.n	8003be6 <HAL_GPIO_Init+0x222>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a50      	ldr	r2, [pc, #320]	@ (8003ce0 <HAL_GPIO_Init+0x31c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01f      	beq.n	8003be2 <HAL_GPIO_Init+0x21e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8003ce4 <HAL_GPIO_Init+0x320>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d019      	beq.n	8003bde <HAL_GPIO_Init+0x21a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a4e      	ldr	r2, [pc, #312]	@ (8003ce8 <HAL_GPIO_Init+0x324>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_GPIO_Init+0x216>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4d      	ldr	r2, [pc, #308]	@ (8003cec <HAL_GPIO_Init+0x328>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00d      	beq.n	8003bd6 <HAL_GPIO_Init+0x212>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8003cf0 <HAL_GPIO_Init+0x32c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <HAL_GPIO_Init+0x20e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a4b      	ldr	r2, [pc, #300]	@ (8003cf4 <HAL_GPIO_Init+0x330>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_GPIO_Init+0x20a>
 8003bca:	2307      	movs	r3, #7
 8003bcc:	e00e      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003bce:	2308      	movs	r3, #8
 8003bd0:	e00c      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003bd2:	2306      	movs	r3, #6
 8003bd4:	e00a      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003bd6:	2305      	movs	r3, #5
 8003bd8:	e008      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003bda:	2304      	movs	r3, #4
 8003bdc:	e006      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003bde:	2303      	movs	r3, #3
 8003be0:	e004      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e002      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003bea:	2300      	movs	r3, #0
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	f002 0203 	and.w	r2, r2, #3
 8003bf2:	0092      	lsls	r2, r2, #2
 8003bf4:	4093      	lsls	r3, r2
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bfc:	4935      	ldr	r1, [pc, #212]	@ (8003cd4 <HAL_GPIO_Init+0x310>)
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	3302      	adds	r3, #2
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c2e:	4a32      	ldr	r2, [pc, #200]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c34:	4b30      	ldr	r3, [pc, #192]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c58:	4a27      	ldr	r2, [pc, #156]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c5e:	4b26      	ldr	r3, [pc, #152]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	43db      	mvns	r3, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c82:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c88:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cac:	4a12      	ldr	r2, [pc, #72]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	2b0f      	cmp	r3, #15
 8003cbc:	f67f ae90 	bls.w	80039e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	3724      	adds	r7, #36	@ 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40013800 	.word	0x40013800
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	40020400 	.word	0x40020400
 8003ce0:	40020800 	.word	0x40020800
 8003ce4:	40020c00 	.word	0x40020c00
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40021400 	.word	0x40021400
 8003cf0:	40021800 	.word	0x40021800
 8003cf4:	40021c00 	.word	0x40021c00
 8003cf8:	40013c00 	.word	0x40013c00

08003cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	887b      	ldrh	r3, [r7, #2]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
 8003d18:	e001      	b.n	8003d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d3c:	787b      	ldrb	r3, [r7, #1]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d42:	887a      	ldrh	r2, [r7, #2]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d48:	e003      	b.n	8003d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d4a:	887b      	ldrh	r3, [r7, #2]
 8003d4c:	041a      	lsls	r2, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	619a      	str	r2, [r3, #24]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e267      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d075      	beq.n	8003e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d7e:	4b88      	ldr	r3, [pc, #544]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d00c      	beq.n	8003da4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d8a:	4b85      	ldr	r3, [pc, #532]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d112      	bne.n	8003dbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d96:	4b82      	ldr	r3, [pc, #520]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003da2:	d10b      	bne.n	8003dbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da4:	4b7e      	ldr	r3, [pc, #504]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d05b      	beq.n	8003e68 <HAL_RCC_OscConfig+0x108>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d157      	bne.n	8003e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e242      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc4:	d106      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x74>
 8003dc6:	4b76      	ldr	r3, [pc, #472]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a75      	ldr	r2, [pc, #468]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e01d      	b.n	8003e10 <HAL_RCC_OscConfig+0xb0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x98>
 8003dde:	4b70      	ldr	r3, [pc, #448]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a6f      	ldr	r2, [pc, #444]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	4b6d      	ldr	r3, [pc, #436]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a6c      	ldr	r2, [pc, #432]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e00b      	b.n	8003e10 <HAL_RCC_OscConfig+0xb0>
 8003df8:	4b69      	ldr	r3, [pc, #420]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a68      	ldr	r2, [pc, #416]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b66      	ldr	r3, [pc, #408]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a65      	ldr	r2, [pc, #404]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d013      	beq.n	8003e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7fd fdf8 	bl	8001a0c <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e20:	f7fd fdf4 	bl	8001a0c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	@ 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e207      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	4b5b      	ldr	r3, [pc, #364]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0xc0>
 8003e3e:	e014      	b.n	8003e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fd fde4 	bl	8001a0c <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e48:	f7fd fde0 	bl	8001a0c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	@ 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e1f3      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5a:	4b51      	ldr	r3, [pc, #324]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0xe8>
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d063      	beq.n	8003f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e76:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e82:	4b47      	ldr	r3, [pc, #284]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d11c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8e:	4b44      	ldr	r3, [pc, #272]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d116      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9a:	4b41      	ldr	r3, [pc, #260]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x152>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d001      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e1c7      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4937      	ldr	r1, [pc, #220]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec6:	e03a      	b.n	8003f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d020      	beq.n	8003f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed0:	4b34      	ldr	r3, [pc, #208]	@ (8003fa4 <HAL_RCC_OscConfig+0x244>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fd fd99 	bl	8001a0c <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ede:	f7fd fd95 	bl	8001a0c <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e1a8      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efc:	4b28      	ldr	r3, [pc, #160]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4925      	ldr	r1, [pc, #148]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	600b      	str	r3, [r1, #0]
 8003f10:	e015      	b.n	8003f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f12:	4b24      	ldr	r3, [pc, #144]	@ (8003fa4 <HAL_RCC_OscConfig+0x244>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fd fd78 	bl	8001a0c <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f20:	f7fd fd74 	bl	8001a0c <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e187      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f32:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d036      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f52:	4b15      	ldr	r3, [pc, #84]	@ (8003fa8 <HAL_RCC_OscConfig+0x248>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fd fd58 	bl	8001a0c <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f60:	f7fd fd54 	bl	8001a0c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e167      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f72:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa0 <HAL_RCC_OscConfig+0x240>)
 8003f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x200>
 8003f7e:	e01b      	b.n	8003fb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f80:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <HAL_RCC_OscConfig+0x248>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f86:	f7fd fd41 	bl	8001a0c <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f8c:	e00e      	b.n	8003fac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f8e:	f7fd fd3d 	bl	8001a0c <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d907      	bls.n	8003fac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e150      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	42470000 	.word	0x42470000
 8003fa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fac:	4b88      	ldr	r3, [pc, #544]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8003fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ea      	bne.n	8003f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8097 	beq.w	80040f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fca:	4b81      	ldr	r3, [pc, #516]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10f      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	4b7d      	ldr	r3, [pc, #500]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	4a7c      	ldr	r2, [pc, #496]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff6:	4b77      	ldr	r3, [pc, #476]	@ (80041d4 <HAL_RCC_OscConfig+0x474>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d118      	bne.n	8004034 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004002:	4b74      	ldr	r3, [pc, #464]	@ (80041d4 <HAL_RCC_OscConfig+0x474>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a73      	ldr	r2, [pc, #460]	@ (80041d4 <HAL_RCC_OscConfig+0x474>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800400c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400e:	f7fd fcfd 	bl	8001a0c <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004016:	f7fd fcf9 	bl	8001a0c <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e10c      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004028:	4b6a      	ldr	r3, [pc, #424]	@ (80041d4 <HAL_RCC_OscConfig+0x474>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x2ea>
 800403c:	4b64      	ldr	r3, [pc, #400]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004040:	4a63      	ldr	r2, [pc, #396]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6713      	str	r3, [r2, #112]	@ 0x70
 8004048:	e01c      	b.n	8004084 <HAL_RCC_OscConfig+0x324>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b05      	cmp	r3, #5
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x30c>
 8004052:	4b5f      	ldr	r3, [pc, #380]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004056:	4a5e      	ldr	r2, [pc, #376]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004058:	f043 0304 	orr.w	r3, r3, #4
 800405c:	6713      	str	r3, [r2, #112]	@ 0x70
 800405e:	4b5c      	ldr	r3, [pc, #368]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	4a5b      	ldr	r2, [pc, #364]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	6713      	str	r3, [r2, #112]	@ 0x70
 800406a:	e00b      	b.n	8004084 <HAL_RCC_OscConfig+0x324>
 800406c:	4b58      	ldr	r3, [pc, #352]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004070:	4a57      	ldr	r2, [pc, #348]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004072:	f023 0301 	bic.w	r3, r3, #1
 8004076:	6713      	str	r3, [r2, #112]	@ 0x70
 8004078:	4b55      	ldr	r3, [pc, #340]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407c:	4a54      	ldr	r2, [pc, #336]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 800407e:	f023 0304 	bic.w	r3, r3, #4
 8004082:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d015      	beq.n	80040b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fd fcbe 	bl	8001a0c <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004092:	e00a      	b.n	80040aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f7fd fcba 	bl	8001a0c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0cb      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040aa:	4b49      	ldr	r3, [pc, #292]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0ee      	beq.n	8004094 <HAL_RCC_OscConfig+0x334>
 80040b6:	e014      	b.n	80040e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b8:	f7fd fca8 	bl	8001a0c <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040be:	e00a      	b.n	80040d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fd fca4 	bl	8001a0c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e0b5      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d6:	4b3e      	ldr	r3, [pc, #248]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1ee      	bne.n	80040c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	4a38      	ldr	r2, [pc, #224]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 80040ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80a1 	beq.w	8004240 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040fe:	4b34      	ldr	r3, [pc, #208]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b08      	cmp	r3, #8
 8004108:	d05c      	beq.n	80041c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d141      	bne.n	8004196 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <HAL_RCC_OscConfig+0x478>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fd fc78 	bl	8001a0c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004120:	f7fd fc74 	bl	8001a0c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e087      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	4b27      	ldr	r3, [pc, #156]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69da      	ldr	r2, [r3, #28]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	019b      	lsls	r3, r3, #6
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	085b      	lsrs	r3, r3, #1
 8004156:	3b01      	subs	r3, #1
 8004158:	041b      	lsls	r3, r3, #16
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004160:	061b      	lsls	r3, r3, #24
 8004162:	491b      	ldr	r1, [pc, #108]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 8004164:	4313      	orrs	r3, r2
 8004166:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCC_OscConfig+0x478>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fd fc4d 	bl	8001a0c <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004176:	f7fd fc49 	bl	8001a0c <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e05c      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004188:	4b11      	ldr	r3, [pc, #68]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x416>
 8004194:	e054      	b.n	8004240 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004196:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <HAL_RCC_OscConfig+0x478>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fd fc36 	bl	8001a0c <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fd fc32 	bl	8001a0c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e045      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b6:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <HAL_RCC_OscConfig+0x470>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x444>
 80041c2:	e03d      	b.n	8004240 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d107      	bne.n	80041dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e038      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40007000 	.word	0x40007000
 80041d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041dc:	4b1b      	ldr	r3, [pc, #108]	@ (800424c <HAL_RCC_OscConfig+0x4ec>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d028      	beq.n	800423c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d121      	bne.n	800423c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d11a      	bne.n	800423c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800420c:	4013      	ands	r3, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004214:	4293      	cmp	r3, r2
 8004216:	d111      	bne.n	800423c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	3b01      	subs	r3, #1
 8004226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d107      	bne.n	800423c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d001      	beq.n	8004240 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800

08004250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0cc      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004264:	4b68      	ldr	r3, [pc, #416]	@ (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d90c      	bls.n	800428c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b65      	ldr	r3, [pc, #404]	@ (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b63      	ldr	r3, [pc, #396]	@ (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0b8      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d020      	beq.n	80042da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a4:	4b59      	ldr	r3, [pc, #356]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a58      	ldr	r2, [pc, #352]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042bc:	4b53      	ldr	r3, [pc, #332]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	4a52      	ldr	r2, [pc, #328]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c8:	4b50      	ldr	r3, [pc, #320]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	494d      	ldr	r1, [pc, #308]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d044      	beq.n	8004370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	4b47      	ldr	r3, [pc, #284]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d119      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e07f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d003      	beq.n	800430e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800430a:	2b03      	cmp	r3, #3
 800430c:	d107      	bne.n	800431e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430e:	4b3f      	ldr	r3, [pc, #252]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e06f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431e:	4b3b      	ldr	r3, [pc, #236]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e067      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432e:	4b37      	ldr	r3, [pc, #220]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f023 0203 	bic.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4934      	ldr	r1, [pc, #208]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	4313      	orrs	r3, r2
 800433e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004340:	f7fd fb64 	bl	8001a0c <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	e00a      	b.n	800435e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004348:	f7fd fb60 	bl	8001a0c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e04f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435e:	4b2b      	ldr	r3, [pc, #172]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 020c 	and.w	r2, r3, #12
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	429a      	cmp	r2, r3
 800436e:	d1eb      	bne.n	8004348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004370:	4b25      	ldr	r3, [pc, #148]	@ (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d20c      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	4b22      	ldr	r3, [pc, #136]	@ (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b20      	ldr	r3, [pc, #128]	@ (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e032      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a4:	4b19      	ldr	r3, [pc, #100]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4916      	ldr	r1, [pc, #88]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c2:	4b12      	ldr	r3, [pc, #72]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	490e      	ldr	r1, [pc, #56]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043d6:	f000 f821 	bl	800441c <HAL_RCC_GetSysClockFreq>
 80043da:	4602      	mov	r2, r0
 80043dc:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	490a      	ldr	r1, [pc, #40]	@ (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	5ccb      	ldrb	r3, [r1, r3]
 80043ea:	fa22 f303 	lsr.w	r3, r2, r3
 80043ee:	4a09      	ldr	r2, [pc, #36]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043f2:	4b09      	ldr	r3, [pc, #36]	@ (8004418 <HAL_RCC_ClockConfig+0x1c8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fd fac4 	bl	8001984 <HAL_InitTick>

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40023c00 	.word	0x40023c00
 800440c:	40023800 	.word	0x40023800
 8004410:	08005e54 	.word	0x08005e54
 8004414:	20000008 	.word	0x20000008
 8004418:	2000000c 	.word	0x2000000c

0800441c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800441c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004420:	b094      	sub	sp, #80	@ 0x50
 8004422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	647b      	str	r3, [r7, #68]	@ 0x44
 8004428:	2300      	movs	r3, #0
 800442a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800442c:	2300      	movs	r3, #0
 800442e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004434:	4b79      	ldr	r3, [pc, #484]	@ (800461c <HAL_RCC_GetSysClockFreq+0x200>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d00d      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x40>
 8004440:	2b08      	cmp	r3, #8
 8004442:	f200 80e1 	bhi.w	8004608 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0x34>
 800444a:	2b04      	cmp	r3, #4
 800444c:	d003      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0x3a>
 800444e:	e0db      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004450:	4b73      	ldr	r3, [pc, #460]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x204>)
 8004452:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004454:	e0db      	b.n	800460e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004456:	4b73      	ldr	r3, [pc, #460]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x208>)
 8004458:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800445a:	e0d8      	b.n	800460e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800445c:	4b6f      	ldr	r3, [pc, #444]	@ (800461c <HAL_RCC_GetSysClockFreq+0x200>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004464:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004466:	4b6d      	ldr	r3, [pc, #436]	@ (800461c <HAL_RCC_GetSysClockFreq+0x200>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d063      	beq.n	800453a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004472:	4b6a      	ldr	r3, [pc, #424]	@ (800461c <HAL_RCC_GetSysClockFreq+0x200>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	099b      	lsrs	r3, r3, #6
 8004478:	2200      	movs	r2, #0
 800447a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800447c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800447e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004484:	633b      	str	r3, [r7, #48]	@ 0x30
 8004486:	2300      	movs	r3, #0
 8004488:	637b      	str	r3, [r7, #52]	@ 0x34
 800448a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800448e:	4622      	mov	r2, r4
 8004490:	462b      	mov	r3, r5
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f04f 0100 	mov.w	r1, #0
 800449a:	0159      	lsls	r1, r3, #5
 800449c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a0:	0150      	lsls	r0, r2, #5
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4621      	mov	r1, r4
 80044a8:	1a51      	subs	r1, r2, r1
 80044aa:	6139      	str	r1, [r7, #16]
 80044ac:	4629      	mov	r1, r5
 80044ae:	eb63 0301 	sbc.w	r3, r3, r1
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044c0:	4659      	mov	r1, fp
 80044c2:	018b      	lsls	r3, r1, #6
 80044c4:	4651      	mov	r1, sl
 80044c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ca:	4651      	mov	r1, sl
 80044cc:	018a      	lsls	r2, r1, #6
 80044ce:	4651      	mov	r1, sl
 80044d0:	ebb2 0801 	subs.w	r8, r2, r1
 80044d4:	4659      	mov	r1, fp
 80044d6:	eb63 0901 	sbc.w	r9, r3, r1
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ee:	4690      	mov	r8, r2
 80044f0:	4699      	mov	r9, r3
 80044f2:	4623      	mov	r3, r4
 80044f4:	eb18 0303 	adds.w	r3, r8, r3
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	462b      	mov	r3, r5
 80044fc:	eb49 0303 	adc.w	r3, r9, r3
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800450e:	4629      	mov	r1, r5
 8004510:	024b      	lsls	r3, r1, #9
 8004512:	4621      	mov	r1, r4
 8004514:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004518:	4621      	mov	r1, r4
 800451a:	024a      	lsls	r2, r1, #9
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004522:	2200      	movs	r2, #0
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004528:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800452c:	f7fb fe4c 	bl	80001c8 <__aeabi_uldivmod>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4613      	mov	r3, r2
 8004536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004538:	e058      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453a:	4b38      	ldr	r3, [pc, #224]	@ (800461c <HAL_RCC_GetSysClockFreq+0x200>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	099b      	lsrs	r3, r3, #6
 8004540:	2200      	movs	r2, #0
 8004542:	4618      	mov	r0, r3
 8004544:	4611      	mov	r1, r2
 8004546:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800454a:	623b      	str	r3, [r7, #32]
 800454c:	2300      	movs	r3, #0
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004550:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	f04f 0000 	mov.w	r0, #0
 800455c:	f04f 0100 	mov.w	r1, #0
 8004560:	0159      	lsls	r1, r3, #5
 8004562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004566:	0150      	lsls	r0, r2, #5
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4641      	mov	r1, r8
 800456e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004572:	4649      	mov	r1, r9
 8004574:	eb63 0b01 	sbc.w	fp, r3, r1
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004584:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004588:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800458c:	ebb2 040a 	subs.w	r4, r2, sl
 8004590:	eb63 050b 	sbc.w	r5, r3, fp
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	00eb      	lsls	r3, r5, #3
 800459e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a2:	00e2      	lsls	r2, r4, #3
 80045a4:	4614      	mov	r4, r2
 80045a6:	461d      	mov	r5, r3
 80045a8:	4643      	mov	r3, r8
 80045aa:	18e3      	adds	r3, r4, r3
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	464b      	mov	r3, r9
 80045b0:	eb45 0303 	adc.w	r3, r5, r3
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045c2:	4629      	mov	r1, r5
 80045c4:	028b      	lsls	r3, r1, #10
 80045c6:	4621      	mov	r1, r4
 80045c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045cc:	4621      	mov	r1, r4
 80045ce:	028a      	lsls	r2, r1, #10
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d6:	2200      	movs	r2, #0
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	61fa      	str	r2, [r7, #28]
 80045dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045e0:	f7fb fdf2 	bl	80001c8 <__aeabi_uldivmod>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4613      	mov	r3, r2
 80045ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045ec:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <HAL_RCC_GetSysClockFreq+0x200>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	0c1b      	lsrs	r3, r3, #16
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	3301      	adds	r3, #1
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80045fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004606:	e002      	b.n	800460e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004608:	4b05      	ldr	r3, [pc, #20]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x204>)
 800460a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800460c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800460e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004610:	4618      	mov	r0, r3
 8004612:	3750      	adds	r7, #80	@ 0x50
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461a:	bf00      	nop
 800461c:	40023800 	.word	0x40023800
 8004620:	00f42400 	.word	0x00f42400
 8004624:	007a1200 	.word	0x007a1200

08004628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800462c:	4b03      	ldr	r3, [pc, #12]	@ (800463c <HAL_RCC_GetHCLKFreq+0x14>)
 800462e:	681b      	ldr	r3, [r3, #0]
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20000008 	.word	0x20000008

08004640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004644:	f7ff fff0 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0a9b      	lsrs	r3, r3, #10
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4903      	ldr	r1, [pc, #12]	@ (8004664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	08005e64 	.word	0x08005e64

08004668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e041      	b.n	80046fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fc fdfc 	bl	800128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f000 fec6 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	d001      	beq.n	8004720 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e046      	b.n	80047ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a23      	ldr	r2, [pc, #140]	@ (80047bc <HAL_TIM_Base_Start+0xb4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d022      	beq.n	8004778 <HAL_TIM_Base_Start+0x70>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473a:	d01d      	beq.n	8004778 <HAL_TIM_Base_Start+0x70>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1f      	ldr	r2, [pc, #124]	@ (80047c0 <HAL_TIM_Base_Start+0xb8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d018      	beq.n	8004778 <HAL_TIM_Base_Start+0x70>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1e      	ldr	r2, [pc, #120]	@ (80047c4 <HAL_TIM_Base_Start+0xbc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d013      	beq.n	8004778 <HAL_TIM_Base_Start+0x70>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1c      	ldr	r2, [pc, #112]	@ (80047c8 <HAL_TIM_Base_Start+0xc0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00e      	beq.n	8004778 <HAL_TIM_Base_Start+0x70>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1b      	ldr	r2, [pc, #108]	@ (80047cc <HAL_TIM_Base_Start+0xc4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d009      	beq.n	8004778 <HAL_TIM_Base_Start+0x70>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a19      	ldr	r2, [pc, #100]	@ (80047d0 <HAL_TIM_Base_Start+0xc8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d004      	beq.n	8004778 <HAL_TIM_Base_Start+0x70>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a18      	ldr	r2, [pc, #96]	@ (80047d4 <HAL_TIM_Base_Start+0xcc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d111      	bne.n	800479c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b06      	cmp	r3, #6
 8004788:	d010      	beq.n	80047ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479a:	e007      	b.n	80047ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40010000 	.word	0x40010000
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40000800 	.word	0x40000800
 80047c8:	40000c00 	.word	0x40000c00
 80047cc:	40010400 	.word	0x40010400
 80047d0:	40014000 	.word	0x40014000
 80047d4:	40001800 	.word	0x40001800

080047d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e041      	b.n	800486e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f839 	bl	8004876 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f000 fe0e 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d109      	bne.n	80048b0 <HAL_TIM_PWM_Start+0x24>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	e022      	b.n	80048f6 <HAL_TIM_PWM_Start+0x6a>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d109      	bne.n	80048ca <HAL_TIM_PWM_Start+0x3e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b01      	cmp	r3, #1
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	e015      	b.n	80048f6 <HAL_TIM_PWM_Start+0x6a>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d109      	bne.n	80048e4 <HAL_TIM_PWM_Start+0x58>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e008      	b.n	80048f6 <HAL_TIM_PWM_Start+0x6a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e07c      	b.n	80049f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d104      	bne.n	800490e <HAL_TIM_PWM_Start+0x82>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800490c:	e013      	b.n	8004936 <HAL_TIM_PWM_Start+0xaa>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b04      	cmp	r3, #4
 8004912:	d104      	bne.n	800491e <HAL_TIM_PWM_Start+0x92>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800491c:	e00b      	b.n	8004936 <HAL_TIM_PWM_Start+0xaa>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d104      	bne.n	800492e <HAL_TIM_PWM_Start+0xa2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800492c:	e003      	b.n	8004936 <HAL_TIM_PWM_Start+0xaa>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2201      	movs	r2, #1
 800493c:	6839      	ldr	r1, [r7, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f001 f99a 	bl	8005c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2d      	ldr	r2, [pc, #180]	@ (8004a00 <HAL_TIM_PWM_Start+0x174>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_TIM_PWM_Start+0xcc>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a2c      	ldr	r2, [pc, #176]	@ (8004a04 <HAL_TIM_PWM_Start+0x178>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_TIM_PWM_Start+0xd0>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_TIM_PWM_Start+0xd2>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004970:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a22      	ldr	r2, [pc, #136]	@ (8004a00 <HAL_TIM_PWM_Start+0x174>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d022      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004984:	d01d      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a08 <HAL_TIM_PWM_Start+0x17c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d018      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1d      	ldr	r2, [pc, #116]	@ (8004a0c <HAL_TIM_PWM_Start+0x180>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1c      	ldr	r2, [pc, #112]	@ (8004a10 <HAL_TIM_PWM_Start+0x184>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a16      	ldr	r2, [pc, #88]	@ (8004a04 <HAL_TIM_PWM_Start+0x178>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a18      	ldr	r2, [pc, #96]	@ (8004a14 <HAL_TIM_PWM_Start+0x188>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <HAL_TIM_PWM_Start+0x18c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d111      	bne.n	80049e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b06      	cmp	r3, #6
 80049d2:	d010      	beq.n	80049f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e4:	e007      	b.n	80049f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40010400 	.word	0x40010400
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800
 8004a10:	40000c00 	.word	0x40000c00
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40001800 	.word	0x40001800

08004a1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e041      	b.n	8004ab2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f839 	bl	8004aba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	f000 fcec 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d104      	bne.n	8004aee <HAL_TIM_IC_Start_IT+0x1e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	e013      	b.n	8004b16 <HAL_TIM_IC_Start_IT+0x46>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d104      	bne.n	8004afe <HAL_TIM_IC_Start_IT+0x2e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	e00b      	b.n	8004b16 <HAL_TIM_IC_Start_IT+0x46>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d104      	bne.n	8004b0e <HAL_TIM_IC_Start_IT+0x3e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	e003      	b.n	8004b16 <HAL_TIM_IC_Start_IT+0x46>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d104      	bne.n	8004b28 <HAL_TIM_IC_Start_IT+0x58>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e013      	b.n	8004b50 <HAL_TIM_IC_Start_IT+0x80>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d104      	bne.n	8004b38 <HAL_TIM_IC_Start_IT+0x68>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e00b      	b.n	8004b50 <HAL_TIM_IC_Start_IT+0x80>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d104      	bne.n	8004b48 <HAL_TIM_IC_Start_IT+0x78>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	e003      	b.n	8004b50 <HAL_TIM_IC_Start_IT+0x80>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b52:	7bbb      	ldrb	r3, [r7, #14]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d102      	bne.n	8004b5e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b58:	7b7b      	ldrb	r3, [r7, #13]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d001      	beq.n	8004b62 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e0cc      	b.n	8004cfc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_IC_Start_IT+0xa2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b70:	e013      	b.n	8004b9a <HAL_TIM_IC_Start_IT+0xca>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d104      	bne.n	8004b82 <HAL_TIM_IC_Start_IT+0xb2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b80:	e00b      	b.n	8004b9a <HAL_TIM_IC_Start_IT+0xca>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d104      	bne.n	8004b92 <HAL_TIM_IC_Start_IT+0xc2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b90:	e003      	b.n	8004b9a <HAL_TIM_IC_Start_IT+0xca>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_IC_Start_IT+0xda>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ba8:	e013      	b.n	8004bd2 <HAL_TIM_IC_Start_IT+0x102>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_IC_Start_IT+0xea>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bb8:	e00b      	b.n	8004bd2 <HAL_TIM_IC_Start_IT+0x102>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d104      	bne.n	8004bca <HAL_TIM_IC_Start_IT+0xfa>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bc8:	e003      	b.n	8004bd2 <HAL_TIM_IC_Start_IT+0x102>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d841      	bhi.n	8004c5c <HAL_TIM_IC_Start_IT+0x18c>
 8004bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004be0 <HAL_TIM_IC_Start_IT+0x110>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c5d 	.word	0x08004c5d
 8004be8:	08004c5d 	.word	0x08004c5d
 8004bec:	08004c5d 	.word	0x08004c5d
 8004bf0:	08004c27 	.word	0x08004c27
 8004bf4:	08004c5d 	.word	0x08004c5d
 8004bf8:	08004c5d 	.word	0x08004c5d
 8004bfc:	08004c5d 	.word	0x08004c5d
 8004c00:	08004c39 	.word	0x08004c39
 8004c04:	08004c5d 	.word	0x08004c5d
 8004c08:	08004c5d 	.word	0x08004c5d
 8004c0c:	08004c5d 	.word	0x08004c5d
 8004c10:	08004c4b 	.word	0x08004c4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0202 	orr.w	r2, r2, #2
 8004c22:	60da      	str	r2, [r3, #12]
      break;
 8004c24:	e01d      	b.n	8004c62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0204 	orr.w	r2, r2, #4
 8004c34:	60da      	str	r2, [r3, #12]
      break;
 8004c36:	e014      	b.n	8004c62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0208 	orr.w	r2, r2, #8
 8004c46:	60da      	str	r2, [r3, #12]
      break;
 8004c48:	e00b      	b.n	8004c62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0210 	orr.w	r2, r2, #16
 8004c58:	60da      	str	r2, [r3, #12]
      break;
 8004c5a:	e002      	b.n	8004c62 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c60:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d148      	bne.n	8004cfa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 f801 	bl	8005c78 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a22      	ldr	r2, [pc, #136]	@ (8004d04 <HAL_TIM_IC_Start_IT+0x234>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d022      	beq.n	8004cc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c88:	d01d      	beq.n	8004cc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004d08 <HAL_TIM_IC_Start_IT+0x238>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d018      	beq.n	8004cc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1c      	ldr	r2, [pc, #112]	@ (8004d0c <HAL_TIM_IC_Start_IT+0x23c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d10 <HAL_TIM_IC_Start_IT+0x240>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a19      	ldr	r2, [pc, #100]	@ (8004d14 <HAL_TIM_IC_Start_IT+0x244>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	@ (8004d18 <HAL_TIM_IC_Start_IT+0x248>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a16      	ldr	r2, [pc, #88]	@ (8004d1c <HAL_TIM_IC_Start_IT+0x24c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d111      	bne.n	8004cea <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b06      	cmp	r3, #6
 8004cd6:	d010      	beq.n	8004cfa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce8:	e007      	b.n	8004cfa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40010400 	.word	0x40010400
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40001800 	.word	0x40001800

08004d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d020      	beq.n	8004d84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01b      	beq.n	8004d84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0202 	mvn.w	r2, #2
 8004d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fb46 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
 8004d70:	e005      	b.n	8004d7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fb38 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fb49 	bl	8005410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d020      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01b      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0204 	mvn.w	r2, #4
 8004da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fb20 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fb12 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fb23 	bl	8005410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d020      	beq.n	8004e1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01b      	beq.n	8004e1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0208 	mvn.w	r2, #8
 8004dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2204      	movs	r2, #4
 8004df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fafa 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 faec 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fafd 	bl	8005410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d020      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01b      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0210 	mvn.w	r2, #16
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fad4 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fac6 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fad7 	bl	8005410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00c      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0201 	mvn.w	r2, #1
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 faa4 	bl	80053d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00c      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d007      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 ff90 	bl	8005dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 faa8 	bl	8005424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00c      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0220 	mvn.w	r2, #32
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 ff62 	bl	8005dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e088      	b.n	8005030 <HAL_TIM_IC_ConfigChannel+0x130>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d11b      	bne.n	8004f64 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004f3c:	f000 fcd8 	bl	80058f0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 020c 	bic.w	r2, r2, #12
 8004f4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6999      	ldr	r1, [r3, #24]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	619a      	str	r2, [r3, #24]
 8004f62:	e060      	b.n	8005026 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d11c      	bne.n	8004fa4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004f7a:	f000 fd5c 	bl	8005a36 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699a      	ldr	r2, [r3, #24]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004f8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6999      	ldr	r1, [r3, #24]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	021a      	lsls	r2, r3, #8
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	619a      	str	r2, [r3, #24]
 8004fa2:	e040      	b.n	8005026 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d11b      	bne.n	8004fe2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004fba:	f000 fda9 	bl	8005b10 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 020c 	bic.w	r2, r2, #12
 8004fcc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69d9      	ldr	r1, [r3, #28]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	61da      	str	r2, [r3, #28]
 8004fe0:	e021      	b.n	8005026 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b0c      	cmp	r3, #12
 8004fe6:	d11c      	bne.n	8005022 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004ff8:	f000 fdc6 	bl	8005b88 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69da      	ldr	r2, [r3, #28]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800500a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69d9      	ldr	r1, [r3, #28]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	021a      	lsls	r2, r3, #8
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	61da      	str	r2, [r3, #28]
 8005020:	e001      	b.n	8005026 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800502e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005052:	2302      	movs	r3, #2
 8005054:	e0ae      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b0c      	cmp	r3, #12
 8005062:	f200 809f 	bhi.w	80051a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005066:	a201      	add	r2, pc, #4	@ (adr r2, 800506c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506c:	080050a1 	.word	0x080050a1
 8005070:	080051a5 	.word	0x080051a5
 8005074:	080051a5 	.word	0x080051a5
 8005078:	080051a5 	.word	0x080051a5
 800507c:	080050e1 	.word	0x080050e1
 8005080:	080051a5 	.word	0x080051a5
 8005084:	080051a5 	.word	0x080051a5
 8005088:	080051a5 	.word	0x080051a5
 800508c:	08005123 	.word	0x08005123
 8005090:	080051a5 	.word	0x080051a5
 8005094:	080051a5 	.word	0x080051a5
 8005098:	080051a5 	.word	0x080051a5
 800509c:	08005163 	.word	0x08005163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fa72 	bl	8005590 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0208 	orr.w	r2, r2, #8
 80050ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0204 	bic.w	r2, r2, #4
 80050ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6999      	ldr	r1, [r3, #24]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	619a      	str	r2, [r3, #24]
      break;
 80050de:	e064      	b.n	80051aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fac2 	bl	8005670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800510a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6999      	ldr	r1, [r3, #24]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	021a      	lsls	r2, r3, #8
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	619a      	str	r2, [r3, #24]
      break;
 8005120:	e043      	b.n	80051aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fb17 	bl	800575c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0208 	orr.w	r2, r2, #8
 800513c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0204 	bic.w	r2, r2, #4
 800514c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69d9      	ldr	r1, [r3, #28]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	61da      	str	r2, [r3, #28]
      break;
 8005160:	e023      	b.n	80051aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fb6b 	bl	8005844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800517c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800518c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69d9      	ldr	r1, [r3, #28]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	021a      	lsls	r2, r3, #8
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	61da      	str	r2, [r3, #28]
      break;
 80051a2:	e002      	b.n	80051aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	75fb      	strb	r3, [r7, #23]
      break;
 80051a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_TIM_ConfigClockSource+0x1c>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e0b4      	b.n	8005342 <HAL_TIM_ConfigClockSource+0x186>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80051f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005210:	d03e      	beq.n	8005290 <HAL_TIM_ConfigClockSource+0xd4>
 8005212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005216:	f200 8087 	bhi.w	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 800521a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800521e:	f000 8086 	beq.w	800532e <HAL_TIM_ConfigClockSource+0x172>
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005226:	d87f      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005228:	2b70      	cmp	r3, #112	@ 0x70
 800522a:	d01a      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0xa6>
 800522c:	2b70      	cmp	r3, #112	@ 0x70
 800522e:	d87b      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005230:	2b60      	cmp	r3, #96	@ 0x60
 8005232:	d050      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005234:	2b60      	cmp	r3, #96	@ 0x60
 8005236:	d877      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b50      	cmp	r3, #80	@ 0x50
 800523a:	d03c      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0xfa>
 800523c:	2b50      	cmp	r3, #80	@ 0x50
 800523e:	d873      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b40      	cmp	r3, #64	@ 0x40
 8005242:	d058      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005244:	2b40      	cmp	r3, #64	@ 0x40
 8005246:	d86f      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b30      	cmp	r3, #48	@ 0x30
 800524a:	d064      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x15a>
 800524c:	2b30      	cmp	r3, #48	@ 0x30
 800524e:	d86b      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005250:	2b20      	cmp	r3, #32
 8005252:	d060      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x15a>
 8005254:	2b20      	cmp	r3, #32
 8005256:	d867      	bhi.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d05c      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x15a>
 800525c:	2b10      	cmp	r3, #16
 800525e:	d05a      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x15a>
 8005260:	e062      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005272:	f000 fce1 	bl	8005c38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	609a      	str	r2, [r3, #8]
      break;
 800528e:	e04f      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052a0:	f000 fcca 	bl	8005c38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052b2:	609a      	str	r2, [r3, #8]
      break;
 80052b4:	e03c      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c2:	461a      	mov	r2, r3
 80052c4:	f000 fb88 	bl	80059d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2150      	movs	r1, #80	@ 0x50
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fc97 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 80052d4:	e02c      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052e2:	461a      	mov	r2, r3
 80052e4:	f000 fbe4 	bl	8005ab0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2160      	movs	r1, #96	@ 0x60
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fc87 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 80052f4:	e01c      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005302:	461a      	mov	r2, r3
 8005304:	f000 fb68 	bl	80059d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2140      	movs	r1, #64	@ 0x40
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fc77 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 8005314:	e00c      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f000 fc6e 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 8005326:	e003      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
      break;
 800532c:	e000      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800532e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b0c      	cmp	r3, #12
 800535e:	d831      	bhi.n	80053c4 <HAL_TIM_ReadCapturedValue+0x78>
 8005360:	a201      	add	r2, pc, #4	@ (adr r2, 8005368 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005366:	bf00      	nop
 8005368:	0800539d 	.word	0x0800539d
 800536c:	080053c5 	.word	0x080053c5
 8005370:	080053c5 	.word	0x080053c5
 8005374:	080053c5 	.word	0x080053c5
 8005378:	080053a7 	.word	0x080053a7
 800537c:	080053c5 	.word	0x080053c5
 8005380:	080053c5 	.word	0x080053c5
 8005384:	080053c5 	.word	0x080053c5
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053c5 	.word	0x080053c5
 8005390:	080053c5 	.word	0x080053c5
 8005394:	080053c5 	.word	0x080053c5
 8005398:	080053bb 	.word	0x080053bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a2:	60fb      	str	r3, [r7, #12]

      break;
 80053a4:	e00f      	b.n	80053c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	60fb      	str	r3, [r7, #12]

      break;
 80053ae:	e00a      	b.n	80053c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b6:	60fb      	str	r3, [r7, #12]

      break;
 80053b8:	e005      	b.n	80053c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	60fb      	str	r3, [r7, #12]

      break;
 80053c2:	e000      	b.n	80053c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80053c4:	bf00      	nop
  }

  return tmpreg;
 80053c6:	68fb      	ldr	r3, [r7, #12]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a46      	ldr	r2, [pc, #280]	@ (8005564 <TIM_Base_SetConfig+0x12c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005456:	d00f      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a43      	ldr	r2, [pc, #268]	@ (8005568 <TIM_Base_SetConfig+0x130>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00b      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a42      	ldr	r2, [pc, #264]	@ (800556c <TIM_Base_SetConfig+0x134>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d007      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a41      	ldr	r2, [pc, #260]	@ (8005570 <TIM_Base_SetConfig+0x138>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a40      	ldr	r2, [pc, #256]	@ (8005574 <TIM_Base_SetConfig+0x13c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d108      	bne.n	800548a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a35      	ldr	r2, [pc, #212]	@ (8005564 <TIM_Base_SetConfig+0x12c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d02b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005498:	d027      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a32      	ldr	r2, [pc, #200]	@ (8005568 <TIM_Base_SetConfig+0x130>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d023      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a31      	ldr	r2, [pc, #196]	@ (800556c <TIM_Base_SetConfig+0x134>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01f      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a30      	ldr	r2, [pc, #192]	@ (8005570 <TIM_Base_SetConfig+0x138>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d01b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005574 <TIM_Base_SetConfig+0x13c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d017      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005578 <TIM_Base_SetConfig+0x140>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a2d      	ldr	r2, [pc, #180]	@ (800557c <TIM_Base_SetConfig+0x144>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00f      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005580 <TIM_Base_SetConfig+0x148>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005584 <TIM_Base_SetConfig+0x14c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005588 <TIM_Base_SetConfig+0x150>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a29      	ldr	r2, [pc, #164]	@ (800558c <TIM_Base_SetConfig+0x154>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d108      	bne.n	80054fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a10      	ldr	r2, [pc, #64]	@ (8005564 <TIM_Base_SetConfig+0x12c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_Base_SetConfig+0xf8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a12      	ldr	r2, [pc, #72]	@ (8005574 <TIM_Base_SetConfig+0x13c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d103      	bne.n	8005538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b01      	cmp	r3, #1
 8005548:	d105      	bne.n	8005556 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	611a      	str	r2, [r3, #16]
  }
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	40010000 	.word	0x40010000
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800
 8005570:	40000c00 	.word	0x40000c00
 8005574:	40010400 	.word	0x40010400
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40014800 	.word	0x40014800
 8005584:	40001800 	.word	0x40001800
 8005588:	40001c00 	.word	0x40001c00
 800558c:	40002000 	.word	0x40002000

08005590 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f023 0201 	bic.w	r2, r3, #1
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f023 0302 	bic.w	r3, r3, #2
 80055d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a20      	ldr	r2, [pc, #128]	@ (8005668 <TIM_OC1_SetConfig+0xd8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_OC1_SetConfig+0x64>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a1f      	ldr	r2, [pc, #124]	@ (800566c <TIM_OC1_SetConfig+0xdc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d10c      	bne.n	800560e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f023 0308 	bic.w	r3, r3, #8
 80055fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f023 0304 	bic.w	r3, r3, #4
 800560c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a15      	ldr	r2, [pc, #84]	@ (8005668 <TIM_OC1_SetConfig+0xd8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_OC1_SetConfig+0x8e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a14      	ldr	r2, [pc, #80]	@ (800566c <TIM_OC1_SetConfig+0xdc>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d111      	bne.n	8005642 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800562c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	621a      	str	r2, [r3, #32]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40010000 	.word	0x40010000
 800566c:	40010400 	.word	0x40010400

08005670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f023 0210 	bic.w	r2, r3, #16
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f023 0320 	bic.w	r3, r3, #32
 80056ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a22      	ldr	r2, [pc, #136]	@ (8005754 <TIM_OC2_SetConfig+0xe4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_OC2_SetConfig+0x68>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a21      	ldr	r2, [pc, #132]	@ (8005758 <TIM_OC2_SetConfig+0xe8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d10d      	bne.n	80056f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a17      	ldr	r2, [pc, #92]	@ (8005754 <TIM_OC2_SetConfig+0xe4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_OC2_SetConfig+0x94>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a16      	ldr	r2, [pc, #88]	@ (8005758 <TIM_OC2_SetConfig+0xe8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d113      	bne.n	800572c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800570a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	621a      	str	r2, [r3, #32]
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40010000 	.word	0x40010000
 8005758:	40010400 	.word	0x40010400

0800575c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0303 	bic.w	r3, r3, #3
 8005792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	021b      	lsls	r3, r3, #8
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a21      	ldr	r2, [pc, #132]	@ (800583c <TIM_OC3_SetConfig+0xe0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d003      	beq.n	80057c2 <TIM_OC3_SetConfig+0x66>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a20      	ldr	r2, [pc, #128]	@ (8005840 <TIM_OC3_SetConfig+0xe4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d10d      	bne.n	80057de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	021b      	lsls	r3, r3, #8
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a16      	ldr	r2, [pc, #88]	@ (800583c <TIM_OC3_SetConfig+0xe0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d003      	beq.n	80057ee <TIM_OC3_SetConfig+0x92>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a15      	ldr	r2, [pc, #84]	@ (8005840 <TIM_OC3_SetConfig+0xe4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d113      	bne.n	8005816 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	621a      	str	r2, [r3, #32]
}
 8005830:	bf00      	nop
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	40010000 	.word	0x40010000
 8005840:	40010400 	.word	0x40010400

08005844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800587a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800588e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	031b      	lsls	r3, r3, #12
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a12      	ldr	r2, [pc, #72]	@ (80058e8 <TIM_OC4_SetConfig+0xa4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <TIM_OC4_SetConfig+0x68>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a11      	ldr	r2, [pc, #68]	@ (80058ec <TIM_OC4_SetConfig+0xa8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d109      	bne.n	80058c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	019b      	lsls	r3, r3, #6
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40010400 	.word	0x40010400

080058f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	f023 0201 	bic.w	r2, r3, #1
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4a28      	ldr	r2, [pc, #160]	@ (80059bc <TIM_TI1_SetConfig+0xcc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01b      	beq.n	8005956 <TIM_TI1_SetConfig+0x66>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005924:	d017      	beq.n	8005956 <TIM_TI1_SetConfig+0x66>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a25      	ldr	r2, [pc, #148]	@ (80059c0 <TIM_TI1_SetConfig+0xd0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <TIM_TI1_SetConfig+0x66>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4a24      	ldr	r2, [pc, #144]	@ (80059c4 <TIM_TI1_SetConfig+0xd4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00f      	beq.n	8005956 <TIM_TI1_SetConfig+0x66>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4a23      	ldr	r2, [pc, #140]	@ (80059c8 <TIM_TI1_SetConfig+0xd8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00b      	beq.n	8005956 <TIM_TI1_SetConfig+0x66>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4a22      	ldr	r2, [pc, #136]	@ (80059cc <TIM_TI1_SetConfig+0xdc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d007      	beq.n	8005956 <TIM_TI1_SetConfig+0x66>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a21      	ldr	r2, [pc, #132]	@ (80059d0 <TIM_TI1_SetConfig+0xe0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d003      	beq.n	8005956 <TIM_TI1_SetConfig+0x66>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a20      	ldr	r2, [pc, #128]	@ (80059d4 <TIM_TI1_SetConfig+0xe4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d101      	bne.n	800595a <TIM_TI1_SetConfig+0x6a>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <TIM_TI1_SetConfig+0x6c>
 800595a:	2300      	movs	r3, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	e003      	b.n	800597a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	b2db      	uxtb	r3, r3
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f023 030a 	bic.w	r3, r3, #10
 8005994:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f003 030a 	and.w	r3, r3, #10
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4313      	orrs	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	621a      	str	r2, [r3, #32]
}
 80059ae:	bf00      	nop
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40010400 	.word	0x40010400
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40001800 	.word	0x40001800

080059d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f023 0201 	bic.w	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f023 030a 	bic.w	r3, r3, #10
 8005a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b087      	sub	sp, #28
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f023 0210 	bic.w	r2, r3, #16
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	031b      	lsls	r3, r3, #12
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a88:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	621a      	str	r2, [r3, #32]
}
 8005aa4:	bf00      	nop
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0210 	bic.w	r2, r3, #16
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	031b      	lsls	r3, r3, #12
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005aec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	621a      	str	r2, [r3, #32]
}
 8005b04:	bf00      	nop
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f023 0303 	bic.w	r3, r3, #3
 8005b3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005b60:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	621a      	str	r2, [r3, #32]
}
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bc6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	031b      	lsls	r3, r3, #12
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005bda:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	031b      	lsls	r3, r3, #12
 8005be0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f043 0307 	orr.w	r3, r3, #7
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	609a      	str	r2, [r3, #8]
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	021a      	lsls	r2, r3, #8
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	609a      	str	r2, [r3, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f003 031f 	and.w	r3, r3, #31
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a1a      	ldr	r2, [r3, #32]
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	401a      	ands	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1a      	ldr	r2, [r3, #32]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
	...

08005cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e05a      	b.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a21      	ldr	r2, [pc, #132]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d022      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d28:	d01d      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d018      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a1b      	ldr	r2, [pc, #108]	@ (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d013      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a1a      	ldr	r2, [pc, #104]	@ (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00e      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a18      	ldr	r2, [pc, #96]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d009      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a17      	ldr	r2, [pc, #92]	@ (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a15      	ldr	r2, [pc, #84]	@ (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d10c      	bne.n	8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40010400 	.word	0x40010400
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40001800 	.word	0x40001800

08005dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <memset>:
 8005de4:	4402      	add	r2, r0
 8005de6:	4603      	mov	r3, r0
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d100      	bne.n	8005dee <memset+0xa>
 8005dec:	4770      	bx	lr
 8005dee:	f803 1b01 	strb.w	r1, [r3], #1
 8005df2:	e7f9      	b.n	8005de8 <memset+0x4>

08005df4 <__libc_init_array>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	4d0d      	ldr	r5, [pc, #52]	@ (8005e2c <__libc_init_array+0x38>)
 8005df8:	4c0d      	ldr	r4, [pc, #52]	@ (8005e30 <__libc_init_array+0x3c>)
 8005dfa:	1b64      	subs	r4, r4, r5
 8005dfc:	10a4      	asrs	r4, r4, #2
 8005dfe:	2600      	movs	r6, #0
 8005e00:	42a6      	cmp	r6, r4
 8005e02:	d109      	bne.n	8005e18 <__libc_init_array+0x24>
 8005e04:	4d0b      	ldr	r5, [pc, #44]	@ (8005e34 <__libc_init_array+0x40>)
 8005e06:	4c0c      	ldr	r4, [pc, #48]	@ (8005e38 <__libc_init_array+0x44>)
 8005e08:	f000 f818 	bl	8005e3c <_init>
 8005e0c:	1b64      	subs	r4, r4, r5
 8005e0e:	10a4      	asrs	r4, r4, #2
 8005e10:	2600      	movs	r6, #0
 8005e12:	42a6      	cmp	r6, r4
 8005e14:	d105      	bne.n	8005e22 <__libc_init_array+0x2e>
 8005e16:	bd70      	pop	{r4, r5, r6, pc}
 8005e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1c:	4798      	blx	r3
 8005e1e:	3601      	adds	r6, #1
 8005e20:	e7ee      	b.n	8005e00 <__libc_init_array+0xc>
 8005e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e26:	4798      	blx	r3
 8005e28:	3601      	adds	r6, #1
 8005e2a:	e7f2      	b.n	8005e12 <__libc_init_array+0x1e>
 8005e2c:	08005e7c 	.word	0x08005e7c
 8005e30:	08005e7c 	.word	0x08005e7c
 8005e34:	08005e7c 	.word	0x08005e7c
 8005e38:	08005e80 	.word	0x08005e80

08005e3c <_init>:
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	bf00      	nop
 8005e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e42:	bc08      	pop	{r3}
 8005e44:	469e      	mov	lr, r3
 8005e46:	4770      	bx	lr

08005e48 <_fini>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	bf00      	nop
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr
